"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["65242"],{37906:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>c,toc:()=>l,default:()=>h,metadata:()=>i,assets:()=>r,contentTitle:()=>o});var i=JSON.parse('{"id":"os/linux/sys/syscall","title":"syscall","description":"- Ring 0 - \u5185\u6838\u6001","source":"@site/../notes/os/linux/sys/syscall.md","sourceDirName":"os/linux/sys","slug":"/os/linux/sys/syscall","permalink":"/notes/os/linux/sys/syscall","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/os/linux/sys/syscall.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1757294976000,"frontMatter":{"title":"syscall"},"sidebar":"docs","previous":{"title":"Tuning","permalink":"/notes/os/linux/sys/tuning"},"next":{"title":"sysctl","permalink":"/notes/os/linux/sys/sysctl"}}'),s=t(86106),d=t(17776);let c={title:"syscall"},o="syscall",r={},l=[{value:"BPF vs eBPF",id:"bpf-vs-ebpf",level:2}];function a(n){let e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"syscall",children:"syscall"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Ring 0 - \u5185\u6838\u6001\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u521D\u59CB\u5316\u4E2D\u65AD\u6216\u5F02\u5E38\u5904\u7406\u673A\u5236"}),"\n",(0,s.jsx)(e.li,{children:"\u4EE3\u7801\u53EF\u4EE5\u76F4\u63A5\u8BBF\u95EE\u786C\u4EF6\u3001\u7BA1\u7406\u5185\u5B58\u548C\u6267\u884CCPU\u7684\u6240\u6709\u6307\u4EE4\u96C6"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u6838\u548C\u9A71\u52A8\u7A0B\u5E8F"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"Ring 1 & Ring 2 - \u5F88\u5C11\u4F7F\u7528 - \u4F8B\u5982 \u9A71\u52A8\u7A0B\u5E8F"}),"\n",(0,s.jsxs)(e.li,{children:["Ring 3 - \u7528\u6237\u6001\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u4E0D\u80FD\u76F4\u63A5\u8BBF\u95EE\u786C\u4EF6\u6216\u6267\u884C\u67D0\u4E9B\u654F\u611F\u7684CPU\u6307\u4EE4"}),"\n",(0,s.jsx)(e.li,{children:"\u901A\u8FC7 \u7CFB\u7EDF\u8C03\u7528/syscall \u8BBF\u95EE\u5185\u6838\u6001"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u6C47\u7F16\u6307\u4EE4\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["x86 ",(0,s.jsx)(e.code,{children:"int 0x80"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"IDT - Interrupt Descriptor Table - \u4E2D\u65AD\u63CF\u8FF0\u7B26\u8868"}),"\n",(0,s.jsx)(e.li,{children:"0x80 - 0x85"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"lidt"})," - load IDT"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["x86-64 ",(0,s.jsx)(e.code,{children:"syscall"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"MSR - Model Specific Register - \u6A21\u578B\u7279\u5B9A\u5BC4\u5B58\u5668"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"rdmsr"})," - read MSR"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"wrmsr"})," - write MSR"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["arm ",(0,s.jsx)(e.code,{children:"swi 0"})," - software interrupt"]}),"\n",(0,s.jsxs)(e.li,{children:["aaarch64 ",(0,s.jsx)(e.code,{children:"svc #0"})," - supervisor call"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\u5F53 linux \u5B8C\u6210 init \u4E4B\u540E syscall \u5C31\u662F\u552F\u4E00\u7684\u7528\u6237\u6001\u548C\u5185\u6838\u6001\u4EA4\u4E92\u65B9\u5F0F\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u8BBE\u7F6E\u7CFB\u7EDF\u8C03\u7528\u8868\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"arch/x86/include/generated/uapi/asm/unistd_64.h"})," - \u8C03\u7528\u53F7"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"arch/x86/entry/syscalls/syscall_64.tbl"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"\u521D\u59CB\u5316\u4E2D\u65AD\u6216\u5F02\u5E38\u5904\u7406\u673A\u5236"}),"\n",(0,s.jsx)(e.li,{children:"\u914D\u7F6E\u7528\u6237\u7A7A\u95F4\u5230\u5185\u6838\u7A7A\u95F4\u7684\u5207\u6362"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u5927\u591A\u6570\u5E94\u7528\u901A\u8FC7 libc \u7684\u5C01\u88C5\u8C03\u7528 syscall\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u4F8B\u5982 ",(0,s.jsx)(e.code,{children:"write"}),", ",(0,s.jsx)(e.code,{children:"read"})," \u800C\u4E0D\u662F ",(0,s.jsx)(e.code,{children:'syscall(SYS_write, 1, "Hello, world!\\n", 14)'})]}),"\n",(0,s.jsx)(e.li,{children:"\u5927\u591A\u52A8\u6001\u4F9D\u8D56 libc - \u5F15\u5165\u73AF\u5883\u4F9D\u8D56"}),"\n",(0,s.jsx)(e.li,{children:"\u4E0D\u5C11\u5E94\u7528\u53EF\u901A\u8FC7\u9759\u6001\u94FE\u63A5 musl \u6765\u907F\u514D\u4F9D\u8D56 libc"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["Golang \u662F\u76F4\u63A5\u8C03\u7528 syscall - ",(0,s.jsx)(e.a,{href:"https://pkg.go.dev/syscall",children:"https://pkg.go.dev/syscall"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u4E0D\u4F9D\u8D56 libc - \u8DE8\u5E73\u53F0"}),"\n",(0,s.jsx)(e.li,{children:"\u9759\u6001\u7F16\u8BD1"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:'// SYS_write=1\nsyscall(SYS_write, 1, "Hello, world!\\n", 14);\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"ausyscall 2 # open\nausyscall --dump\n"})}),"\n",(0,s.jsxs)(e.p,{children:["|   N | ",(0,s.jsx)(e.code,{children:"SYS_name"}),"              | api                                                                                                                                                                      |\n| --: | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --- |\n|   0 | read                    | ",(0,s.jsx)(e.code,{children:"ssize_t read(int fd, void *buf, size_t count)"}),"                                                                                                                          |\n|   1 | write                   | ",(0,s.jsx)(e.code,{children:"ssize_t write(int fd, const void *buf, size_t count)"}),"                                                                                                                   |\n|   2 | open                    | ",(0,s.jsx)(e.code,{children:"int open(const char *pathname, int flags, mode_t mode)"}),"                                                                                                                 |\n|   3 | close                   | ",(0,s.jsx)(e.code,{children:"int close(int fd)"}),"                                                                                                                                                      |\n|   4 | stat                    | ",(0,s.jsx)(e.code,{children:"int stat(const char *pathname, struct stat *statbuf)"}),"                                                                                                                   |\n|   5 | fstat                   | ",(0,s.jsx)(e.code,{children:"int fstat(int fd, struct stat *statbuf)"}),"                                                                                                                                |\n|   6 | lstat                   | ",(0,s.jsx)(e.code,{children:"int lstat(const char *pathname, struct stat *statbuf)"}),"                                                                                                                  |\n|   7 | poll                    | ",(0,s.jsx)(e.code,{children:"int poll(struct pollfd *fds, nfds_t nfds, int timeout)"}),"                                                                                                                 |\n|   8 | lseek                   | ",(0,s.jsx)(e.code,{children:"off_t lseek(int fd, off_t offset, int whence)"}),"                                                                                                                          |\n|   9 | mmap                    | ",(0,s.jsx)(e.code,{children:"void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)"}),"                                                                                          |\n|  10 | mprotect                | ",(0,s.jsx)(e.code,{children:"int mprotect(void *addr, size_t len, int prot)"}),"                                                                                                                         |\n|  11 | munmap                  | ",(0,s.jsx)(e.code,{children:"int munmap(void *addr, size_t len)"}),"                                                                                                                                     |\n|  12 | brk                     | ",(0,s.jsx)(e.code,{children:"int brk(void *addr)"}),", ",(0,s.jsx)(e.code,{children:"void *sbrk(intptr_t increment)"}),"                                                                                                                  |\n|  13 | rt_sigaction            | ",(0,s.jsx)(e.code,{children:"int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)"}),"                                                                                       |\n|  14 | rt_sigprocmask          | ",(0,s.jsx)(e.code,{children:"int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)"}),"                                                                                                        |\n|  15 | rt_sigreturn            | (internal)                                                                                                                                                               |\n|  16 | ioctl                   | ",(0,s.jsx)(e.code,{children:"int ioctl(int fd, unsigned long request, ...)"}),"                                                                                                                          |\n|  17 | pread                   | ",(0,s.jsx)(e.code,{children:"ssize_t pread(int fd, void *buf, size_t count, off_t offset)"}),"                                                                                                           |\n|  18 | pwrite                  | ",(0,s.jsx)(e.code,{children:"ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset)"}),"                                                                                                    |\n|  19 | readv                   | ",(0,s.jsx)(e.code,{children:"ssize_t readv(int fd, const struct iovec *iov, int iovcnt)"}),"                                                                                                             |\n|  20 | writev                  | ",(0,s.jsx)(e.code,{children:"ssize_t writev(int fd, const struct iovec *iov, int iovcnt)"}),"                                                                                                            |\n|  21 | access                  | ",(0,s.jsx)(e.code,{children:"int access(const char *pathname, int mode)"}),"                                                                                                                             |\n|  22 | pipe                    | ",(0,s.jsx)(e.code,{children:"int pipe(int pipefd[2])"}),"                                                                                                                                                |\n|  23 | select                  | ",(0,s.jsx)(e.code,{children:"int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)"}),"                                                                    |\n|  24 | sched_yield             | ",(0,s.jsx)(e.code,{children:"int sched_yield(void)"}),"                                                                                                                                                  |\n|  25 | mremap                  | ",(0,s.jsx)(e.code,{children:"void *mremap(void *old_addr, size_t old_len, size_t new_len, int flags, ...)"}),"                                                                                           |\n|  26 | msync                   | ",(0,s.jsx)(e.code,{children:"int msync(void *addr, size_t len, int flags)"}),"                                                                                                                           |\n|  27 | mincore                 | ",(0,s.jsx)(e.code,{children:"int mincore(void *addr, size_t len, unsigned char *vec)"}),"                                                                                                                |\n|  28 | madvise                 | ",(0,s.jsx)(e.code,{children:"int madvise(void *addr, size_t len, int advice)"}),"                                                                                                                        |\n|  29 | shmget                  | ",(0,s.jsx)(e.code,{children:"int shmget(key_t key, size_t size, int shmflg)"}),"                                                                                                                         |\n|  30 | shmat                   | ",(0,s.jsx)(e.code,{children:"void *shmat(int shmid, const void *shmaddr, int shmflg)"}),"                                                                                                                |\n|  31 | shmctl                  | ",(0,s.jsx)(e.code,{children:"int shmctl(int shmid, int cmd, struct shmid_ds *buf)"}),"                                                                                                                   |\n|  32 | dup                     | ",(0,s.jsx)(e.code,{children:"int dup(int oldfd)"}),"                                                                                                                                                     |\n|  33 | dup2                    | ",(0,s.jsx)(e.code,{children:"int dup2(int oldfd, int newfd)"}),"                                                                                                                                         |\n|  34 | pause                   | ",(0,s.jsx)(e.code,{children:"int pause(void)"}),"                                                                                                                                                        |\n|  35 | nanosleep               | ",(0,s.jsx)(e.code,{children:"int nanosleep(const struct timespec *req, struct timespec *rem)"}),"                                                                                                        |\n|  36 | getitimer               | ",(0,s.jsx)(e.code,{children:"int getitimer(int which, struct itimerval *curr_value)"}),"                                                                                                                 |\n|  37 | alarm                   | ",(0,s.jsx)(e.code,{children:"unsigned int alarm(unsigned int seconds)"}),"                                                                                                                               |\n|  38 | setitimer               | ",(0,s.jsx)(e.code,{children:"int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value)"}),"                                                                               |\n|  39 | getpid                  | ",(0,s.jsx)(e.code,{children:"pid_t getpid(void)"}),"                                                                                                                                                     |\n|  40 | sendfile                | ",(0,s.jsx)(e.code,{children:"ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count)"}),"                                                                                                   |\n|  41 | socket                  | ",(0,s.jsx)(e.code,{children:"int socket(int domain, int type, int protocol)"}),"                                                                                                                         |\n|  42 | connect                 | ",(0,s.jsx)(e.code,{children:"int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen)"}),"                                                                                                |\n|  43 | accept                  | ",(0,s.jsx)(e.code,{children:"int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)"}),"                                                                                                      |\n|  44 | sendto                  | ",(0,s.jsx)(e.code,{children:"ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen)"}),"                                                |\n|  45 | recvfrom                | ",(0,s.jsx)(e.code,{children:"ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen)"}),"                                                          |\n|  46 | sendmsg                 | ",(0,s.jsx)(e.code,{children:"ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags)"}),"                                                                                                       |\n|  47 | recvmsg                 | ",(0,s.jsx)(e.code,{children:"ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags)"}),"                                                                                                             |\n|  48 | shutdown                | ",(0,s.jsx)(e.code,{children:"int shutdown(int sockfd, int how)"}),"                                                                                                                                      |\n|  49 | bind                    | ",(0,s.jsx)(e.code,{children:"int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)"}),"                                                                                                   |\n|  50 | listen                  | ",(0,s.jsx)(e.code,{children:"int listen(int sockfd, int backlog)"}),"                                                                                                                                    |\n|  51 | getsockname             | ",(0,s.jsx)(e.code,{children:"int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen)"}),"                                                                                                 |\n|  52 | getpeername             | ",(0,s.jsx)(e.code,{children:"int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen)"}),"                                                                                                 |\n|  53 | socketpair              | ",(0,s.jsx)(e.code,{children:"int socketpair(int domain, int type, int protocol, int sv[2])"}),"                                                                                                          |\n|  54 | setsockopt              | ",(0,s.jsx)(e.code,{children:"int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen)"}),"                                                                               |\n|  55 | getsockopt              | ",(0,s.jsx)(e.code,{children:"int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen)"}),"                                                                                    |\n|  56 | clone                   | ",(0,s.jsx)(e.code,{children:"long clone(unsigned long flags, void *child_stack, int *ptid, int *ctid, unsigned long newtls)"}),"                                                                         |\n|  57 | fork                    | ",(0,s.jsx)(e.code,{children:"pid_t fork(void)"}),"                                                                                                                                                       |\n|  58 | vfork                   | ",(0,s.jsx)(e.code,{children:"pid_t vfork(void)"}),"                                                                                                                                                      |\n|  59 | execve                  | ",(0,s.jsx)(e.code,{children:"int execve(const char *pathname, char *const argv[], char *const envp[])"}),"                                                                                               |\n|  60 | exit                    | ",(0,s.jsx)(e.code,{children:"void exit(int status)"}),", ",(0,s.jsx)(e.code,{children:"void _exit(int status)"}),"                                                                                                                        |\n|  61 | wait4                   | ",(0,s.jsx)(e.code,{children:"pid_t wait4(pid_t pid, int *wstatus, int options, struct rusage *rusage)"}),"                                                                                               |\n|  62 | kill                    | ",(0,s.jsx)(e.code,{children:"int kill(pid_t pid, int sig)"}),"                                                                                                                                           |\n|  63 | uname                   | ",(0,s.jsx)(e.code,{children:"int uname(struct utsname *buf)"}),"                                                                                                                                         |\n|  64 | semget                  | ",(0,s.jsx)(e.code,{children:"int semget(key_t key, int nsems, int semflg)"}),"                                                                                                                           |\n|  65 | semop                   | ",(0,s.jsx)(e.code,{children:"int semop(int semid, struct sembuf *sops, size_t nsops)"}),"                                                                                                                |\n|  66 | semctl                  | ",(0,s.jsx)(e.code,{children:"int semctl(int semid, int semnum, int cmd, ...)"}),"                                                                                                                        |\n|  67 | shmdt                   | ",(0,s.jsx)(e.code,{children:"int shmdt(const void *shmaddr)"}),"                                                                                                                                         |\n|  68 | msgget                  | ",(0,s.jsx)(e.code,{children:"int msgget(key_t key, int msgflg)"}),"                                                                                                                                      |\n|  69 | msgsnd                  | ",(0,s.jsx)(e.code,{children:"int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg)"}),"                                                                                                      |\n|  70 | msgrcv                  | ",(0,s.jsx)(e.code,{children:"ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)"}),"                                                                                           |\n|  71 | msgctl                  | ",(0,s.jsx)(e.code,{children:"int msgctl(int msqid, int cmd, struct msqid_ds *buf)"}),"                                                                                                                   |\n|  72 | fcntl                   | ",(0,s.jsx)(e.code,{children:"int fcntl(int fd, int cmd, ...)"}),"                                                                                                                                        |\n|  73 | flock                   | ",(0,s.jsx)(e.code,{children:"int flock(int fd, int operation)"}),"                                                                                                                                       |\n|  74 | fsync                   | ",(0,s.jsx)(e.code,{children:"int fsync(int fd)"}),"                                                                                                                                                      |\n|  75 | fdatasync               | ",(0,s.jsx)(e.code,{children:"int fdatasync(int fd)"}),"                                                                                                                                                  |\n|  76 | truncate                | ",(0,s.jsx)(e.code,{children:"int truncate(const char *path, off_t len)"}),"                                                                                                                              |\n|  77 | ftruncate               | ",(0,s.jsx)(e.code,{children:"int ftruncate(int fd, off_t len)"}),"                                                                                                                                       |\n|  78 | getdents                | ",(0,s.jsx)(e.code,{children:"ssize_t posix_getdents(int fd, void *buf, size_t len, int flags)"}),",readdir                                                                                               |\n|  79 | getcwd                  | ",(0,s.jsx)(e.code,{children:"char *getcwd(char *buf, size_t size)"}),"                                                                                                                                   |\n|  80 | chdir                   | ",(0,s.jsx)(e.code,{children:"int chdir(const char *path)"}),"                                                                                                                                            |\n|  81 | fchdir                  | ",(0,s.jsx)(e.code,{children:"int fchdir(int fd)"}),"                                                                                                                                                     |\n|  82 | rename                  | ",(0,s.jsx)(e.code,{children:"int rename(const char *old, const char *new)"}),"                                                                                                                           |\n|  83 | mkdir                   | ",(0,s.jsx)(e.code,{children:"int mkdir(const char *pathname, mode_t mode)"}),"                                                                                                                           |\n|  84 | rmdir                   | ",(0,s.jsx)(e.code,{children:"int rmdir(const char *pathname)"}),"                                                                                                                                        |\n|  85 | creat                   | ",(0,s.jsx)(e.code,{children:"int creat(const char *pathname, mode_t mode)"}),"                                                                                                                           |\n|  86 | link                    | ",(0,s.jsx)(e.code,{children:"int link(const char *oldpath, const char *newpath)"}),"                                                                                                                     |\n|  87 | unlink                  | ",(0,s.jsx)(e.code,{children:"int unlink(const char *pathname)"}),"                                                                                                                                       |\n|  88 | symlink                 | ",(0,s.jsx)(e.code,{children:"int symlink(const char *target, const char *linkpath)"}),"                                                                                                                  |\n|  89 | readlink                | ",(0,s.jsx)(e.code,{children:"ssize_t readlink(const char *pathname, char *buf, size_t bufsiz)"}),"                                                                                                       |\n|  90 | chmod                   | ",(0,s.jsx)(e.code,{children:"int chmod(const char *pathname, mode_t mode)"}),"                                                                                                                           |\n|  91 | fchmod                  | ",(0,s.jsx)(e.code,{children:"int fchmod(int fd, mode_t mode)"}),"                                                                                                                                        |\n|  92 | chown                   | ",(0,s.jsx)(e.code,{children:"int chown(const char *pathname, uid_t owner, gid_t group)"}),"                                                                                                              |\n|  93 | fchown                  | ",(0,s.jsx)(e.code,{children:"int fchown(int fd, uid_t owner, gid_t group)"}),"                                                                                                                           |\n|  94 | lchown                  | ",(0,s.jsx)(e.code,{children:"int lchown(const char *pathname, uid_t owner, gid_t group)"}),"                                                                                                             |\n|  95 | umask                   | ",(0,s.jsx)(e.code,{children:"mode_t umask(mode_t mask)"}),"                                                                                                                                              |\n|  96 | gettimeofday            | ",(0,s.jsx)(e.code,{children:"int gettimeofday(struct timeval *tv, struct timezone *tz)"}),"                                                                                                              |\n|  97 | getrlimit               | ",(0,s.jsx)(e.code,{children:"int getrlimit(int resource, struct rlimit *rlim)"}),"                                                                                                                       |\n|  98 | getrusage               | ",(0,s.jsx)(e.code,{children:"int getrusage(int who, struct rusage *usage)"}),"                                                                                                                           |\n|  99 | sysinfo                 | ",(0,s.jsx)(e.code,{children:"int sysinfo(struct sysinfo *info)"}),"                                                                                                                                      |\n| 100 | times                   | ",(0,s.jsx)(e.code,{children:"clock_t times(struct tms *buf)"}),"                                                                                                                                         |\n| 101 | ptrace                  | ",(0,s.jsx)(e.code,{children:"long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data)"}),"                                                                                          |\n| 102 | getuid                  | ",(0,s.jsx)(e.code,{children:"uid_t getuid(void)"}),"                                                                                                                                                     |\n| 103 | syslog                  | ",(0,s.jsx)(e.code,{children:"int syslog(int type, char *bufp, int len)"}),"                                                                                                                              |\n| 104 | getgid                  | ",(0,s.jsx)(e.code,{children:"gid_t getgid(void)"}),"                                                                                                                                                     |\n| 105 | setuid                  | ",(0,s.jsx)(e.code,{children:"int setuid(uid_t uid)"}),"                                                                                                                                                  |\n| 106 | setgid                  | ",(0,s.jsx)(e.code,{children:"int setgid(gid_t gid)"}),"                                                                                                                                                  |\n| 107 | geteuid                 | ",(0,s.jsx)(e.code,{children:"uid_t geteuid(void)"}),"                                                                                                                                                    |\n| 108 | getegid                 | ",(0,s.jsx)(e.code,{children:"gid_t getegid(void)"}),"                                                                                                                                                    |\n| 109 | setpgid                 | ",(0,s.jsx)(e.code,{children:"int setpgid(pid_t pid, pid_t pgid)"}),"                                                                                                                                     |\n| 110 | getppid                 | ",(0,s.jsx)(e.code,{children:"pid_t getppid(void)"}),"                                                                                                                                                    |\n| 111 | getpgrp                 | ",(0,s.jsx)(e.code,{children:"pid_t getpgrp(void)"}),"                                                                                                                                                    |\n| 112 | setsid                  | ",(0,s.jsx)(e.code,{children:"pid_t setsid(void)"}),"                                                                                                                                                     |\n| 113 | setreuid                | ",(0,s.jsx)(e.code,{children:"int setreuid(uid_t ruid, uid_t euid)"}),"                                                                                                                                   |\n| 114 | setregid                | ",(0,s.jsx)(e.code,{children:"int setregid(gid_t rgid, gid_t egid)"}),"                                                                                                                                   |\n| 115 | getgroups               | ",(0,s.jsx)(e.code,{children:"int getgroups(int size, gid_t list[])"}),"                                                                                                                                  |\n| 116 | setgroups               | ",(0,s.jsx)(e.code,{children:"int setgroups(size_t size, const gid_t *list)"}),"                                                                                                                          |\n| 117 | setresuid               | ",(0,s.jsx)(e.code,{children:"int setresuid(uid_t ruid, uid_t euid, uid_t suid)"}),"                                                                                                                      |\n| 118 | getresuid               | ",(0,s.jsx)(e.code,{children:"int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid)"}),"                                                                                                                   |\n| 119 | setresgid               | ",(0,s.jsx)(e.code,{children:"int setresgid(gid_t rgid, gid_t egid, gid_t sgid)"}),"                                                                                                                      |\n| 120 | getresgid               | ",(0,s.jsx)(e.code,{children:"int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid)"}),"                                                                                                                   |\n| 121 | getpgid                 | ",(0,s.jsx)(e.code,{children:"pid_t getpgid(pid_t pid)"}),"                                                                                                                                               |\n| 122 | setfsuid                | ",(0,s.jsx)(e.code,{children:"int setfsuid(uid_t fsuid)"}),"                                                                                                                                              |\n| 123 | setfsgid                | ",(0,s.jsx)(e.code,{children:"int setfsgid(gid_t fsgid)"}),"                                                                                                                                              |\n| 124 | getsid                  | ",(0,s.jsx)(e.code,{children:"pid_t getsid(pid_t pid)"}),"                                                                                                                                                |\n| 125 | capget                  | ",(0,s.jsx)(e.code,{children:"int capget(cap_user_header_t hdrp, cap_user_data_t datap)"}),"                                                                                                              |\n| 126 | capset                  | ",(0,s.jsx)(e.code,{children:"int capset(cap_user_header_t hdrp, const cap_user_data_t datap)"}),"                                                                                                        |\n| 127 | rt_sigpending           | ",(0,s.jsx)(e.code,{children:"int sigpending(sigset_t *set)"}),"                                                                                                                                          |\n| 128 | rt_sigtimedwait         | ",(0,s.jsx)(e.code,{children:"int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout)"}),"                                                                                 |\n| 129 | rt_sigqueueinfo         | ",(0,s.jsx)(e.code,{children:"int sigqueue(pid_t pid, int sig, const union sigval value)"}),"                                                                                                             |\n| 130 | rt_sigsuspend           | ",(0,s.jsx)(e.code,{children:"int sigsuspend(const sigset_t *mask)"}),"                                                                                                                                   |\n| 131 | sigaltstack             | ",(0,s.jsx)(e.code,{children:"int sigaltstack(const stack_t *ss, stack_t *old_ss)"}),"                                                                                                                    |\n| 132 | utime                   | ",(0,s.jsx)(e.code,{children:"int utime(const char *filename, const struct utimbuf *times)"}),"                                                                                                           |\n| 133 | mknod                   | ",(0,s.jsx)(e.code,{children:"int mknod(const char *pathname, mode_t mode, dev_t dev)"}),"                                                                                                                |\n| 134 | uselib                  | (obsolete)                                                                                                                                                               |\n| 135 | personality             | ",(0,s.jsx)(e.code,{children:"int personality(unsigned long persona)"}),"                                                                                                                                 |\n| 136 | ustat                   | ",(0,s.jsx)(e.code,{children:"int ustat(dev_t dev, struct ustat *ubuf)"}),"                                                                                                                               |\n| 137 | statfs                  | ",(0,s.jsx)(e.code,{children:"int statfs(const char *path, struct statfs *buf)"}),"                                                                                                                       |\n| 138 | fstatfs                 | ",(0,s.jsx)(e.code,{children:"int fstatfs(int fd, struct statfs *buf)"}),"                                                                                                                                |\n| 139 | sysfs                   | (obsolete)                                                                                                                                                               |\n| 140 | getpriority             | ",(0,s.jsx)(e.code,{children:"int getpriority(int which, id_t who)"}),"                                                                                                                                   |\n| 141 | setpriority             | ",(0,s.jsx)(e.code,{children:"int setpriority(int which, id_t who, int prio)"}),"                                                                                                                         |\n| 142 | sched_setparam          | ",(0,s.jsx)(e.code,{children:"int sched_setparam(pid_t pid, const struct sched_param *param)"}),"                                                                                                         |\n| 143 | sched_getparam          | ",(0,s.jsx)(e.code,{children:"int sched_getparam(pid_t pid, struct sched_param *param)"}),"                                                                                                               |\n| 144 | sched_setscheduler      | ",(0,s.jsx)(e.code,{children:"int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param)"}),"                                                                                         |\n| 145 | sched_getscheduler      | ",(0,s.jsx)(e.code,{children:"int sched_getscheduler(pid_t pid)"}),"                                                                                                                                      |\n| 146 | sched_get_priority_max  | ",(0,s.jsx)(e.code,{children:"int sched_get_priority_max(int policy)"}),"                                                                                                                                 |\n| 147 | sched_get_priority_min  | ",(0,s.jsx)(e.code,{children:"int sched_get_priority_min(int policy)"}),"                                                                                                                                 |\n| 148 | sched_rr_get_interval   | ",(0,s.jsx)(e.code,{children:"int sched_rr_get_interval(pid_t pid, struct timespec *tp)"}),"                                                                                                              |\n| 149 | mlock                   | ",(0,s.jsx)(e.code,{children:"int mlock(const void *addr, size_t len)"}),"                                                                                                                                |\n| 150 | munlock                 | ",(0,s.jsx)(e.code,{children:"int munlock(const void *addr, size_t len)"}),"                                                                                                                              |\n| 151 | mlockall                | ",(0,s.jsx)(e.code,{children:"int mlockall(int flags)"}),"                                                                                                                                                |\n| 152 | munlockall              | ",(0,s.jsx)(e.code,{children:"int munlockall(void)"}),"                                                                                                                                                   |\n| 153 | vhangup                 | ",(0,s.jsx)(e.code,{children:"int vhangup(void)"}),"                                                                                                                                                      |\n| 154 | modify_ldt              | ",(0,s.jsx)(e.code,{children:"int modify_ldt(int func, void *ptr, unsigned long bytecount)"}),"                                                                                                           |\n| 155 | pivot_root              | ",(0,s.jsx)(e.code,{children:"int pivot_root(const char *new_root, const char *put_old)"}),"                                                                                                              |\n| 156 | _sysctl                | (obsolete)                                                                                                                                                               |\n| 157 | prctl                   | ",(0,s.jsx)(e.code,{children:"int prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)"}),"                                                                  |\n| 158 | arch_prctl              | ",(0,s.jsx)(e.code,{children:"int arch_prctl(int code, unsigned long addr)"}),"                                                                                                                           |\n| 159 | adjtimex                | ",(0,s.jsx)(e.code,{children:"int adjtimex(struct timex *buf)"}),"                                                                                                                                        |\n| 160 | setrlimit               | ",(0,s.jsx)(e.code,{children:"int setrlimit(int resource, const struct rlimit *rlim)"}),"                                                                                                                 |\n| 161 | chroot                  | ",(0,s.jsx)(e.code,{children:"int chroot(const char *path)"}),"                                                                                                                                           |\n| 162 | sync                    | ",(0,s.jsx)(e.code,{children:"void sync(void)"}),"                                                                                                                                                        |\n| 163 | acct                    | ",(0,s.jsx)(e.code,{children:"int acct(const char *filename)"}),"                                                                                                                                         |\n| 164 | settimeofday            | ",(0,s.jsx)(e.code,{children:"int settimeofday(const struct timeval *tv, const struct timezone *tz)"}),"                                                                                                  |\n| 165 | mount                   | ",(0,s.jsx)(e.code,{children:"int mount(const char *source, const char *target, const char *filesystemtype, unsigned long mountflags, const void *data)"}),"                                              |\n| 166 | umount2                 | ",(0,s.jsx)(e.code,{children:"int umount2(const char *target, int flags)"}),"                                                                                                                             |\n| 167 | swapon                  | ",(0,s.jsx)(e.code,{children:"int swapon(const char *path, int swapflags)"}),"                                                                                                                            |\n| 168 | swapoff                 | ",(0,s.jsx)(e.code,{children:"int swapoff(const char *path)"}),"                                                                                                                                          |\n| 169 | reboot                  | ",(0,s.jsx)(e.code,{children:"int reboot(int magic, int magic2, int cmd, void *arg)"}),"                                                                                                                  |\n| 170 | sethostname             | ",(0,s.jsx)(e.code,{children:"int sethostname(const char *name, size_t len)"}),"                                                                                                                          |\n| 171 | setdomainname           | ",(0,s.jsx)(e.code,{children:"int setdomainname(const char *name, size_t len)"}),"                                                                                                                        |\n| 172 | iopl                    | ",(0,s.jsx)(e.code,{children:"int iopl(int level)"}),"                                                                                                                                                    |\n| 173 | ioperm                  | ",(0,s.jsx)(e.code,{children:"int ioperm(unsigned long from, unsigned long num, int turn_on)"}),"                                                                                                         |\n| 174 | create_module           | (obsolete)                                                                                                                                                               |\n| 175 | init_module             | ",(0,s.jsx)(e.code,{children:"int init_module(void *module_image, unsigned long len, const char *param_values)"}),"                                                                                       |\n| 176 | delete_module           | ",(0,s.jsx)(e.code,{children:"int delete_module(const char *name, int flags)"}),"                                                                                                                         |\n| 177 | get_kernel_syms         | (obsolete)                                                                                                                                                               |\n| 178 | query_module            | (obsolete)                                                                                                                                                               |\n| 179 | quotactl                | ",(0,s.jsx)(e.code,{children:"int quotactl(int cmd, const char *special, int id, caddr_t addr)"}),"                                                                                                       |\n| 180 | nfsservctl              | (obsolete)                                                                                                                                                               |\n| 181 | getpmsg                 | (not implemented)                                                                                                                                                        |\n| 182 | putpmsg                 | (not implemented)                                                                                                                                                        |\n| 183 | afs_syscall             | (not implemented)                                                                                                                                                        |\n| 184 | tuxcall                 | (not implemented)                                                                                                                                                        |\n| 185 | security                | (not implemented)                                                                                                                                                        |\n| 186 | gettid                  | ",(0,s.jsx)(e.code,{children:"pid_t gettid(void)"}),"                                                                                                                                                     |\n| 187 | readahead               | ",(0,s.jsx)(e.code,{children:"ssize_t readahead(int fd, off64_t offset, size_t count)"}),"                                                                                                                |\n| 188 | setxattr                | ",(0,s.jsx)(e.code,{children:"int setxattr(const char *path, const char *name, const void *value, size_t size, int flags)"}),"                                                                            |\n| 189 | lsetxattr               | ",(0,s.jsx)(e.code,{children:"int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags)"}),"                                                                           |\n| 190 | fsetxattr               | ",(0,s.jsx)(e.code,{children:"int fsetxattr(int fd, const char *name, const void *value, size_t size, int flags)"}),"                                                                                     |\n| 191 | getxattr                | ",(0,s.jsx)(e.code,{children:"ssize_t getxattr(const char *path, const char *name, void *value, size_t size)"}),"                                                                                         |\n| 192 | lgetxattr               | ",(0,s.jsx)(e.code,{children:"ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)"}),"                                                                                        |\n| 193 | fgetxattr               | ",(0,s.jsx)(e.code,{children:"ssize_t fgetxattr(int fd, const char *name, void *value, size_t size)"}),"                                                                                                  |\n| 194 | listxattr               | ",(0,s.jsx)(e.code,{children:"ssize_t listxattr(const char *path, char *list, size_t size)"}),"                                                                                                           |\n| 195 | llistxattr              | ",(0,s.jsx)(e.code,{children:"ssize_t llistxattr(const char *path, char *list, size_t size)"}),"                                                                                                          |\n| 196 | flistxattr              | ",(0,s.jsx)(e.code,{children:"ssize_t flistxattr(int fd, char *list, size_t size)"}),"                                                                                                                    |\n| 197 | removexattr             | ",(0,s.jsx)(e.code,{children:"int removexattr(const char *path, const char *name)"}),"                                                                                                                    |\n| 198 | lremovexattr            | ",(0,s.jsx)(e.code,{children:"int lremovexattr(const char *path, const char *name)"}),"                                                                                                                   |\n| 199 | fremovexattr            | ",(0,s.jsx)(e.code,{children:"int fremovexattr(int fd, const char *name)"}),"                                                                                                                             |\n| 200 | tkill                   | ",(0,s.jsx)(e.code,{children:"int tkill(int tid, int sig)"}),"                                                                                                                                            |\n| 201 | time                    | ",(0,s.jsx)(e.code,{children:"time_t time(time_t *tloc)"}),"                                                                                                                                              |\n| 202 | futex                   | ",(0,s.jsx)(e.code,{children:"int futex(int *uaddr, int futex_op, int val, const struct timespec *timeout, int *uaddr2, int val3)"}),"                                                                    |\n| 203 | sched_setaffinity       | ",(0,s.jsx)(e.code,{children:"int sched_setaffinity(pid_t pid, size_t cpusetsize, const cpu_set_t *mask)"}),"                                                                                             |\n| 204 | sched_getaffinity       | ",(0,s.jsx)(e.code,{children:"int sched_getaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask)"}),"                                                                                                   |\n| 205 | set_thread_area         | ",(0,s.jsx)(e.code,{children:"int set_thread_area(struct user_desc *u_info)"}),"                                                                                                                          |\n| 206 | io_setup                | ",(0,s.jsx)(e.code,{children:"int io_setup(unsigned nr_events, aio_context_t *ctx_idp)"}),"                                                                                                               |\n| 207 | io_destroy              | ",(0,s.jsx)(e.code,{children:"int io_destroy(aio_context_t ctx_id)"}),"                                                                                                                                   |\n| 208 | io_getevents            | ",(0,s.jsx)(e.code,{children:"int io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event *events, struct timespec *timeout)"}),"                                                        |\n| 209 | io_submit               | ",(0,s.jsx)(e.code,{children:"int io_submit(aio_context_t ctx_id, long nr, struct iocb **iocbpp)"}),"                                                                                                     |\n| 210 | io_cancel               | ",(0,s.jsx)(e.code,{children:"int io_cancel(aio_context_t ctx_id, struct iocb *iocb, struct io_event *result)"}),"                                                                                        |\n| 211 | get_thread_area         | ",(0,s.jsx)(e.code,{children:"int get_thread_area(struct user_desc *u_info)"}),"                                                                                                                          |\n| 212 | lookup_dcookie          | ",(0,s.jsx)(e.code,{children:"int lookup_dcookie(u64 cookie, char *buffer, size_t len)"}),"                                                                                                               |\n| 213 | epoll_create            | ",(0,s.jsx)(e.code,{children:"int epoll_create(int size)"}),"                                                                                                                                             |\n| 214 | epoll_ctl_old           | (obsolete)                                                                                                                                                               |\n| 215 | epoll_wait_old          | (obsolete)                                                                                                                                                               |\n| 216 | remap_file_pages        | ",(0,s.jsx)(e.code,{children:"int remap_file_pages(void *addr, size_t size, int prot, size_t pgoff, int flags)"}),"                                                                                       |\n| 217 | getdents64              | (no direct libc wrapper, use readdir)                                                                                                                                    |\n| 218 | set_tid_address         | ",(0,s.jsx)(e.code,{children:"long set_tid_address(int *tidptr)"}),"                                                                                                                                      |\n| 219 | restart_syscall         | (internal)                                                                                                                                                               |\n| 220 | semtimedop              | ",(0,s.jsx)(e.code,{children:"int semtimedop(int semid, struct sembuf *sops, size_t nsops, const struct timespec *timeout)"}),"                                                                           |\n| 221 | fadvise64               | ",(0,s.jsx)(e.code,{children:"int posix_fadvise(int fd, off_t offset, off_t len, int advice)"}),"                                                                                                         |\n| 222 | timer_create            | ",(0,s.jsx)(e.code,{children:"int timer_create(clockid_t clockid, struct sigevent *sevp, timer_t *timerid)"}),"                                                                                           |\n| 223 | timer_settime           | ",(0,s.jsx)(e.code,{children:"int timer_settime(timer_t timerid, int flags, const struct itimerspec *new_value, struct itimerspec *old_value)"}),"                                                        |\n| 224 | timer_gettime           | ",(0,s.jsx)(e.code,{children:"int timer_gettime(timer_t timerid, struct itimerspec *curr_value)"}),"                                                                                                      |\n| 225 | timer_getoverrun        | ",(0,s.jsx)(e.code,{children:"int timer_getoverrun(timer_t timerid)"}),"                                                                                                                                  |\n| 226 | timer_delete            | ",(0,s.jsx)(e.code,{children:"int timer_delete(timer_t timerid)"}),"                                                                                                                                      |\n| 227 | clock_settime           | ",(0,s.jsx)(e.code,{children:"int clock_settime(clockid_t clockid, const struct timespec *tp)"}),"                                                                                                        |\n| 228 | clock_gettime           | ",(0,s.jsx)(e.code,{children:"int clock_gettime(clockid_t clockid, struct timespec *tp)"}),"                                                                                                              |\n| 229 | clock_getres            | ",(0,s.jsx)(e.code,{children:"int clock_getres(clockid_t clockid, struct timespec *res)"}),"                                                                                                              |\n| 230 | clock_nanosleep         | ",(0,s.jsx)(e.code,{children:"int clock_nanosleep(clockid_t clockid, int flags, const struct timespec *request, struct timespec *remain)"}),"                                                             |\n| 231 | exit_group              | ",(0,s.jsx)(e.code,{children:"void exit_group(int status)"}),"                                                                                                                                            |\n| 232 | epoll_wait              | ",(0,s.jsx)(e.code,{children:"int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)"}),"                                                                                       |\n| 233 | epoll_ctl               | ",(0,s.jsx)(e.code,{children:"int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)"}),"                                                                                                     |\n| 234 | tgkill                  | ",(0,s.jsx)(e.code,{children:"int tgkill(int tgid, int tid, int sig)"}),"                                                                                                                                 |\n| 235 | utimes                  | ",(0,s.jsx)(e.code,{children:"int utimes(const char *filename, const struct timeval times[2])"}),"                                                                                                        |\n| 236 | vserver                 | (not implemented)                                                                                                                                                        |\n| 237 | mbind                   | ",(0,s.jsx)(e.code,{children:"long mbind(void *addr, unsigned long len, int mode, const unsigned long *nodemask, unsigned long maxnode, unsigned flags)"}),"                                              |\n| 238 | set_mempolicy           | ",(0,s.jsx)(e.code,{children:"long set_mempolicy(int mode, const unsigned long *nodemask, unsigned long maxnode)"}),"                                                                                     |\n| 239 | get_mempolicy           | ",(0,s.jsx)(e.code,{children:"long get_mempolicy(int *mode, unsigned long *nodemask, unsigned long maxnode, void *addr, unsigned long flags)"}),"                                                         |\n| 240 | mq_open                 | ",(0,s.jsx)(e.code,{children:"mqd_t mq_open(const char *name, int oflag, mode_t mode, struct mq_attr *attr)"}),"                                                                                          |\n| 241 | mq_unlink               | ",(0,s.jsx)(e.code,{children:"int mq_unlink(const char *name)"}),"                                                                                                                                        |\n| 242 | mq_timedsend            | ",(0,s.jsx)(e.code,{children:"int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec *abs_timeout)"}),"                                          |\n| 243 | mq_timedreceive         | ",(0,s.jsx)(e.code,{children:"ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio, const struct timespec *abs_timeout)"}),"                                        |\n| 244 | mq_notify               | ",(0,s.jsx)(e.code,{children:"int mq_notify(mqd_t mqdes, const struct sigevent *sevp)"}),"                                                                                                                |\n| 245 | mq_getsetattr           | ",(0,s.jsx)(e.code,{children:"int mq_getattr(mqd_t mqdes, struct mq_attr *attr)"}),", ",(0,s.jsx)(e.code,{children:"int mq_setattr(mqd_t mqdes, const struct mq_attr *newattr, struct mq_attr *oldattr)"}),"                               |\n| 246 | kexec_load              | ",(0,s.jsx)(e.code,{children:"long kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment *segments, unsigned long flags)"}),"                                                   |\n| 247 | waitid                  | ",(0,s.jsx)(e.code,{children:"int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options)"}),"                                                                                                    |\n| 248 | add_key                 | ",(0,s.jsx)(e.code,{children:"key_serial_t add_key(const char *type, const char *description, const void *payload, size_t plen, key_serial_t keyring)"}),"                                                |\n| 249 | request_key             | ",(0,s.jsx)(e.code,{children:"key_serial_t request_key(const char *type, const char *description, const char *callout_info, key_serial_t dest_keyring)"}),"                                               |\n| 250 | keyctl                  | ",(0,s.jsx)(e.code,{children:"long keyctl(int operation, ...)"}),"                                                                                                                                        |\n| 251 | ioprio_set              | ",(0,s.jsx)(e.code,{children:"int ioprio_set(int which, int who, int ioprio)"}),"                                                                                                                         |\n| 252 | ioprio_get              | ",(0,s.jsx)(e.code,{children:"int ioprio_get(int which, int who)"}),"                                                                                                                                     |\n| 253 | inotify_init            | ",(0,s.jsx)(e.code,{children:"int inotify_init(void)"}),"                                                                                                                                                 |\n| 254 | inotify_add_watch       | ",(0,s.jsx)(e.code,{children:"int inotify_add_watch(int fd, const char *pathname, uint32_t mask)"}),"                                                                                                     |\n| 255 | inotify_rm_watch        | ",(0,s.jsx)(e.code,{children:"int inotify_rm_watch(int fd, int wd)"}),"                                                                                                                                   |\n| 256 | migrate_pages           | ",(0,s.jsx)(e.code,{children:"long migrate_pages(int pid, unsigned long maxnode, const unsigned long *old_nodes, const unsigned long *new_nodes)"}),"                                                     |\n| 257 | openat                  | ",(0,s.jsx)(e.code,{children:"int openat(int dirfd, const char *pathname, int flags, mode_t mode)"}),"                                                                                                    |\n| 258 | mkdirat                 | ",(0,s.jsx)(e.code,{children:"int mkdirat(int dirfd, const char *pathname, mode_t mode)"}),"                                                                                                              |\n| 259 | mknodat                 | ",(0,s.jsx)(e.code,{children:"int mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev)"}),"                                                                                                   |\n| 260 | fchownat                | ",(0,s.jsx)(e.code,{children:"int fchownat(int dirfd, const char *pathname, uid_t owner, gid_t group, int flags)"}),"                                                                                     |\n| 261 | futimesat               | ",(0,s.jsx)(e.code,{children:"int futimesat(int dirfd, const char *pathname, const struct timeval times[2])"}),"                                                                                          |\n| 262 | newfstatat              | ",(0,s.jsx)(e.code,{children:"int fstatat(int dirfd, const char *pathname, struct stat *statbuf, int flags)"}),"                                                                                          |\n| 263 | unlinkat                | ",(0,s.jsx)(e.code,{children:"int unlinkat(int dirfd, const char *pathname, int flags)"}),"                                                                                                               |\n| 264 | renameat                | ",(0,s.jsx)(e.code,{children:"int renameat(int oldfd, const char *old, int newfd, const char *new)"}),"                                                                                                   |\n| 265 | linkat                  | ",(0,s.jsx)(e.code,{children:"int linkat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath, int flags)"}),"                                                                            |\n| 266 | symlinkat               | ",(0,s.jsx)(e.code,{children:"int symlinkat(const char *target, int newdirfd, const char *linkpath)"}),"                                                                                                  |\n| 267 | readlinkat              | ",(0,s.jsx)(e.code,{children:"ssize_t readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz)"}),"                                                                                          |\n| 268 | fchmodat                | ",(0,s.jsx)(e.code,{children:"int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags)"}),"                                                                                                  |\n| 269 | faccessat               | ",(0,s.jsx)(e.code,{children:"int faccessat(int dirfd, const char *pathname, int mode, int flags)"}),"                                                                                                    |\n| 270 | pselect6                | ",(0,s.jsx)(e.code,{children:"int pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout, const sigset_t *sigmask)"}),"                                   |\n| 271 | ppoll                   | ",(0,s.jsx)(e.code,{children:"int ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *tmo_p, const sigset_t *sigmask)"}),"                                                                      |\n| 272 | unshare                 | ",(0,s.jsx)(e.code,{children:"int unshare(int flags)"}),"                                                                                                                                                 |\n| 273 | set_robust_list         | ",(0,s.jsx)(e.code,{children:"long set_robust_list(struct robust_list_head *head, size_t len)"}),"                                                                                                        |\n| 274 | get_robust_list         | ",(0,s.jsx)(e.code,{children:"long get_robust_list(int pid, struct robust_list_head **head_ptr, size_t *len_ptr)"}),"                                                                                     |\n| 275 | splice                  | ",(0,s.jsx)(e.code,{children:"ssize_t splice(int fd_in, loff_t *off_in, int fd_out, loff_t *off_out, size_t len, unsigned int flags)"}),"                                                                 |\n| 276 | tee                     | ",(0,s.jsx)(e.code,{children:"ssize_t tee(int fd_in, int fd_out, size_t len, unsigned int flags)"}),"                                                                                                     |\n| 277 | sync_file_range         | ",(0,s.jsx)(e.code,{children:"int sync_file_range(int fd, off64_t offset, off64_t nbytes, unsigned int flags)"}),"                                                                                        |\n| 278 | vmsplice                | ",(0,s.jsx)(e.code,{children:"ssize_t vmsplice(int fd, const struct iovec *iov, unsigned long nr_segs, unsigned int flags)"}),"                                                                           |\n| 279 | move_pages              | ",(0,s.jsx)(e.code,{children:"long move_pages(int pid, unsigned long count, void **pages, const int *nodes, int *status, int flags)"}),"                                                                  |\n| 280 | utimensat               | ",(0,s.jsx)(e.code,{children:"int utimensat(int dirfd, const char *pathname, const struct timespec times[2], int flags)"}),"                                                                              |\n| 281 | epoll_pwait             | ",(0,s.jsx)(e.code,{children:"int epoll_pwait(int epfd, struct epoll_event *events, int maxevents, int timeout, const sigset_t *sigmask)"}),"                                                             |\n| 282 | signalfd                | ",(0,s.jsx)(e.code,{children:"int signalfd(int fd, const sigset_t *mask, int flags)"}),"                                                                                                                  |\n| 283 | timerfd_create          | ",(0,s.jsx)(e.code,{children:"int timerfd_create(int clockid, int flags)"}),"                                                                                                                             |\n| 284 | eventfd                 | ",(0,s.jsx)(e.code,{children:"int eventfd(unsigned int initval, int flags)"}),"                                                                                                                           |\n| 285 | fallocate               | ",(0,s.jsx)(e.code,{children:"int fallocate(int fd, int mode, off_t offset, off_t len)"}),"                                                                                                               |\n| 286 | timerfd_settime         | ",(0,s.jsx)(e.code,{children:"int timerfd_settime(int fd, int flags, const struct itimerspec *new_value, struct itimerspec *old_value)"}),"                                                               |\n| 287 | timerfd_gettime         | ",(0,s.jsx)(e.code,{children:"int timerfd_gettime(int fd, struct itimerspec *curr_value)"}),"                                                                                                             |\n| 288 | accept4                 | ",(0,s.jsx)(e.code,{children:"int accept4(int sockfd, struct sockaddr *addr, socklen_t *addrlen, int flags)"}),"                                                                                          |\n| 289 | signalfd4               | ",(0,s.jsx)(e.code,{children:"int signalfd4(int fd, const sigset_t *mask, size_t sizemask, int flags)"}),"                                                                                                |\n| 290 | eventfd2                | ",(0,s.jsx)(e.code,{children:"int eventfd2(unsigned int initval, int flags)"}),"                                                                                                                          |\n| 291 | epoll_create1           | ",(0,s.jsx)(e.code,{children:"int epoll_create1(int flags)"}),"                                                                                                                                           |\n| 292 | dup3                    | ",(0,s.jsx)(e.code,{children:"int dup3(int oldfd, int newfd, int flags)"}),"                                                                                                                              |\n| 293 | pipe2                   | ",(0,s.jsx)(e.code,{children:"int pipe2(int pipefd[2], int flags)"}),"                                                                                                                                    |\n| 294 | inotify_init1           | ",(0,s.jsx)(e.code,{children:"int inotify_init1(int flags)"}),"                                                                                                                                           |\n| 295 | preadv                  | ",(0,s.jsx)(e.code,{children:"ssize_t preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset)"}),"                                                                                              |\n| 296 | pwritev                 | ",(0,s.jsx)(e.code,{children:"ssize_t pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset)"}),"                                                                                             |\n| 297 | rt_tgsigqueueinfo       | ",(0,s.jsx)(e.code,{children:"int rt_tgsigqueueinfo(pid_t tgid, pid_t tid, int sig, siginfo_t *info)"}),"                                                                                                 |\n| 298 | perf_event_open         | ",(0,s.jsx)(e.code,{children:"int perf_event_open(struct perf_event_attr *attr, pid_t pid, int cpu, int group_fd, unsigned long flags)"}),"                                                               |\n| 299 | recvmmsg                | ",(0,s.jsx)(e.code,{children:"int recvmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int vlen, int flags, struct timespec *timeout)"}),"                                                               |\n| 300 | fanotify_init           | ",(0,s.jsx)(e.code,{children:"int fanotify_init(unsigned int flags, unsigned int event_f_flags)"}),"                                                                                                      |\n| 301 | fanotify_mark           | ",(0,s.jsx)(e.code,{children:"int fanotify_mark(int fanotify_fd, unsigned int flags, uint64_t mask, int dirfd, const char *pathname)"}),"                                                                 |\n| 302 | prlimit64               | ",(0,s.jsx)(e.code,{children:"int prlimit(pid_t pid, int resource, const struct rlimit64 *new_limit, struct rlimit64 *old_limit)"}),"                                                                     |\n| 303 | name_to_handle_at       | ",(0,s.jsx)(e.code,{children:"int name_to_handle_at(int dirfd, const char *pathname, struct file_handle *handle, int *mount_id, int flags)"}),"                                                           |\n| 304 | open_by_handle_at       | ",(0,s.jsx)(e.code,{children:"int open_by_handle_at(int mount_fd, struct file_handle *handle, int flags)"}),"                                                                                             |\n| 305 | clock_adjtime           | ",(0,s.jsx)(e.code,{children:"int clock_adjtime(clockid_t clk_id, struct timex *buf)"}),"                                                                                                                 |\n| 306 | syncfs                  | ",(0,s.jsx)(e.code,{children:"int syncfs(int fd)"}),"                                                                                                                                                     |\n| 307 | sendmmsg                | ",(0,s.jsx)(e.code,{children:"int sendmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int vlen, int flags)"}),"                                                                                         |\n| 308 | setns                   | ",(0,s.jsx)(e.code,{children:"int setns(int fd, int nstype)"}),"                                                                                                                                          |\n| 309 | getcpu                  | ",(0,s.jsx)(e.code,{children:"int getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)"}),"                                                                                                 |\n| 310 | process_vm_readv        | ",(0,s.jsx)(e.code,{children:"ssize_t process_vm_readv(pid_t pid, const struct iovec *local_iov, unsigned long liovcnt, const struct iovec *remote_iov, unsigned long riovcnt, unsigned long flags)"}),"  |\n| 311 | process_vm_writev       | ",(0,s.jsx)(e.code,{children:"ssize_t process_vm_writev(pid_t pid, const struct iovec *local_iov, unsigned long liovcnt, const struct iovec *remote_iov, unsigned long riovcnt, unsigned long flags)"})," |\n| 312 | kcmp                    | ",(0,s.jsx)(e.code,{children:"int kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2)"}),"                                                                                     |     |\n| 313 | finit_module            | ",(0,s.jsx)(e.code,{children:"int finit_module(int fd, const char *param_values, int flags)"}),"                                                                                                          |\n| 314 | sched_setattr           | ",(0,s.jsx)(e.code,{children:"int sched_setattr(pid_t pid, struct sched_attr *attr, unsigned int flags)"}),"                                                                                              |\n| 315 | sched_getattr           | ",(0,s.jsx)(e.code,{children:"int sched_getattr(pid_t pid, struct sched_attr *attr, unsigned int size, unsigned int flags)"}),"                                                                           |\n| 316 | renameat2               | ",(0,s.jsx)(e.code,{children:"int renameat2(int oldfd, const char *old, int newfd, const char *new, unsigned flags)"}),"                                                                                  |\n| 317 | seccomp                 | ",(0,s.jsx)(e.code,{children:"int seccomp(unsigned int operation, unsigned int flags, void *args)"}),"                                                                                                    |     |\n| 318 | getrandom               | ",(0,s.jsx)(e.code,{children:"ssize_t getrandom(void *buf, size_t buflen, unsigned int flags)"}),"                                                                                                        |\n| 319 | memfd_create            | ",(0,s.jsx)(e.code,{children:"int memfd_create(const char *name, unsigned int flags)"}),"                                                                                                                 |\n| 320 | kexec_file_load         | ",(0,s.jsx)(e.code,{children:"long kexec_file_load(int kernel_fd, int initrd_fd, unsigned long cmdline_len, const char *cmdline, unsigned long flags)"}),"                                                |\n| 321 | bpf                     | ",(0,s.jsx)(e.code,{children:"int bpf(int cmd, union bpf_attr *attr, unsigned int size)"}),"                                                                                                              |\n| 322 | execveat                | ",(0,s.jsx)(e.code,{children:"int execveat(int dirfd, const char *pathname, char *const argv[], char *const envp[], int flags)"}),"                                                                       |\n| 323 | userfaultfd             | ",(0,s.jsx)(e.code,{children:"int userfaultfd(int flags)"}),"                                                                                                                                             |\n| 324 | membarrier              | ",(0,s.jsx)(e.code,{children:"int membarrier(int cmd, unsigned int flags, int cpu_id)"}),"                                                                                                                |\n| 325 | mlock2                  | ",(0,s.jsx)(e.code,{children:"int mlock2(const void *addr, size_t len, unsigned int flags)"}),"                                                                                                           |\n| 326 | copy_file_range         | ",(0,s.jsx)(e.code,{children:"ssize_t copy_file_range(int fd_in, loff_t *off_in, int fd_out, loff_t *off_out, size_t len, unsigned int flags)"}),"                                                        |\n| 327 | preadv2                 | ",(0,s.jsx)(e.code,{children:"ssize_t preadv2(int fd, const struct iovec *iov, int iovcnt, off_t offset, int flags)"}),"                                                                                  |\n| 328 | pwritev2                | ",(0,s.jsx)(e.code,{children:"ssize_t pwritev2(int fd, const struct iovec *iov, int iovcnt, off_t offset, int flags)"}),"                                                                                 |\n| 329 | pkey_mprotect           | ",(0,s.jsx)(e.code,{children:"int pkey_mprotect(void *addr, size_t len, int prot, int pkey)"}),"                                                                                                          |\n| 330 | pkey_alloc              | ",(0,s.jsx)(e.code,{children:"int pkey_alloc(unsigned int flags, unsigned int access_rights)"}),"                                                                                                         |\n| 331 | pkey_free               | ",(0,s.jsx)(e.code,{children:"int pkey_free(int pkey)"}),"                                                                                                                                                |\n| 332 | statx                   | ",(0,s.jsx)(e.code,{children:"int statx(int dirfd, const char *pathname, int flags, unsigned int mask, struct statx *statxbuf)"}),"                                                                       |\n| 333 | io_pgetevents           | ",(0,s.jsx)(e.code,{children:"int io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event *events, struct timespec *timeout, const sigset_t *sigmask)"}),"                              |\n| 334 | rseq                    | ",(0,s.jsx)(e.code,{children:"int rseq(struct rseq *rseq, uint32_t rseq_len, int flags, uint32_t sig)"}),"                                                                                                |\n| 424 | pidfd_send_signal       | ",(0,s.jsx)(e.code,{children:"int pidfd_send_signal(int pidfd, int sig, siginfo_t *info, unsigned int flags)"}),"                                                                                         |\n| 425 | io_uring_setup          | ",(0,s.jsx)(e.code,{children:"int io_uring_setup(u32 entries, struct io_uring_params *params)"}),"                                                                                                        |\n| 426 | io_uring_enter          | ",(0,s.jsx)(e.code,{children:"int io_uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const sigset_t *sig, size_t sigsz)"}),"                                                     |\n| 427 | io_uring_register       | ",(0,s.jsx)(e.code,{children:"int io_uring_register(unsigned int fd, unsigned int opcode, void *arg, unsigned int nr_args)"}),"                                                                           |\n| 428 | open_tree               | ",(0,s.jsx)(e.code,{children:"int open_tree(int dirfd, const char *pathname, unsigned int flags)"}),"                                                                                                     |\n| 429 | move_mount              | ",(0,s.jsx)(e.code,{children:"int move_mount(int from_dfd, const char *from_pathname, int to_dfd, const char *to_pathname, unsigned int flags)"}),"                                                       |\n| 430 | fsopen                  | ",(0,s.jsx)(e.code,{children:"int fsopen(const char *fsname, unsigned int flags)"}),"                                                                                                                     |\n| 431 | fsconfig                | ",(0,s.jsx)(e.code,{children:"int fsconfig(int fd, unsigned int cmd, const char *key, const void *value, int aux)"}),"                                                                                    |\n| 432 | fsmount                 | ",(0,s.jsx)(e.code,{children:"int fsmount(int fd, unsigned int flags, unsigned int attr_flags)"}),"                                                                                                       |\n| 433 | fspick                  | ",(0,s.jsx)(e.code,{children:"int fspick(int dirfd, const char *pathname, unsigned int flags)"}),"                                                                                                        |\n| 434 | pidfd_open              | ",(0,s.jsx)(e.code,{children:"int pidfd_open(pid_t pid, unsigned int flags)"}),"                                                                                                                          |\n| 435 | clone3                  | ",(0,s.jsx)(e.code,{children:"long clone3(struct clone_args *cl_args, size_t size)"}),"                                                                                                                   |\n| 436 | close_range             | ",(0,s.jsx)(e.code,{children:"int close_range(unsigned int fd, unsigned int max_fd, unsigned int flags)"}),"                                                                                              |\n| 437 | openat2                 | ",(0,s.jsx)(e.code,{children:"long openat2(int dirfd, const char *pathname, struct open_how *how, size_t size)"}),"                                                                                       |\n| 438 | pidfd_getfd             | ",(0,s.jsx)(e.code,{children:"int pidfd_getfd(int pidfd, int fd, unsigned int flags)"}),"                                                                                                                 |\n| 439 | faccessat2              | ",(0,s.jsx)(e.code,{children:"int faccessat2(int dirfd, const char *pathname, int mode, int flags)"}),"                                                                                                   |\n| 440 | process_madvise         | ",(0,s.jsx)(e.code,{children:"ssize_t process_madvise(int pidfd, const struct iovec *iovec, size_t vlen, int advice, unsigned int flags)"}),"                                                             |\n| 441 | epoll_pwait2            | ",(0,s.jsx)(e.code,{children:"int epoll_pwait2(int epfd, struct epoll_event *events, int maxevents, const struct timespec *timeout, const sigset_t *sigmask)"}),"                                         |\n| 442 | mount_setattr           | ",(0,s.jsx)(e.code,{children:"int mount_setattr(int dirfd, const char *pathname, unsigned int flags, struct mount_attr *attr, size_t size)"}),"                                                           |\n| 443 | quotactl_fd             | ",(0,s.jsx)(e.code,{children:"int quotactl_fd(unsigned int fd, unsigned int cmd, int id, void *addr)"}),"                                                                                                 |\n| 444 | landlock_create_ruleset | ",(0,s.jsx)(e.code,{children:"int landlock_create_ruleset(const struct landlock_ruleset_attr *attr, size_t size, __u32 flags)"}),"                                                                        |\n| 445 | landlock_add_rule       | ",(0,s.jsx)(e.code,{children:"int landlock_add_rule(int ruleset_fd, enum landlock_rule_type rule_type, const void *rule_attr, __u32 flags)"}),"                                                           |\n| 446 | landlock_restrict_self  | ",(0,s.jsx)(e.code,{children:"int landlock_restrict_self(int ruleset_fd, __u32 flags)"}),"                                                                                                                |\n| 447 | memfd_secret            | ",(0,s.jsx)(e.code,{children:"int memfd_secret(unsigned int flags)"}),"                                                                                                                                   |\n| 448 | process_mrelease        | ",(0,s.jsx)(e.code,{children:"int process_mrelease(int pidfd, unsigned int flags)"}),"                                                                                                                    |\n| 449 | futex_waitv             | ",(0,s.jsx)(e.code,{children:"int futex_waitv(struct futex_waitv *waiters, unsigned int nr_futexes, unsigned int flags, struct timespec *timeout, clockid_t clockid)"}),"                                 |\n| 450 | set_mempolicy_home_node | ",(0,s.jsx)(e.code,{children:"long set_mempolicy_home_node(unsigned long start, unsigned long len, unsigned long home_node, unsigned long flags)"}),"                                                     |\n| 451 | cachestat               | ",(0,s.jsx)(e.code,{children:"int cachestat(unsigned int fd, struct cachestat_range *cstat_range, struct cachestat *cstat, unsigned int flags)"}),"                                                       |\n| 452 | fchmodat2               | ",(0,s.jsx)(e.code,{children:"int fchmodat2(int dirfd, const char *pathname, mode_t mode, int flags)"}),"                                                                                                 |\n| 453 | map_shadow_stack        | ",(0,s.jsx)(e.code,{children:"void *map_shadow_stack(void *addr, size_t size, unsigned int flags)"}),"                                                                                                    |\n| 454 | futex_wake              | ",(0,s.jsx)(e.code,{children:"int futex_wake(void *uaddr, unsigned int nr_wake, unsigned int flags)"}),"                                                                                                  |\n| 455 | futex_wait              | ",(0,s.jsx)(e.code,{children:"int futex_wait(void *uaddr, unsigned int val, unsigned int flags, struct timespec *timeout, clockid_t clockid)"}),"                                                         |\n| 456 | futex_requeue           | ",(0,s.jsx)(e.code,{children:"int futex_requeue(void *uaddr, void *uaddr2, unsigned int nr_wake, unsigned int nr_requeue, unsigned int cmpval, unsigned int flags)"}),"                                   |\n| 457 | statmount               | ",(0,s.jsx)(e.code,{children:"int statmount(const struct mnt_id_req *req, struct statmount *buf, size_t bufsize, unsigned int flags)"}),"                                                                 |\n| 458 | listmount               | ",(0,s.jsx)(e.code,{children:"int listmount(const struct mnt_id_req *req, u64 *mnt_ids, size_t nr_mnt_ids, unsigned int flags)"}),"                                                                       |\n| 459 | lsm_get_self_attr       | ",(0,s.jsx)(e.code,{children:"int lsm_get_self_attr(unsigned int attr, struct lsm_ctx *ctx, size_t *size, unsigned int flags)"}),"                                                                        |\n| 460 | lsm_set_self_attr       | ",(0,s.jsx)(e.code,{children:"int lsm_set_self_attr(unsigned int attr, struct lsm_ctx *ctx, size_t size, unsigned int flags)"}),"                                                                         |\n| 461 | lsm_list_modules        | ",(0,s.jsx)(e.code,{children:"int lsm_list_modules(u64 *ids, size_t *cnt, unsigned int flags)"}),"                                                                                                        |\n| 462 | mseal                   | ",(0,s.jsx)(e.code,{children:"int mseal(void *addr, size_t len, unsigned long flags)"}),"                                                                                                                 |"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"101-150: \u8FDB\u7A0B\u7BA1\u7406\u3001\u4FE1\u53F7\u5904\u7406\u3001\u8C03\u5EA6\u5668"}),"\n",(0,s.jsx)(e.li,{children:"ptrace, getuid/setuid, \u5404\u79CD\u8FDB\u7A0B\u7EC4\u548C\u6743\u9650\u7BA1\u7406\u51FD\u6570"}),"\n",(0,s.jsx)(e.li,{children:"\u4FE1\u53F7\u5904\u7406\u51FD\u6570 (sigpending, sigtimedwait, sigsuspend)"}),"\n",(0,s.jsx)(e.li,{children:"\u8C03\u5EA6\u5668\u51FD\u6570 (sched_setparam, sched_getscheduler)"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u5B58\u9501\u5B9A (mlock, munlock, mlockall)"}),"\n",(0,s.jsx)(e.li,{children:"151-200: \u7CFB\u7EDF\u7BA1\u7406\u3001\u6587\u4EF6\u7CFB\u7EDF\u3001\u6269\u5C55\u5C5E\u6027"}),"\n",(0,s.jsx)(e.li,{children:"\u7CFB\u7EDF\u7BA1\u7406 (pivot_root, prctl, mount, umount2, reboot)"}),"\n",(0,s.jsx)(e.li,{children:"\u6A21\u5757\u7BA1\u7406 (init_module, delete_module)"}),"\n",(0,s.jsx)(e.li,{children:"\u6269\u5C55\u5C5E\u6027 (setxattr, getxattr, listxattr, removexattr)"}),"\n",(0,s.jsx)(e.li,{children:"\u5185\u6838\u65E5\u5FD7 (syslog)"}),"\n",(0,s.jsx)(e.li,{children:"201-250: \u5B9A\u65F6\u5668\u3001epoll\u3001\u6D88\u606F\u961F\u5217"}),"\n",(0,s.jsx)(e.li,{children:"POSIX \u5B9A\u65F6\u5668 (timer_create, timer_settime, clock_gettime)"}),"\n",(0,s.jsx)(e.li,{children:"epoll \u4E8B\u4EF6\u673A\u5236 (epoll_create, epoll_ctl, epoll_wait)"}),"\n",(0,s.jsx)(e.li,{children:"\u5F02\u6B65 I/O (io_setup, io_submit, io_getevents)"}),"\n",(0,s.jsx)(e.li,{children:"POSIX \u6D88\u606F\u961F\u5217 (mq_open, mq_send, mq_receive)"}),"\n",(0,s.jsx)(e.li,{children:"251-300: \u73B0\u4EE3 Linux \u7279\u6027"}),"\n",(0,s.jsx)(e.li,{children:"inotify \u6587\u4EF6\u76D1\u63A7 (inotify_init, inotify_add_watch)"}),"\n",(0,s.jsx)(e.li,{children:"\u65B0\u7684\u6587\u4EF6\u64CD\u4F5C (openat, mkdirat, fchownat, unlinkat)"}),"\n",(0,s.jsx)(e.li,{children:"\u9AD8\u7EA7 I/O (splice, tee, vmsplice, fallocate)"}),"\n",(0,s.jsx)(e.li,{children:"\u4E8B\u4EF6\u901A\u77E5 (eventfd, timerfd, signalfd)"}),"\n",(0,s.jsx)(e.li,{children:"301-450: \u6700\u65B0\u7CFB\u7EDF\u8C03\u7528"}),"\n",(0,s.jsx)(e.li,{children:"\u547D\u540D\u7A7A\u95F4 (setns, unshare)"}),"\n",(0,s.jsx)(e.li,{children:"cgroups \u548C\u5BB9\u5668\u6280\u672F (clone3)"}),"\n",(0,s.jsx)(e.li,{children:"\u73B0\u4EE3\u6587\u4EF6\u7CFB\u7EDF (syncfs, copy_file_range, statx)"}),"\n",(0,s.jsx)(e.li,{children:"io_uring \u5F02\u6B65 I/O (io_uring_setup, io_uring_enter)"}),"\n",(0,s.jsxs)(e.li,{children:["\u5B89\u5168\u7279\u6027 (",(0,s.jsx)(e.code,{children:"landlock_*"}),", seccomp, memfd_secret)"]}),"\n",(0,s.jsx)(e.li,{children:"\u8FDB\u7A0B\u6587\u4EF6\u63CF\u8FF0\u7B26 (pidfd_open, pidfd_getfd)"}),"\n",(0,s.jsx)(e.li,{children:"451-462 - \u6700\u65B0\u7CFB\u7EDF\u8C03\u7528:"}),"\n",(0,s.jsx)(e.li,{children:"cachestat: \u83B7\u53D6\u6587\u4EF6\u7F13\u5B58\u7EDF\u8BA1\u4FE1\u606F"}),"\n",(0,s.jsx)(e.li,{children:"fchmodat2: fchmodat \u7684\u589E\u5F3A\u7248\u672C\uFF0C\u652F\u6301\u66F4\u591A\u6807\u5FD7\u4F4D"}),"\n",(0,s.jsx)(e.li,{children:"map_shadow_stack: Intel CET \u5F71\u5B50\u6808\u652F\u6301"}),"\n",(0,s.jsx)(e.li,{children:"futex_wake/wait/requeue: \u65B0\u7684 futex API\uFF0C\u66FF\u4EE3\u65E7\u7684 futex \u7CFB\u7EDF\u8C03\u7528"}),"\n",(0,s.jsx)(e.li,{children:"statmount/listmount: \u65B0\u7684\u6302\u8F7D\u70B9\u67E5\u8BE2 API"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"lsm_*"}),": Linux \u5B89\u5168\u6A21\u5757 (LSM) \u5C5E\u6027\u7BA1\u7406"]}),"\n",(0,s.jsx)(e.li,{children:"mseal: \u5185\u5B58\u5BC6\u5C01\uFF0C\u9632\u6B62\u5185\u5B58\u533A\u57DF\u88AB\u4FEE\u6539"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:"int rename(const char *old, const char *new);\nsyscall(SYS_rename, old, new);\nsyscall(SYS_renameat, AT_FDCWD, old, AT_FDCWD, new);\nsyscall(SYS_renameat2, AT_FDCWD, old, AT_FDCWD, new, 0);\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"kcm -> Kernel Samepage Merging"}),"\n",(0,s.jsx)(e.li,{children:"seccmp -> Secure Computing Mode"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://man7.org/linux/man-pages/man2/seccomp.2.html",children:"seccomp.2"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u4E00\u79CD\u6C99\u7BB1\u673A\u5236"}),"\n",(0,s.jsxs)(e.li,{children:["SECCOMP_MODE_FILTER\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u901A\u8FC7\u56DE\u8C03\u51FD\u6570\u8FC7\u6EE4 syscall"}),"\n",(0,s.jsxs)(e.li,{children:["\u8FC7\u6EE4\u5668\u9002\u7528 ",(0,s.jsx)(e.code,{children:"BPF"})," \u8BED\u8A00"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://github.com/google/gvisor",children:"google/gvisor"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u62E6\u622A syscall \u5B9E\u73B0\u5BB9\u5668\u9694\u79BB"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/linux-audit/audit-userspace/blob/master/lib/x86_64_table.h",children:"https://github.com/linux-audit/audit-userspace/blob/master/lib/x86_64_table.h"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/kraj/musl/blob/master/src/internal/syscall.h",children:"https://github.com/kraj/musl/blob/master/src/internal/syscall.h"})}),"\n"]}),"\n",(0,s.jsx)(e.h1,{id:"faq",children:"FAQ"}),"\n",(0,s.jsx)(e.h2,{id:"bpf-vs-ebpf",children:"BPF vs eBPF"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["BPF - Berkeley Packet Filter\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1992\u5E74\u7531Steven McCanne\u548CVan Jacobson\u5728BSD\u4E0A\u5B9E\u73B0"}),"\n",(0,s.jsx)(e.li,{children:"\u7528\u4E8E\u8FC7\u6EE4\u7F51\u7EDC\u6570\u636E\u5305"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["eBPF - extended Berkeley Packet Filter\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"2014\u5E74\u7531Alexei Starovoitov\u5728Linux\u5185\u6838\u4E2D\u5B9E\u73B0"}),"\n",(0,s.jsx)(e.li,{children:"\u7528\u4E8E\u8FC7\u6EE4\u7CFB\u7EDF\u8C03\u7528"}),"\n",(0,s.jsx)(e.li,{children:"\u63D0\u5347\u5185\u6838\u76D1\u63A7\u548C\u5206\u6790\u80FD\u529B"}),"\n"]}),"\n"]}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(a,{...n})}):a(n)}},17776:function(n,e,t){t.d(e,{R:()=>c,x:()=>o});var i=t(7378);let s={},d=i.createContext(s);function c(n){let e=i.useContext(d);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),i.createElement(d.Provider,{value:e},n.children)}}}]);