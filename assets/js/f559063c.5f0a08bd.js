"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["71963"],{85815:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>a,toc:()=>g,default:()=>c,metadata:()=>o,assets:()=>l,contentTitle:()=>r});var o=JSON.parse('{"id":"voip/asterisk/asterisk-log","title":"Asterisk Log","description":"logger.conf","source":"@site/../notes/voip/asterisk/asterisk-log.md","sourceDirName":"voip/asterisk","slug":"/voip/asterisk/log","permalink":"/notes/voip/asterisk/log","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/voip/asterisk/asterisk-log.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1634220239000,"frontMatter":{"title":"Asterisk Log"},"sidebar":"docs","previous":{"title":"Asterisk LDAP","permalink":"/notes/voip/asterisk/ldap"},"next":{"title":"Asterisk Modules","permalink":"/notes/voip/asterisk/moduels"}}'),s=t(86106),i=t(17776);let a={title:"Asterisk Log"},r="Asterisk Log",l={},g=[{value:"logger.conf",id:"loggerconf",level:2}];function d(e){let n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"asterisk-log",children:"Asterisk Log"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"logger reload\n"})}),"\n",(0,s.jsx)(n.h2,{id:"loggerconf",children:"logger.conf"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-conf",children:"[general]\n; \u81EA\u5B9A\u4E49\u65E5\u671F\u683C\u5F0F\n; strftime \u683C\u5F0F\n;dateformat=%F %T       ; ISO 8601 date format yyyy-mm-dd HH:MM:SS\n;dateformat=%F %T.%3q   ; with milliseconds\n\n; \u8BB0\u5F55 callids\nuse_callids = yes\n; \u8BB0\u5F55 hostname\n;appendhostname = yes\n\n; log queue events to a file\nqueue_log = yes\n; queue_log always goes to a file, even when a realtime backend is present (defaults to no).\nqueue_log_to_file = no\n; queue_log filename\nqueue_log_name = queue_log\n; queue log \u4F7F\u7528 realtime \u65F6 \u65F6\u95F4\u6233\u8BB0\u5F55\u4E3A GMT \u800C\u4E0D\u662F localtime\nqueue_log_realtime_use_gmt = no\n\n; \u65E5\u5FD7\u6EDA\u52A8\u7B56\u7565\n; none:         \u4E0D\u5904\u7406\uFF0C\u7531\u5916\u90E8\u5F15\u7528\u5904\u7406.\n; sequential:  Rename archived logs in order, such that the newest\n;              has the highest sequence number [default].  When\n;              exec_after_rotate is set, ${filename} will specify\n;              the new archived logfile.\n; rotate:  Rotate all the old files, such that the oldest has the\n;          highest sequence number [this is the expected behavior\n;          for Unix administrators].  When exec_after_rotate is\n;          set, ${filename} will specify the original root filename.\n; timestamp:  Rename the logfiles using a timestamp instead of a\n;             sequence number when \"logger rotate\" is executed.\n;             When exec_after_rotate is set, ${filename} will\n;             specify the new archived logfile.\n;rotatestrategy = rotate\n\n; \u65E5\u5FD7\u6EDA\u52A8\u540E\u6267\u884C\u547D\u4EE4\n; \u4EE5\u4E0B\u547D\u4EE4\u4FDD\u6301\u6700\u8FD1\u4E24\u4E2A\u4E0D\u538B\u7F29\uFF0C\u4E4B\u524D\u7684\u538B\u7F29\n; exec_after_rotate=gzip -9 ${filename}.2\n;\n;\n; For each file, specify what to log.\n;\n; For console logging, you set options at start of\n; Asterisk with -v for verbose and -d for debug\n; See 'asterisk -h' for more information.\n;\n; Directory for log files is configures in asterisk.conf\n; option astlogdir\n;\n; All log messages go to a queue serviced by a single thread\n; which does all the IO.  This setting controls how big that\n; queue can get (and therefore how much memory is allocated)\n; before new messages are discarded.\n; The default is 1000\n;logger_queue_limit = 250\n;\n;\n[logfiles]\n;\n; Format is:\n;\n; logger_name => [formatter]levels\n;\n; The name of the logger dictates not only the name of the logging\n; channel, but also its type. Valid types are:\n;   - 'console'  - The root console of Asterisk\n;   - 'syslog'   - Linux syslog, with facilities specified afterwards with\n;                  a period delimiter, e.g., 'syslog.local0'\n;   - 'filename' - The name of the log file to create. This is the default\n;                  for log channels.\n;\n; Filenames can either be relative to the standard Asterisk log directory\n; (see 'astlogdir' in asterisk.conf), or absolute paths that begin with\n; '/'.\n;\n; An optional formatter can be specified prior to the log levels sent\n; to the log channel. The formatter is defined immediately preceeding the\n; levels, and is enclosed in square brackets. Valid formatters are:\n;   - [default] - The default formatter, this outputs log messages using a\n;                 human readable format.\n;   - [plain]   - The plain formatter, this outputs log messages using a\n;                 human readable format with the addition of function name\n;                 and line number. No color escape codes are ever printed\n;                 nor are verbose messages treated specially.\n;   - [json]    - Log the output in JSON. Note that JSON formatted log entries,\n;                 if specified for a logger type of 'console', will be formatted\n;                 per the 'default' formatter for log messages of type VERBOSE.\n;                 This is due to the remote consoles intepreting verbosity\n;                 outside of the logging subsystem.\n;\n; Log levels include the following, and are specified in a comma delineated\n; list:\n;    debug\n;    trace\n;    notice\n;    warning\n;    error\n;    verbose(<level>)\n;    dtmf\n;    fax\n;    security\n;\n; Verbose takes an optional argument, in the form of an integer level. The\n; verbose level can be set per logfile. Verbose messages with higher levels\n; will not be logged to the file.  If the verbose level is not specified, it\n; will log verbose messages following the current level of the root console.\n;\n; Debug has multiple levels like verbose. However, it is a system wide setting\n; and cannot be specified per logfile. You specify the debug level elsewhere\n; such as the CLI 'core set debug 3', starting Asterisk with '-ddd', or in\n; asterisk.conf 'debug=3'.\n;\n; Special level name \"*\" means all levels, even dynamic levels registered\n; by modules after the logger has been initialized (this means that loading\n; and unloading modules that create/remove dynamic logger levels will result\n; in these levels being included on filenames that have a level name of \"*\",\n; without any need to perform a 'logger reload' or similar operation).\n; Note that there is no value in specifying both \"*\" and specific level names\n; for a filename; the \"*\" level means all levels.  The only exception is if\n; you need to specify a specific verbose level. e.g, \"verbose(3),*\".\n;\n; We highly recommend that you DO NOT turn on debug mode if you are simply\n; running a production system.  Debug mode turns on a LOT of extra messages,\n; most of which you are unlikely to understand without an understanding of\n; the underlying code.  Do NOT report debug messages as code issues, unless\n; you have a specific issue that you are attempting to debug.  They are\n; messages for just that -- debugging -- and do not rise to the level of\n; something that merit your attention as an Asterisk administrator.  Both\n; debug and trace messages are also very verbose and can and do fill up\n; logfiles quickly.  This is another reason not to have debug or trace\n; modes on a production system unless you are in the process of debugging\n; a specific issue.\n;\n;debug.log => error,warning,notice,verbose,debug\n;trace.log => trace\n;security.log => security\nconsole => notice,warning,error\n;console => notice,warning,error,debug\nmessages.log => notice,warning,error\n;full.log => notice,warning,error,debug,verbose,dtmf,fax\n;\n;full-json.log => [json]debug,verbose,notice,warning,error,dtmf,fax\n;\n;syslog keyword : This special keyword logs to syslog facility\n;\n;syslog.local0 => notice,warning,error\n;\n"})})]})}function c(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},17776:function(e,n,t){t.d(n,{R:()=>a,x:()=>r});var o=t(7378);let s={},i=o.createContext(s);function a(e){let n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);