"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["40268"],{58877:function(e,r,t){t.r(r),t.d(r,{frontMatter:()=>s,toc:()=>d,default:()=>m,metadata:()=>n,assets:()=>l,contentTitle:()=>i});var n=JSON.parse('{"id":"web/editor/automerge","title":"automerge","description":"- automerge","source":"@site/../notes/web/editor/automerge.md","sourceDirName":"web/editor","slug":"/web/editor/automerge","permalink":"/notes/web/editor/automerge","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/web/editor/automerge.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1721277861000,"frontMatter":{"title":"automerge"},"sidebar":"docs","previous":{"title":"ansi","permalink":"/notes/web/editor/ansi"},"next":{"title":"Blockly","permalink":"/notes/web/editor/blockly"}}'),o=t(86106),a=t(17776);let s={title:"automerge"},i="automerge",l={},d=[{value:"StorageAdapter",id:"storageadapter",level:2},{value:"Rich Text",id:"rich-text",level:2}];function c(e){let r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"automerge",children:"automerge"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"https://github.com/automerge/automerge",children:"automerge"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"MIT, JS, Rust, WASM"}),"\n",(0,o.jsx)(r.li,{children:"2.3 MB, 865.9kB"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\u53C2\u8003\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://automerge.org/automerge-binary-format-spec/",children:"Binary Document Format"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"@automerge/automerge-wasm"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Rust -> WASM"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.li,{children:"@automerge/automerge-repo-storage-indexeddb"}),"\n",(0,o.jsx)(r.li,{children:"@automerge/automerge-repo-storage-nodefs"}),"\n",(0,o.jsx)(r.li,{children:"@automerge/automerge-repo-network-websocket"}),"\n",(0,o.jsx)(r.li,{children:"@automerge/automerge-repo-network-messagechannel"}),"\n",(0,o.jsx)(r.li,{children:"@automerge/automerge-repo-network-broadcastchannel"}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"pnpm add @automerge/automerge @automerge/automerge-repo\n"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'// NodeJS\nimport { next as A } from "@automerge/automerge"\n\n\n// \u81EA\u5B9A\u4E49\u521D\u59CB\u5316\u903B\u8F91\nimport wasmUrl from "@automerge/automerge/automerge.wasm?url";\n// import { automergeWasmBase64 } from "@automerge/automerge/automerge.wasm.base64.js";\nimport { next as Automerge } from "@automerge/automerge/slim";\nimport { Repo } from `@automerge/automerge-repo/slim`;\n\nawait next.initializeWasm(wasmUrl)\nconst repo = new Repo({})\n'})}),"\n",(0,o.jsx)(r.h2,{id:"storageadapter",children:"StorageAdapter"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"export type StorageKey = string[];\n\nexport abstract class StorageAdapter {\n  abstract load(key: StorageKey): Promise<Uint8Array | undefined>;\n  abstract save(key: StorageKey, data: Uint8Array): Promise<void>;\n  abstract remove(key: StorageKey): Promise<void>;\n  abstract loadRange(keyPrefix: StorageKey): Promise<{ key: StorageKey; data: Uint8Array }[]>;\n  abstract removeRange(keyPrefix: StorageKey): Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"[<document ID>, <chunk type>, <chunk identifier>]"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"chunk type -> snapshot, incremental"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"rich-text",children:"Rich Text"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Mark\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"strong"}),"\n",(0,o.jsx)(r.li,{children:"em"}),"\n",(0,o.jsx)(r.li,{children:"link"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["Block\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"paragraph heading code-block blockquote ordered-list-item unordered-list-item image"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://automerge.org/docs/documents/rich_text/",children:"https://automerge.org/docs/documents/rich_text/"})}),"\n"]})]})}function m(e={}){let{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},17776:function(e,r,t){t.d(r,{R:()=>s,x:()=>i});var n=t(7378);let o={},a=n.createContext(o);function s(e){let r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);