"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["8712"],{72153:function(n,e,s){s.r(e),s.d(e,{frontMatter:()=>l,toc:()=>o,default:()=>_,metadata:()=>t,assets:()=>d,contentTitle:()=>r});var t=JSON.parse('{"id":"db/relational/postgresql/postgresql-cookbook","title":"PostgreSQL Cookbook","description":"- String Functions and Operators","source":"@site/../notes/db/relational/postgresql/postgresql-cookbook.md","sourceDirName":"db/relational/postgresql","slug":"/db/relational/postgresql/cookbook","permalink":"/notes/db/relational/postgresql/cookbook","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/db/relational/postgresql/postgresql-cookbook.md","tags":[{"inline":true,"label":"Cookbook","permalink":"/notes/tags/cookbook"}],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1753627141000,"frontMatter":{"title":"PostgreSQL Cookbook","tags":["Cookbook"]},"sidebar":"docs","previous":{"title":"CONSTRAINT","permalink":"/notes/db/relational/postgresql/constraint"},"next":{"title":"\u6570\u636E\u7C7B\u578B","permalink":"/notes/db/relational/postgresql/datatype"}}'),i=s(86106),a=s(17776);let l={title:"PostgreSQL Cookbook",tags:["Cookbook"]},r="PostgreSQL Cookbook",d={},o=[{value:"json \u6570\u7EC4\u53BB\u91CD",id:"json-\u6570\u7EC4\u53BB\u91CD",level:2},{value:"\u6570\u636E\u8F6C\u6362",id:"\u6570\u636E\u8F6C\u6362",level:2},{value:"\u5B57\u7B26\u4E32",id:"\u5B57\u7B26\u4E32",level:2},{value:"\u7EDF\u8BA1",id:"\u7EDF\u8BA1",level:2},{value:"\u673A\u5668\u5B66\u4E60",id:"\u673A\u5668\u5B66\u4E60",level:2},{value:"UUID",id:"uuid",level:2},{value:"\u5546\u4E1A",id:"\u5546\u4E1A",level:2},{value:"\u6570\u636E\u8FC1\u79FB",id:"\u6570\u636E\u8FC1\u79FB",level:2},{value:"\u56FE\u64CD\u4F5C",id:"\u56FE\u64CD\u4F5C",level:2},{value:"\u67E5\u627E\u7F3A\u5931\u7684\u6570\u5B57",id:"\u67E5\u627E\u7F3A\u5931\u7684\u6570\u5B57",level:3},{value:"null \u5B89\u5168\u7684 json \u63D0\u53D6",id:"null-\u5B89\u5168\u7684-json-\u63D0\u53D6",level:2},{value:"Functions",id:"functions",level:2},{value:"decode_uri_component",id:"decode_uri_component",level:3},{value:"table_size",id:"table_size",level:3},{value:"try_date",id:"try_date",level:3},{value:"tab_sync_id_seq",id:"tab_sync_id_seq",level:3},{value:"\u67E5\u8BE2\u5916\u952E\u548C\u7D22\u5F15",id:"\u67E5\u8BE2\u5916\u952E\u548C\u7D22\u5F15",level:2},{value:"\u7D22\u5F15\u4F7F\u7528\u60C5\u51B5",id:"\u7D22\u5F15\u4F7F\u7528\u60C5\u51B5",level:2},{value:"Missing FK Index",id:"missing-fk-index",level:2}];function c(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"postgresql-cookbook",children:"PostgreSQL Cookbook"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.postgresql.org/docs/current/static/functions-string.html",children:"String Functions and Operators"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://hakibenita.com/postgresql-unknown-features",children:"Lesser Known PostgreSQL Features"})}),"\n",(0,i.jsxs)(e.li,{children:["\u5E38\u7528\u51FD\u6570\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"quote_literal"})," - \u907F\u514D\u6CE8\u5165"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:'format(formatstr text [, formatarg "any" [, ...] ])'}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"%[position][flags][width]type"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["type\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"s \u7B80\u5355\u5B57\u7B26\u4E32, null \u8F93\u51FA\u7A7A\u5B57\u7B26\u4E32"}),"\n",(0,i.jsxs)(e.li,{children:["I \u4F5C\u4E3A SQL \u7684\u6807\u8BC6\u7B26\u53EF\u80FD\u4F1A\u52A0\u53CC\u5F15\u53F7, \u4E0D\u5141\u8BB8 null, \u7B49\u540C\u4E8E ",(0,i.jsx)(e.code,{children:"quote_ident"})]}),"\n",(0,i.jsxs)(e.li,{children:["L \u4F5C\u4E3A SQL \u4E2D\u7684\u6587\u672C\u5BF9\u5F85\u8FDB\u884C\u52A0\u5F15\u53F7, null \u8F93\u51FA NULL, \u7B49\u540C\u4E8E ",(0,i.jsx)(e.code,{children:"quote_nullable"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"\u683C\u5F0F\u5316\u5B57\u7B26\u4E32"}),"\n",(0,i.jsx)(e.li,{children:"\u6784\u5EFA SQL"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- \u5305\u542B\u5176\u4ED6\u8868\u7684\u5B9A\u4E49\nCREATE TABLE test_new (LIKE test_old INCLUDING ALL);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"json-\u6570\u7EC4\u53BB\u91CD",children:"json \u6570\u7EC4\u53BB\u91CD"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:'select distinct jsonb_array_elements(v)#>>\'{}\'\nfrom (select \'[\n  "1",\n  "2"\n]\'::jsonb union select \'[\n  "1",\n  "4"\n]\'::jsonb) t(v);\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u6570\u636E\u8F6C\u6362",children:"\u6570\u636E\u8F6C\u6362"}),"\n",(0,i.jsx)(e.p,{children:"array to rows unset"}),"\n",(0,i.jsx)(e.h2,{id:"\u5B57\u7B26\u4E32",children:"\u5B57\u7B26\u4E32"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"select substring('abcdefgh' from n for 2) from generate_series(1, length( 'abcdefgh' ), 2) n;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u7EDF\u8BA1",children:"\u7EDF\u8BA1"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/postgres-plr/plr",children:"https://github.com/postgres-plr/plr"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://www.joeconway.com/presentations/oscon-pres-2003-1.pdf",children:"https://www.joeconway.com/presentations/oscon-pres-2003-1.pdf"}),"\nPostgreSQL-embedded Statistical\nAnalysis with PL/R\nPL/R User\u2019s Guide - R Procedural\nLanguage\n",(0,i.jsx)(e.a,{href:"http://www.joeconway.com/plr/doc/plr-US.pdf",children:"http://www.joeconway.com/plr/doc/plr-US.pdf"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"http://www.joeconway.com/plr/",children:"http://www.joeconway.com/plr/"})}),"\n",(0,i.jsx)(e.h2,{id:"\u673A\u5668\u5B66\u4E60",children:"\u673A\u5668\u5B66\u4E60"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"http://madlib.apache.org/",children:"http://madlib.apache.org/"}),"\n",(0,i.jsx)(e.a,{href:"https://wiki.postgresql.org/wiki/Ecosystem:Machine_learning",children:"https://wiki.postgresql.org/wiki/Ecosystem:Machine_learning"})]}),"\n",(0,i.jsx)(e.p,{children:"/usr/local/madlib/bin/madpack -s madlib -p postgres -c [user[/password]@][host][:port][/database] install"}),"\n",(0,i.jsx)(e.p,{children:"MADlib works with Python 2.6 and 2.7. Currently, Python 3.x is not supported."}),"\n",(0,i.jsx)(e.h2,{id:"uuid",children:"UUID"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE EXTENSION IF NOT EXISTS pgcrypto;\nSELECT gen_random_uuid();\n\nCREATE EXTENSION IF NOT EXISTS uuid-ossp;\nSELECT uuid_generate_v4();\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u5546\u4E1A",children:"\u5546\u4E1A"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://www.cybertec-postgresql.com/",children:"https://www.cybertec-postgresql.com/"})}),"\n",(0,i.jsx)(e.h2,{id:"\u6570\u636E\u8FC1\u79FB",children:"\u6570\u636E\u8FC1\u79FB"}),"\n",(0,i.jsx)(e.p,{children:"psql source_database -c 'COPY table TO stdout' | psql target_database -c 'COPY table FROM stdin'"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE DATABASE new_database TEMPLATE original_database;\n\nINSERT INTO t(a, b, c)\nSELECT a, b, c FROM dblink('host=xxx user=xxx password=xxx dbname=xxx', 'SELECT a, b, c FROM t') AS x(a integer, b integer, c integer)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u56FE\u64CD\u4F5C",children:"\u56FE\u64CD\u4F5C"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- \u9012\u5F52\u67E5\u627E\u81EA\u5DF1\u548C\u6240\u6709\u5B50\u7EA7\nWITH RECURSIVE children(id) AS (\n  SELECT *\n  FROM items\n  WHERE id = 470569\n  UNION ALL\n  SELECT t.*\n  FROM children s, items t\n  WHERE t.parent = s.id\n) SELECT *\n  FROM children;\n\n-- \u9012\u5F52\u67E5\u627E\u81EA\u5DF1\u548C\u6240\u6709\u5B50\u7EA7\u5E76\u4F53\u73B0\u5C42\u7EA7\u5173\u7CFB\nWITH RECURSIVE children(id) AS (\n  SELECT\n    *,\n    id || '' AS path\n  FROM items\n  WHERE id = 470569\n  UNION ALL\n  SELECT\n    t.*,\n    s.path || '/' || t.id\n  FROM children s, items t\n  WHERE t.parent = s.id\n) SELECT *\n  FROM children;\n\n-- \u67E5\u627E\u6240\u6709\u7236\u7EA7\n-- \u6620\u5C04 p \u662F\u5FC5\u8981\u7684, \u5426\u5219\u4F1A\u6709\u6B67\u4E49\nWITH RECURSIVE parents(p) AS (\n  SELECT parent as p,*\n  FROM items\n  WHERE id = 471118\n  UNION ALL\n  SELECT t.parent as p,t.*\n  FROM parents s, items t\n  WHERE t.id = s.p\n) SELECT *\n  FROM parents;\n"})}),"\n",(0,i.jsx)(e.h3,{id:"\u67E5\u627E\u7F3A\u5931\u7684\u6570\u5B57",children:"\u67E5\u627E\u7F3A\u5931\u7684\u6570\u5B57"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- find missing number\n-- mytab(id,cid) --  find missing cid\nSELECT num AS missing\nFROM generate_series(1, (SELECT max(cid) FROM mytab)) t(num)\n  LEFT JOIN mytab tab ON (t.num = tab.cid)\nWHERE tab.cid IS NULL;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"null-\u5B89\u5168\u7684-json-\u63D0\u53D6",children:"null \u5B89\u5168\u7684 json \u63D0\u53D6"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE OR REPLACE FUNCTION json_fetch(object json, variadic nodes text[])\nRETURNS json AS $$\nDECLARE\n  result json := object;\n  k text;\nBEGIN\n  foreach k in array nodes loop\n    if (result ->> k) is null then\n      result := null;\n      exit;\n    end if;\n\n    result := result -> k;\n  end loop;\n\n  return result;\nEND;\n$$ LANGUAGE plpgsql;\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT id,\n  coalesce(\n    json_fetch(author, 'address', 'street_name')::text, 'No address'\n  ) AS street_name\nFROM books;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(e.h3,{id:"decode_uri_component",children:"decode_uri_component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE OR REPLACE FUNCTION decode_uri_component(p varchar) RETURNS varchar AS\n$$\nSELECT convert_from(CAST(E'\\\\x' || string_agg(CASE WHEN length(r.m[1]) = 1 THEN encode(convert_to(r.m[1], 'SQL_ASCII'), 'hex')\n                                                ELSE substring(r.m[1] from 2 for 2) END, '') AS bytea), 'UTF8')\nFROM regexp_matches($1, '%[0-9a-f][0-9a-f]|.', 'gi') AS r(m);\n$$ LANGUAGE SQL IMMUTABLE STRICT;\n"})}),"\n",(0,i.jsx)(e.h3,{id:"table_size",children:"table_size"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- \u67E5\u770B\u8868\u7A7A\u95F4\u5927\u5C0F\u4FE1\u606F\n-- table_size show statistic table size\nCREATE VIEW table_size AS\n  SELECT\n    *,\n    pg_size_pretty(total_bytes) AS total,\n    pg_size_pretty(index_bytes) AS INDEX,\n    pg_size_pretty(toast_bytes) AS toast,\n    pg_size_pretty(table_bytes) AS TABLE\n  FROM (\n         SELECT\n           *,\n           total_bytes - index_bytes - COALESCE(toast_bytes, 0) AS table_bytes\n         FROM (\n                SELECT\n                  c.oid,\n                  nspname                               AS table_schema,\n                  relname                               AS TABLE_NAME,\n                  c.reltuples                           AS row_estimate,\n                  pg_total_relation_size(c.oid)         AS total_bytes,\n                  pg_indexes_size(c.oid)                AS index_bytes,\n                  pg_total_relation_size(reltoastrelid) AS toast_bytes\n                FROM pg_class c\n                  LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n                WHERE relkind = 'r'\n              ) a\n       ) a;\n"})}),"\n",(0,i.jsx)(e.h3,{id:"try_date",children:"try_date"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- \u5C06\u7ED9\u5B9A\u7684\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u65E5\u671F, \u5982\u679C\u5931\u8D25\u8FD4\u56DE null\n-- try to convert a text to date, return null if date invalid\nCREATE OR REPLACE FUNCTION try_date(s TEXT)\n  RETURNS DATE\nAS $$\nBEGIN\n  RETURN s :: DATE;\n  EXCEPTION WHEN OTHERS\n  THEN\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n"})}),"\n",(0,i.jsx)(e.h3,{id:"tab_sync_id_seq",children:"tab_sync_id_seq"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- \u540C\u6B65\u7ED9\u5B9A\u8868\u7684 id \u5E8F\u5217\u503C\nCREATE OR REPLACE FUNCTION tab_sync_id_seq(tab TEXT)\n  RETURNS BIGINT\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  seq TEXT;\nBEGIN\n  seq = tab || '_id_seq';\n  --   EXECUTE 'LOCK TABLE ' || tab || ' IN EXCLUSIVE MODE';\n  EXECUTE 'SELECT setval('' ' || seq || ' '', COALESCE((SELECT MAX(id)\n                                            FROM ' || tab || '), 1), FALSE)';\n  RETURN nextval(seq);\nEND;\n$$;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u67E5\u8BE2\u5916\u952E\u548C\u7D22\u5F15",children:"\u67E5\u8BE2\u5916\u952E\u548C\u7D22\u5F15"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u4E00\u5B9A\u8981\u7D22\u5F15\u5916\u952E"}),"\n",(0,i.jsxs)(e.li,{children:["\u53C2\u8003\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.cybertec-postgresql.com/en/index-your-foreign-key/",children:"ARE YOUR FOREIGN KEYS INDEXED?"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT c.conrelid::regclass                    AS \"table\",\n    /* list of key column names in order */\n       string_agg(a.attname, ',' ORDER BY x.n) AS columns,\n       pg_catalog.pg_size_pretty(\n               pg_catalog.pg_relation_size(c.conrelid)\n           )                                   AS size,\n       c.conname                               AS constraint,\n       c.confrelid::regclass                   AS referenced_table\nFROM pg_catalog.pg_constraint c\n         /* enumerated key column numbers per foreign key */\n         CROSS JOIN LATERAL\n    unnest(c.conkey) WITH ORDINALITY AS x(attnum, n)\n    /* name for each key column */\n         JOIN pg_catalog.pg_attribute a\n              ON a.attnum = x.attnum\n                  AND a.attrelid = c.conrelid\nWHERE NOT EXISTS\n    /* is there a matching index for the constraint? */\n    (SELECT 1\n     FROM pg_catalog.pg_index i\n     WHERE i.indrelid = c.conrelid\n         /* the first index columns must be the same as the\n            key columns, but order doesn't matter */\n       AND (i.indkey::smallint[])[0:cardinality(c.conkey) - 1]\n         OPERATOR (pg_catalog.@>) c.conkey)\n  AND c.contype = 'f'\nGROUP BY c.conrelid, c.conname, c.confrelid\nORDER BY pg_catalog.pg_relation_size(c.conrelid) DESC;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u7D22\u5F15\u4F7F\u7528\u60C5\u51B5",children:"\u7D22\u5F15\u4F7F\u7528\u60C5\u51B5"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT nspname,\n       relname,\n       round(100 * pg_relation_size(indexrelid) /\n             pg_relation_size(indrelid)) / 100      AS index_ratio,\n       pg_size_pretty(pg_relation_size(indexrelid)) AS index_size,\n       pg_size_pretty(pg_relation_size(indrelid))   AS table_size\nFROM pg_index I\n       LEFT JOIN pg_class C ON (C.oid = I.indexrelid)\n       LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)\nWHERE nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')\n  AND C.relkind = 'i'\n  AND pg_relation_size(indrelid) > 0;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"missing-fk-index",children:"Missing FK Index"}),"\n",(0,i.jsx)(e.p,{children:"\u67E5\u627E\u7F3A\u5C11\u7684\u5916\u952E\u7D22\u5F15\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"-- check for FKs where there is no matching index\n-- on the referencing side\n-- or a bad index\n\nWITH fk_actions ( code, action ) AS (\n    VALUES ( 'a', 'error' ),\n        ( 'r', 'restrict' ),\n        ( 'c', 'cascade' ),\n        ( 'n', 'set null' ),\n        ( 'd', 'set default' )\n),\nfk_list AS (\n    SELECT pg_constraint.oid as fkoid, conrelid, confrelid as parentid,\n        conname, relname, nspname,\n        fk_actions_update.action as update_action,\n        fk_actions_delete.action as delete_action,\n        conkey as key_cols\n    FROM pg_constraint\n        JOIN pg_class ON conrelid = pg_class.oid\n        JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid\n        JOIN fk_actions AS fk_actions_update ON confupdtype = fk_actions_update.code\n        JOIN fk_actions AS fk_actions_delete ON confdeltype = fk_actions_delete.code\n    WHERE contype = 'f'\n),\nfk_attributes AS (\n    SELECT fkoid, conrelid, attname, attnum\n    FROM fk_list\n        JOIN pg_attribute\n            ON conrelid = attrelid\n            AND attnum = ANY( key_cols )\n    ORDER BY fkoid, attnum\n),\nfk_cols_list AS (\n    SELECT fkoid, array_agg(attname) as cols_list\n    FROM fk_attributes\n    GROUP BY fkoid\n),\nindex_list AS (\n    SELECT indexrelid as indexid,\n        pg_class.relname as indexname,\n        indrelid,\n        indkey,\n        indpred is not null as has_predicate,\n        pg_get_indexdef(indexrelid) as indexdef\n    FROM pg_index\n        JOIN pg_class ON indexrelid = pg_class.oid\n    WHERE indisvalid\n),\nfk_index_match AS (\n    SELECT fk_list.*,\n        indexid,\n        indexname,\n        indkey::int[] as indexatts,\n        has_predicate,\n        indexdef,\n        array_length(key_cols, 1) as fk_colcount,\n        array_length(indkey,1) as index_colcount,\n        round(pg_relation_size(conrelid)/(1024^2)::numeric) as table_mb,\n        cols_list\n    FROM fk_list\n        JOIN fk_cols_list USING (fkoid)\n        LEFT OUTER JOIN index_list\n            ON conrelid = indrelid\n            AND (indkey::int2[])[0:(array_length(key_cols,1) -1)] @> key_cols\n\n),\nfk_perfect_match AS (\n    SELECT fkoid\n    FROM fk_index_match\n    WHERE (index_colcount - 1) <= fk_colcount\n        AND NOT has_predicate\n        AND indexdef LIKE '%USING btree%'\n),\nfk_index_check AS (\n    SELECT 'no index' as issue, *, 1 as issue_sort\n    FROM fk_index_match\n    WHERE indexid IS NULL\n    UNION ALL\n    SELECT 'questionable index' as issue, *, 2\n    FROM fk_index_match\n    WHERE indexid IS NOT NULL\n        AND fkoid NOT IN (\n            SELECT fkoid\n            FROM fk_perfect_match)\n),\nparent_table_stats AS (\n    SELECT fkoid, tabstats.relname as parent_name,\n        (n_tup_ins + n_tup_upd + n_tup_del + n_tup_hot_upd) as parent_writes,\n        round(pg_relation_size(parentid)/(1024^2)::numeric) as parent_mb\n    FROM pg_stat_user_tables AS tabstats\n        JOIN fk_list\n            ON relid = parentid\n),\nfk_table_stats AS (\n    SELECT fkoid,\n        (n_tup_ins + n_tup_upd + n_tup_del + n_tup_hot_upd) as writes,\n        seq_scan as table_scans\n    FROM pg_stat_user_tables AS tabstats\n        JOIN fk_list\n            ON relid = conrelid\n)\nSELECT nspname as schema_name,\n    relname as table_name,\n    conname as fk_name,\n    issue,\n    table_mb,\n    writes,\n    table_scans,\n    parent_name,\n    parent_mb,\n    parent_writes,\n    cols_list,\n    indexdef\nFROM fk_index_check\n    JOIN parent_table_stats USING (fkoid)\n    JOIN fk_table_stats USING (fkoid)\nWHERE table_mb > 9\n    AND ( writes > 1000\n        OR parent_writes > 1000\n        OR parent_mb > 10 )\nORDER BY issue_sort, table_mb DESC, table_name, fk_name;\n"})})]})}function _(n={}){let{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},17776:function(n,e,s){s.d(e,{R:()=>l,x:()=>r});var t=s(7378);let i={},a=t.createContext(i);function l(n){let e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);