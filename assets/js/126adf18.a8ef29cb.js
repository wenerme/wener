"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["17509"],{4672:function(e,n,l){l.r(n),l.d(n,{frontMatter:()=>a,toc:()=>o,default:()=>u,metadata:()=>t,assets:()=>i,contentTitle:()=>d});var t=JSON.parse('{"id":"devops/kubernetes/network/flannel","title":"Flannel","description":"- flannel-io/flannel","source":"@site/../notes/devops/kubernetes/network/flannel.md","sourceDirName":"devops/kubernetes/network","slug":"/devops/kubernetes/network/flannel","permalink":"/notes/devops/kubernetes/network/flannel","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/devops/kubernetes/network/flannel.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1652772118000,"frontMatter":{"title":"Flannel"},"sidebar":"docs","previous":{"title":"emissary-ingress","permalink":"/notes/devops/kubernetes/network/emissary-ingress"},"next":{"title":"HAProxy Ingress","permalink":"/notes/devops/kubernetes/network/haproxy-ingress"}}'),r=l(86106),s=l(17776);let a={title:"Flannel"},d="Flannel",i={},o=[{value:"vxlan",id:"vxlan",level:2},{value:"host-gw",id:"host-gw",level:2},{value:"wireguard",id:"wireguard",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"flannel",children:"Flannel"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/flannel-io/flannel",children:"flannel-io/flannel"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"layer 2"}),"\n",(0,r.jsx)(n.li,{children:"overlay network"}),"\n",(0,r.jsx)(n.li,{children:"\u6BCF\u4E2A\u8282\u70B9\u4E00\u4E2A CIDR \u6BB5"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/flannel-io/flannel/blob/master/Documentation/backends.md",children:"\u652F\u6301\u540E\u7AEF"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["vxlan\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5927\u591A\u65F6\u5019\u9ED8\u8BA4"}),"\n",(0,r.jsx)(n.li,{children:"DirectRouting \u53EF\u4EE5\u5728\u76F8\u540C subnet \u65F6\u76F4\u8FDE - \u7C7B\u4F3C host-gw"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["host-gw\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6027\u80FD\u66F4\u597D - ip ro add \u7684\u65B9\u5F0F\u6DFB\u52A0\u8DEF\u7531"}),"\n",(0,r.jsx)(n.li,{children:"\u9700\u8981 2 \u5C42\u76F4\u8FDE - TincVPN, n2n \u53EF\u4EE5"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/coreos/flannel/tree/master/dist",children:"\u6267\u884C\u65B9\u5F0F"})}),"\n",(0,r.jsxs)(n.li,{children:["flanneld\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6BCF\u4E2A\u8282\u70B9\u4E0A\u6267\u884C\u4E00\u4E2A daemon"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# kube-flannel - vxlan\n# https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"vxlan",children:"vxlan"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "Network": "10.50.0.0/16",\n  "Backend": {\n    "Type": "extension",\n    "PreStartupCommand": "export VNI=1; export IF_NAME=flannel-vxlan; ip link del $IF_NAME 2>/dev/null; ip link add $IF_NAME type vxlan id $VNI dstport 8472 nolearning && ip link set mtu 1450 dev $IF_NAME && cat /sys/class/net/$IF_NAME/address",\n    "PostStartupCommand": "export IF_NAME=flannel-vxlan; export SUBNET_IP=`echo $SUBNET | cut -d\'/\' -f 1`; ip addr add $SUBNET_IP/32 dev $IF_NAME && ip link set $IF_NAME up",\n    "ShutdownCommand": "export IF_NAME=flannel-vxlan; ip link del $IF_NAME",\n    "SubnetAddCommand": "export SUBNET_IP=`echo $SUBNET | cut -d\'/\' -f 1`; export IF_NAME=flannel-vxlan; read VTEP; ip route add $SUBNET nexthop via $SUBNET_IP dev $IF_NAME onlink && arp -s $SUBNET_IP $VTEP dev $IF_NAME && bridge fdb add $VTEP dev $IF_NAME self dst $PUBLIC_IP"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"host-gw",children:"host-gw"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "Network": "10.50.0.0/16",\n  "Backend": {\n    "Type": "extension",\n    "SubnetAddCommand": "ip route add $SUBNET via $PUBLIC_IP",\n    "SubnetRemoveCommand": "ip route del $SUBNET via $PUBLIC_IP"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"wireguard",children:"wireguard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "Network": "10.50.0.0/16",\n  "Backend": {\n    "Type": "extension",\n    "PreStartupCommand": "wg genkey | tee privatekey | wg pubkey",\n    "PostStartupCommand": "export SUBNET_IP=`echo $SUBNET | cut -d\'/\' -f 1`; ip link del flannel-wg 2>/dev/null; ip link add flannel-wg type wireguard && wg set flannel-wg listen-port 51820 private-key privatekey && ip addr add $SUBNET_IP/32 dev flannel-wg && ip link set flannel-wg up && ip route add $NETWORK dev flannel-wg",\n    "ShutdownCommand": "ip link del flannel-wg",\n    "SubnetAddCommand": "read PUBLICKEY; wg set flannel-wg peer $PUBLICKEY endpoint $PUBLIC_IP:51820 allowed-ips $SUBNET",\n    "SubnetRemoveCommand": "read PUBLICKEY; wg set flannel-wg peer $PUBLICKEY remove"\n  }\n}\n'})})]})}function u(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},17776:function(e,n,l){l.d(n,{R:()=>a,x:()=>d});var t=l(7378);let r={},s=t.createContext(r);function a(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);