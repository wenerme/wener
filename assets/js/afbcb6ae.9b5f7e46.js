"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["39558"],{5624:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>i,toc:()=>c,default:()=>u,metadata:()=>s,assets:()=>a,contentTitle:()=>l});var s=JSON.parse('{"id":"web/nodejs/ws","title":"ws","description":"- websockets/ws","source":"@site/../notes/web/nodejs/ws.md","sourceDirName":"web/nodejs","slug":"/web/nodejs/ws","permalink":"/notes/web/nodejs/ws","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/web/nodejs/ws.md","tags":[{"inline":true,"label":"WebSocket","permalink":"/notes/tags/web-socket"}],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1715433332000,"frontMatter":{"title":"ws","tags":["WebSocket"]},"sidebar":"docs","previous":{"title":"undici","permalink":"/notes/web/nodejs/undici"},"next":{"title":"yarn version","permalink":"/notes/web/nodejs/yarn-version"}}'),o=n(86106),r=n(17776);let i={title:"ws",tags:["WebSocket"]},l="ws",a={},c=[];function d(e){let t={a:"a",code:"code",h1:"h1",header:"header",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"ws",children:"ws"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://github.com/websockets/ws",children:"websockets/ws"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"MIT, JS"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import WebSocket, { WebSocketServer } from 'ws';\n\nconst wss = new WebSocketServer({\n  port: 8080,\n  perMessageDeflate: {\n    zlibDeflateOptions: {\n      // See zlib defaults.\n      chunkSize: 1024,\n      memLevel: 7,\n      level: 3,\n    },\n    zlibInflateOptions: {\n      chunkSize: 10 * 1024,\n    },\n    // Other options settable:\n    clientNoContextTakeover: true, // Defaults to negotiated value.\n    serverNoContextTakeover: true, // Defaults to negotiated value.\n    serverMaxWindowBits: 10, // Defaults to negotiated value.\n    // Below options specified as default values.\n    concurrencyLimit: 10, // Limits zlib concurrency for perf.\n    threshold: 1024, // Size (in bytes) below which messages\n    // should not be compressed if context takeover is disabled.\n  },\n});\n"})})]})}function u(e={}){let{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},17776:function(e,t,n){n.d(t,{R:()=>i,x:()=>l});var s=n(7378);let o={},r=s.createContext(o);function i(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);