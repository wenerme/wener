"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["25093"],{25312:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>i,toc:()=>h,default:()=>c,metadata:()=>s,assets:()=>r,contentTitle:()=>l});var s=JSON.parse('{"id":"service/network/vpn/nebula","title":"nebula","description":"- slackhq/nebula \u662F\u4EC0\u4E48\uFF1F","source":"@site/../notes/service/network/vpn/nebula.md","sourceDirName":"service/network/vpn","slug":"/service/network/vpn/nebula","permalink":"/notes/service/network/vpn/nebula","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/service/network/vpn/nebula.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1680070123000,"frontMatter":{"title":"nebula"},"sidebar":"docs","previous":{"title":"n2n","permalink":"/notes/service/network/vpn/n2n"},"next":{"title":"netbird","permalink":"/notes/service/network/vpn/netbird"}}'),a=t(86106),o=t(17776);let i={title:"nebula"},l="nebula",r={},h=[{value:"\u914D\u7F6E",id:"\u914D\u7F6E",level:2},{value:"NAT",id:"nat",level:2}];function u(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"nebula",children:"nebula"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula",children:"slackhq/nebula"})," \u662F\u4EC0\u4E48\uFF1F\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"MIT"}),"\n",(0,a.jsx)(n.li,{children:"P2P overlay \u7F51\u7EDC - \u7C7B\u4F3C Tinc"}),"\n",(0,a.jsx)(n.li,{children:"Layer 3 - IP \u5C42 - \u4E0D\u652F\u6301 MAC - \u9884\u5148\u914D\u7F6E\u7F51\u7EDC"}),"\n",(0,a.jsx)(n.li,{children:"\u6CE8\u91CD\u6027\u80FD\u548C\u7B80\u6D01"}),"\n",(0,a.jsxs)(n.li,{children:["\u652F\u6301 iOS \u548C Android - ",(0,a.jsx)(n.a,{href:"https://github.com/DefinedNet/mobile_nebula",children:"DefinedNet/mobile_nebula"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Flutter+Go binding"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"\u652F\u6301 Windows, MacOS, FreeBSD"}),"\n",(0,a.jsx)(n.li,{children:"\u9ED8\u8BA4 elliptic curve Diffie-Hellman key exchange, AES-256-GCM"}),"\n",(0,a.jsx)(n.li,{children:"Open Source Since 2019 Nov - slackhq \u5185\u90E8\u5F00\u53D1 3 \u5E74"}),"\n",(0,a.jsxs)(n.li,{children:["\u57FA\u4E8E ",(0,a.jsx)(n.a,{href:"https://noiseprotocol.org/",children:"Noise Protocol Framework."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u53CC\u5411\u8BA4\u8BC1, p2p, SDN"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"lighthouse \u8F85\u52A9 nat punch"}),"\n",(0,a.jsxs)(n.li,{children:["\u53C2\u8003\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://youtu.be/qy2cgqglt3o",children:"Creating a Fast, Secure, Location Agnostic Mesh Network with Nebula - Ryan Huber"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula/issues/33",children:"slackhq/nebula#33"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\u76EE\u524D\u76F4\u8FDE\u4E3A\u4E3B\uFF0C\u6CA1\u6709\u7C7B\u4F3C tinc \u7684\u901A\u8FC7\u8282\u70B9\u8DEF\u7531\u7684\u903B\u8F91\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u901A\u8FC7 lighthouse \u652F\u6301\u8DEF\u7531\u4E00\u4E2A\u7F51\u7EDC"}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula/issues/218",children:"#218"})," Route traffic through other nodes like Tinc VPN"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula/issues/204",children:"#204"})," Nebula does not reroute through lighthouse if hole punching does not work"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\u4E0D\u652F\u6301 unsafe_routes \u4E4B\u5916\u81EA\u5B9A\u4E49\u8DEF\u7531 - ",(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula/issues/274",children:"#274"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\u53EA\u80FD\u4F7F\u7528\u9884\u5148\u5B9A\u4E49\u7684\u7F51\u7EDC - \u4E0D\u80FD ",(0,a.jsx)(n.code,{children:"ip ro add"})]}),"\n",(0,a.jsx)(n.li,{children:"\u4E0D\u652F\u6301 flannel+nebula"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["NAT \u4E0D\u662F\u7279\u522B\u7A33\u5B9A\uFF0C\u4E0D\u4E00\u5B9A\u80FD\u7A7F\u900F\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u5982\u679C\u51FA\u73B0"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"macOS CPU \u5360\u7528\u5F88\u9AD8 - 100M \u8DD1\u6EE1 CPU, Linux \u5927\u7EA6 20%"}),"\n"]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# macOS\nbrew install nebula\n# AlpineLinux\napk add nebula\n\n# ca.crt ca.key\nnebula-cert ca -name "Wener"\n# Lighthouse\n# lh-1.crt lh-1.key\nnebula-cert sign -name "lh-1" -ip "192.168.100.1/24"\ncat <<LH > lh-1.yaml\npki:\n  ca: /home/admin/ca.crt\n  cert: /home/admin/lh-1.crt\n  key: /home/admin/lh-1.key\nstatic_host_map:\n  "192.168.100.1": ["100.64.22.11:4242"]\nlighthouse:\n  am_lighthouse: true\nlisten:\n  host: 0.0.0.0\n  port: 4242\nfirewall:\n  outbound:\n  - port: any\n    proto: any\n    host: any\n  inbound:\n  - port: any\n    proto: icmp\n    host: any\n  - port: 22\n    proto: tcp\n    group: ssh\nLH\n# \u540C\u6B65\u8BC1\u4E66\u5230 lighthouse \u8282\u70B9\nscp ca.crt lh-1.yaml lh-1.crt lh-1.key admin@my-lighthouse:~\n# \u542F\u52A8\u670D\u52A1\nssh admin@my-lighthouse sudo ./nebula -config lh-1.yaml\n\n# laptop\n# \u6DFB\u52A0 ssh \u5206\u7EC4\u5373\u53EF\u8BBF\u95EE lh-1 \u7684 22 \u7AEF\u53E3\nnebula-cert sign -name "laptop" -ip "192.168.100.2/24" -groups "laptop,home,ssh"\ncat <<LH > laptop.yaml\npki:\n  ca: ca.crt\n  cert: laptop.crt\n  key: laptop.key\nstatic_host_map:\n  "192.168.100.1": ["100.64.22.11:4242"]\nlighthouse:\n  hosts:\n    - "192.168.100.1"\nlisten:\n  host: 0.0.0.0\n  port: 4242\nfirewall:\n  outbound:\n  - port: any\n    proto: any\n    host: any\n  inbound:\n  - port: any\n    proto: icmp\n    host: any\nLH\nsudo nebula -config laptop.yaml\n'})}),"\n",(0,a.jsx)(n.h2,{id:"\u914D\u7F6E",children:"\u914D\u7F6E"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula/blob/master/examples/config.yml",children:"https://github.com/slackhq/nebula/blob/master/examples/config.yml"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# This is the nebula example configuration file. You must edit, at a minimum, the static_host_map, lighthouse, and firewall sections\n# Some options in this file are HUPable, including the pki section. (A HUP will reload credentials from disk without affecting existing tunnels)\n\n# PKI defines the location of credentials for this node. Each of these can also be inlined by using the yaml ": |" syntax.\npki:\n  # The CAs that are accepted by this node. Must contain one or more certificates created by \'nebula-cert ca\'\n  ca: /etc/nebula/ca.crt\n  cert: /etc/nebula/host.crt\n  key: /etc/nebula/host.key\n  #blocklist is a list of certificate fingerprints that we will refuse to talk to\n  #blocklist:\n  #  - c99d4e650533b92061b09918e838a5a0a6aaee21eed1d12fd937682865936c72\n\n# The static host map defines a set of hosts with fixed IP addresses on the internet (or any network).\n# A host can have multiple fixed IP addresses defined here, and nebula will try each when establishing a tunnel.\n# The syntax is:\n#   "{nebula ip}": ["{routable ip/dns name}:{routable port}"]\n# Example, if your lighthouse has the nebula IP of 192.168.100.1 and has the real ip address of 100.64.22.11 and runs on port 4242:\nstatic_host_map:\n  "192.168.100.1": ["100.64.22.11:4242"]\n\n\nlighthouse:\n  # am_lighthouse is used to enable lighthouse functionality for a node. This should ONLY be true on nodes\n  # you have configured to be lighthouses in your network\n  am_lighthouse: false\n  # serve_dns optionally starts a dns listener that responds to various queries and can even be\n  # delegated to for resolution\n  #serve_dns: false\n  #dns:\n    # The DNS host defines the IP to bind the dns listener to. This also allows binding to the nebula node IP.\n    #host: 0.0.0.0\n    #port: 53\n  # interval is the number of seconds between updates from this node to a lighthouse.\n  # during updates, a node sends information about its current IP addresses to each node.\n  interval: 60\n  # hosts is a list of lighthouse hosts this node should report to and query from\n  # IMPORTANT: THIS SHOULD BE EMPTY ON LIGHTHOUSE NODES\n  # IMPORTANT2: THIS SHOULD BE LIGHTHOUSES\' NEBULA IPs, NOT LIGHTHOUSES\' REAL ROUTABLE IPs\n  hosts:\n    - "192.168.100.1"\n\n  # remote_allow_list allows you to control ip ranges that this node will\n  # consider when handshaking to another node. By default, any remote IPs are\n  # allowed. You can provide CIDRs here with `true` to allow and `false` to\n  # deny. The most specific CIDR rule applies to each remote. If all rules are\n  # "allow", the default will be "deny", and vice-versa. If both "allow" and\n  # "deny" rules are present, then you MUST set a rule for "0.0.0.0/0" as the\n  # default.\n  #remote_allow_list:\n    # Example to block IPs from this subnet from being used for remote IPs.\n    #"172.16.0.0/12": false\n\n    # A more complicated example, allow public IPs but only private IPs from a specific subnet\n    #"0.0.0.0/0": true\n    #"10.0.0.0/8": false\n    #"10.42.42.0/24": true\n\n  # local_allow_list allows you to filter which local IP addresses we advertise\n  # to the lighthouses. This uses the same logic as `remote_allow_list`, but\n  # additionally, you can specify an `interfaces` map of regular expressions\n  # to match against interface names. The regexp must match the entire name.\n  # All interface rules must be either true or false (and the default will be\n  # the inverse). CIDR rules are matched after interface name rules.\n  # Default is all local IP addresses.\n  #local_allow_list:\n    # Example to block tun0 and all docker interfaces.\n    #interfaces:\n      #tun0: false\n      #\'docker.*\': false\n    # Example to only advertise this subnet to the lighthouse.\n    #"10.0.0.0/8": true\n\n# Port Nebula will be listening on. The default here is 4242. For a lighthouse node, the port should be defined,\n# however using port 0 will dynamically assign a port and is recommended for roaming nodes.\nlisten:\n  # To listen on both any ipv4 and ipv6 use "[::]"\n  host: 0.0.0.0\n  port: 4242\n  # Sets the max number of packets to pull from the kernel for each syscall (under systems that support recvmmsg)\n  # default is 64, does not support reload\n  #batch: 64\n  # Configure socket buffers for the udp side (outside), leave unset to use the system defaults. Values will be doubled by the kernel\n  # Default is net.core.rmem_default and net.core.wmem_default (/proc/sys/net/core/rmem_default and /proc/sys/net/core/rmem_default)\n  # Maximum is limited by memory in the system, SO_RCVBUFFORCE and SO_SNDBUFFORCE is used to avoid having to raise the system wide\n  # max, net.core.rmem_max and net.core.wmem_max\n  #read_buffer: 10485760\n  #write_buffer: 10485760\n\n# EXPERIMENTAL: This option is currently only supported on linux and may\n# change in future minor releases.\n#\n# Routines is the number of thread pairs to run that consume from the tun and UDP queues.\n# Currently, this defaults to 1 which means we have 1 tun queue reader and 1\n# UDP queue reader. Setting this above one will set IFF_MULTI_QUEUE on the tun\n# device and SO_REUSEPORT on the UDP socket to allow multiple queues.\n#routines: 1\n\npunchy:\n  # Continues to punch inbound/outbound at a regular interval to avoid expiration of firewall nat mappings\n  punch: true\n\n  # respond means that a node you are trying to reach will connect back out to you if your hole punching fails\n  # this is extremely useful if one node is behind a difficult nat, such as a symmetric NAT\n  # Default is false\n  #respond: true\n\n  # delays a punch response for misbehaving NATs, default is 1 second, respond must be true to take effect\n  #delay: 1s\n\n# Cipher allows you to choose between the available ciphers for your network. Options are chachapoly or aes\n# IMPORTANT: this value must be identical on ALL NODES/LIGHTHOUSES. We do not/will not support use of different ciphers simultaneously!\n#cipher: chachapoly\n\n# Local range is used to define a hint about the local network range, which speeds up discovering the fastest\n# path to a network adjacent nebula node.\n#local_range: "172.16.0.0/24"\n\n# sshd can expose informational and administrative functions via ssh this is a\n#sshd:\n  # Toggles the feature\n  #enabled: true\n  # Host and port to listen on, port 22 is not allowed for your safety\n  #listen: 127.0.0.1:2222\n  # A file containing the ssh host private key to use\n  # A decent way to generate one: ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N "" < /dev/null\n  #host_key: ./ssh_host_ed25519_key\n  # A file containing a list of authorized public keys\n  #authorized_users:\n    #- user: steeeeve\n      # keys can be an array of strings or single string\n      #keys:\n        #- "ssh public key string"\n\n# Configure the private interface. Note: addr is baked into the nebula certificate\ntun:\n  # When tun is disabled, a lighthouse can be started without a local tun interface (and therefore without root)\n  disabled: false\n  # Name of the device\n  dev: nebula1\n  # Toggles forwarding of local broadcast packets, the address of which depends on the ip/mask encoded in pki.cert\n  drop_local_broadcast: false\n  # Toggles forwarding of multicast packets\n  drop_multicast: false\n  # Sets the transmit queue length, if you notice lots of transmit drops on the tun it may help to raise this number. Default is 500\n  tx_queue: 500\n  # Default MTU for every packet, safe setting is (and the default) 1300 for internet based traffic\n  mtu: 1300\n  # Route based MTU overrides, you have known vpn ip paths that can support larger MTUs you can increase/decrease them here\n  routes:\n    #- mtu: 8800\n    #  route: 10.0.0.0/16\n  # Unsafe routes allows you to route traffic over nebula to non-nebula nodes\n  # Unsafe routes should be avoided unless you have hosts/services that cannot run nebula\n  # NOTE: The nebula certificate of the "via" node *MUST* have the "route" defined as a subnet in its certificate\n  unsafe_routes:\n    #- route: 172.16.1.0/24\n    #  via: 192.168.100.99\n    #  mtu: 1300 #mtu will default to tun mtu if this option is not sepcified\n\n\n# TODO\n# Configure logging level\nlogging:\n  # panic, fatal, error, warning, info, or debug. Default is info\n  level: info\n  # json or text formats currently available. Default is text\n  format: text\n  # Disable timestamp logging. useful when output is redirected to logging system that already adds timestamps. Default is false\n  #disable_timestamp: true\n  # timestamp format is specified in Go time format, see:\n  #     https://golang.org/pkg/time/#pkg-constants\n  # default when `format: json`: "2006-01-02T15:04:05Z07:00" (RFC3339)\n  # default when `format: text`:\n  #     when TTY attached: seconds since beginning of execution\n  #     otherwise: "2006-01-02T15:04:05Z07:00" (RFC3339)\n  # As an example, to log as RFC3339 with millisecond precision, set to:\n  #timestamp_format: "2006-01-02T15:04:05.000Z07:00"\n\n#stats:\n  #type: graphite\n  #prefix: nebula\n  #protocol: tcp\n  #host: 127.0.0.1:9999\n  #interval: 10s\n\n  #type: prometheus\n  #listen: 127.0.0.1:8080\n  #path: /metrics\n  #namespace: prometheusns\n  #subsystem: nebula\n  #interval: 10s\n\n  # enables counter metrics for meta packets\n  #   e.g.: `messages.tx.handshake`\n  # NOTE: `message.{tx,rx}.recv_error` is always emitted\n  #message_metrics: false\n\n  # enables detailed counter metrics for lighthouse packets\n  #   e.g.: `lighthouse.rx.HostQuery`\n  #lighthouse_metrics: false\n\n# Handshake Manger Settings\n#handshakes:\n  # Total time to try a handshake = sequence of `try_interval * retries`\n  # With 100ms interval and 20 retries it is 23.5 seconds\n  #try_interval: 100ms\n  #retries: 20\n  # wait_rotation is the number of handshake attempts to do before starting to try non-local IP addresses\n  #wait_rotation: 5\n  # trigger_buffer is the size of the buffer channel for quickly sending handshakes\n  # after receiving the response for lighthouse queries\n  #trigger_buffer: 64\n\n# \u9632\u706B\u5899\u5B89\u5168\u914D\u7F6E\n# \u8FDB\u51FA\u89C4\u5219\u9ED8\u8BA4 deny - \u6240\u6709\u914D\u7F6E\u90FD\u662F\u914D\u7F6E\u5141\u8BB8\n# \u5339\u914D\u903B\u8F91 port AND proto AND (ca_sha OR ca_name) AND (host OR group OR groups OR cidr)\nfirewall:\n  conntrack:\n    tcp_timeout: 12m\n    udp_timeout: 3m\n    default_timeout: 10m\n    max_connections: 100000\n\n  outbound:\n    # \u5141\u8BB8\u6240\u6709\u51FA\u53BB\u6D41\u91CF\n    - port: any\n      proto: any\n      host: any\n\n    # 0, any, 80, 1000-200, fragment\n  - port: any\n    # \u7C7B\u4F3C port \u4F46\u5728 ICMP \u8FD9\u6837\u7684\u534F\u8BAE\u4E2D\u4F7F\u7528 code \u66F4\u5408\u7406 - \u76EE\u524D\u672A\u5B9E\u73B0\n    code: any\n    # tcp, udp, icmp\n    proto: any\n    # \u4E3B\u673A\u540D - test-host\n    host: any\n    # \u5728\u8BC1\u4E66\u4E2D\u5305\u542B\u7684\u5206\u7EC4\n    group: any\n    # \u7B49\u540C\u4E8E group, \u4F46\u652F\u6301\u591A\u4E2A\u503C, \u8981\u6C42\u90FD\u5339\u914D\n    groups: []\n    # \u5730\u5740\u9650\u5B9A\n    cidr: 0.0.0.0/0\n  #   ca_name: An issuing CA name\n  #   ca_sha: An issuing CA shasum\n\n  inbound:\n    # \u5141\u8BB8 ICMP - \u80FD Ping\n    - port: any\n      proto: icmp\n      host: any\n\n    # Allow tcp/443 from any host with BOTH laptop and home group\n    - port: 443\n      proto: tcp\n      groups:\n        - laptop\n        - home\n'})}),"\n",(0,a.jsx)(n.h2,{id:"nat",children:"NAT"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/slackhq/nebula/issues/33",children:"slackhq/nebula#33"})}),"\n"]})]})}function c(e={}){let{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},17776:function(e,n,t){t.d(n,{R:()=>i,x:()=>l});var s=t(7378);let a={},o=s.createContext(a);function i(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);