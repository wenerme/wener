"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["24953"],{19298:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>i,toc:()=>o,default:()=>m,metadata:()=>a,assets:()=>c,contentTitle:()=>l});var a=JSON.parse('{"id":"devops/service/kuma","title":"Kuma","description":"- Built by Envoy contributors at Kong","source":"@site/../notes/devops/service/kuma.md","sourceDirName":"devops/service","slug":"/devops/service/kuma","permalink":"/notes/devops/service/kuma","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/devops/service/kuma.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1630662479000,"frontMatter":{"id":"kuma","title":"Kuma"},"sidebar":"docs","previous":{"title":"krakend","permalink":"/notes/devops/service/krakend"},"next":{"title":"Linkerd \u5E38\u89C1\u95EE\u9898","permalink":"/notes/devops/service/linkerd-faq"}}'),r=t(86106),s=t(17776);let i={id:"kuma",title:"Kuma"},l="Kuma",c={},o=[{value:"kuma k8s",id:"kuma-k8s",level:2},{value:"\u5378\u8F7D",id:"\u5378\u8F7D",level:3},{value:"docker",id:"docker",level:2},{value:"kumactl",id:"kumactl",level:2},{value:"\u8BC1\u4E66\u914D\u7F6E",id:"\u8BC1\u4E66\u914D\u7F6E",level:2},{value:"\u914D\u7F6E",id:"\u914D\u7F6E",level:2},{value:"\u7F51\u7EDC",id:"\u7F51\u7EDC",level:2}];function d(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"kuma",children:"Kuma"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Built by Envoy contributors at Kong"}),"\n",(0,r.jsxs)(e.li,{children:["\u7279\u6027\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"UI \u7BA1\u7406"}),"\n",(0,r.jsxs)(e.li,{children:["\u652F\u6301\u975E K8S \u73AF\u5883\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"DP CP \u72EC\u7ACB"}),"\n",(0,r.jsx)(e.li,{children:"Docker"}),"\n",(0,r.jsx)(e.li,{children:"Linux"}),"\n",(0,r.jsx)(e.li,{children:"CP \u8FD0\u884C\u4E3A Universal \u6A21\u5F0F - \u914D\u7F6E\u5B58\u50A8\u5230 PostgreSQL"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"\u652F\u6301 K8S CRDs \u63A7\u5236"}),"\n",(0,r.jsx)(e.li,{children:"\u652F\u6301\u591A Zone - \u96C6\u7FA4"}),"\n",(0,r.jsx)(e.li,{children:"\u652F\u6301 http\u3001http2\u3001grpc\u3001tcp"}),"\n",(0,r.jsxs)(e.li,{children:["Mesh\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u652F\u6301\u591A Mesh"}),"\n",(0,r.jsx)(e.li,{children:"\u5E38\u89C1\u5212\u5206 - \u4E1A\u52A1\u4EA7\u7EBF\u3001\u56E2\u961F\u3001\u5E94\u7528\u3001\u73AF\u5883"}),"\n",(0,r.jsx)(e.li,{children:"\u7F51\u7EDC\u3001\u7B56\u7565\u9694\u79BB"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["mtls\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u542F\u7528\u540E\u9700\u8981\u914D\u7F6E\u6743\u9650"}),"\n",(0,r.jsx)(e.li,{children:"\u652F\u6301 \u5185\u5EFA\u3001\u624B\u52A8\u3001vault CA"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["traffic permission\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u4F9D\u8D56 mtls \u5B9E\u73B0"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["traffic routing\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"L4"}),"\n",(0,r.jsx)(e.li,{children:"\u9ED8\u8BA4\u8F6E\u8BAD"}),"\n",(0,r.jsx)(e.li,{children:"\u652F\u6301\u6743\u91CD"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["health check\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u4E3B\u52A8 - dp \u53D1\u8D77\u8BF7\u6C42"}),"\n",(0,r.jsx)(e.li,{children:"\u88AB\u52A8 - cp \u5206\u6790\u8BF7\u6C42"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["traffic log\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5199\u5165\u5230 TCP - logstash"}),"\n",(0,r.jsx)(e.li,{children:"\u5199\u5165\u5230 \u6587\u4EF6"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["traffic trace\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"zipkin \u534F\u8BAE"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["traffic metrics\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Prometheus /metrics"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Fault Injection\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u9519\u8BEF\u6CE8\u5165"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"Circuit Breaker"}),"\n",(0,r.jsxs)(e.li,{children:["Proxy Template\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u914D\u7F6E envoy"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Data Plane\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u57FA\u4E8E Envoy"}),"\n",(0,r.jsx)(e.li,{children:"L4/L7"}),"\n",(0,r.jsx)(e.li,{children:"Service Dataplane"}),"\n",(0,r.jsx)(e.li,{children:"Gateway Dataplane"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Control Plane - Kuma\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Admin API - 5679"}),"\n",(0,r.jsxs)(e.li,{children:["\u540E\u7AEF\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u9ED8\u8BA4 ",(0,r.jsx)(e.code,{children:"KUMA_STORE_TYPE=memory"})]}),"\n",(0,r.jsx)(e.li,{children:"\u652F\u6301 kubernetes\u3001postgres"}),"\n",(0,r.jsxs)(e.li,{children:["\u6267\u884C ",(0,r.jsx)(e.code,{children:"kuma-cp migrate up"})," \u521B\u5EFA pg \u6570\u636E\u5E93"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Kuma DNS\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:":5653"})}),"\n",(0,r.jsx)(e.li,{children:"IP \u8303\u56F4 240.0.0.0/4"}),"\n",(0,r.jsx)(e.li,{children:"\u9ED8\u8BA4 tld mesh"}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"curl http://echo-server_echo-example_svc_1010.mesh"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://kuma.io/docs/latest/documentation/deployments/#standalone-mode",children:"\u90E8\u7F72\u6A21\u5F0F"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"standalone - \u9ED8\u8BA4\u6A21\u5F0F\uFF0C\u5E73\u53F0\u7F51\u7EDC"}),"\n",(0,r.jsx)(e.li,{children:"multi-zone - \u652F\u6301 k8s \u591A\u96C6\u7FA4\u548C\u57FA\u4E8E vm \u7684\u6A21\u5F0F"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\u73AF\u5883\u53D8\u91CF\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"KUMA_DATAPLANE_ADMIN_PORT"}),"\n",(0,r.jsxs)(e.li,{children:["KUMA_CONTROL_PLANE_API_SERVER_URL=",(0,r.jsx)(e.a,{href:"http://kuma-control-plane:5681",children:"http://kuma-control-plane:5681"})]}),"\n",(0,r.jsx)(e.li,{children:"KUMA_DATAPLANE_ADMIN_PORT"}),"\n",(0,r.jsx)(e.li,{children:"KUMA_ADMIN_SERVER_LOCAL_PORT=5679"}),"\n",(0,r.jsx)(e.li,{children:"KUMA_ADMIN_SERVER_PUBLIC_PORT"}),"\n",(0,r.jsx)(e.li,{children:"KUMA_ADMIN_SERVER_PUBLIC_INTERFACE"}),"\n",(0,r.jsx)(e.li,{children:"KUMA_ADMIN_SERVER_PUBLIC_CLIENT_CERTS_DIR"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://kuma.io/docs/latest/documentation/security",children:"security"})}),"\n",(0,r.jsxs)(e.li,{children:["\u53C2\u8003\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.youtube.com/watch?v=Bu0-y9h8V5w",children:"Webinar: Kuma: Service Mesh and the Future of Application Connectivity"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"kuma-k8s",children:"kuma k8s"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"brew install kumactl\n\nver=0.7.1\n# \u4F7F\u7528\u79C1\u6709\u4ED3\u5E93\n# registry-vpc.cn-hongkong.aliyuncs.com/cmi\ncat <<IMAGES | xargs -n1 -I {} sh -c 'docker pull kong-docker-kuma-docker.bintray.io/{}; docker tag kong-docker-kuma-docker.bintray.io/{} registry-vpc.cn-hongkong.aliyuncs.com/cmi/{}; docker push registry-vpc.cn-hongkong.aliyuncs.com/cmi/{}'\nkuma-cp:0.7.1\nkuma-dp:0.7.1\nkumactl:0.7.1\nkuma-prometheus-sd:0.7.1\nkuma-init:0.7.1\nIMAGES\n\n# docker \u955C\u50CF\n# kong-docker-kuma-docker.bintray.io/kuma-cp:0.7.1\n# kong-docker-kuma-docker.bintray.io/kuma-dp:0.7.1\n# kong-docker-kuma-docker.bintray.io/kumactl:0.7.1\n# kong-docker-kuma-docker.bintray.io/kuma-prometheus-sd:0.7.1\n# kong-docker-kuma-docker.bintray.io/kuma-init:0.7.1\n\n# \u9ED8\u8BA4\u5B89\u88C5\u5230 kuma-system\n# --control-plane-version 0.7.1\n# --control-plane-image kong-docker-kuma-docker.bintray.io/kuma-cp\n# --dataplane-image kong-docker-kuma-docker.bintray.io/kuma-dp\n# --dataplane-init-image kong-docker-kuma-docker.bintray.io/kuma-init\nkumactl install control-plane \\\n  --control-plane-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-cp \\\n  --dataplane-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-dp \\\n  --dataplane-init-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-init \\\n  --control-plane-version 0.7.1 | kubectl apply -f -\n\nkubectl port-forward svc/kuma-control-plane -n kuma-system 5681:5681\n\necho \"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-demo\n  labels:\n    app: nginx-demo\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx-demo\n  template:\n    metadata:\n      name: nginx-demo\n      labels:\n        app: nginx-demo\n      annotations:\n        kuma.io/direct-access-services: '*'\n        kuma.io/mesh: default\n        kuma.io/sidecar-injected: 'true'\n        kuma.io/transparent-proxying: enabled\n        kuma.io/transparent-proxying-inbound-port: '15006'\n        kuma.io/transparent-proxying-outbound-port: '15001'\n    spec:\n      containers:\n      - name: nginx-demo\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\" | kubectl apply -f -\n\necho \"\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-demo\n  namespace: default\n  annotations:\n    80.service.kuma.io/protocol: http\n    ingress.kubernetes.io/service-upstream: 'true'\nspec:\n  selector:\n    app: nginx\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\" | kubectl apply -f -\n\n# \u7A7A\u95F4\u6DFB\u52A0\u6CE8\u5165\necho \"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: default\n  namespace: default\n  labels:\n    kuma.io/sidecar-injection: enabled\n    kuma.io/mesh: default\" | kubectl apply -f - && kubectl delete pod --all -n default\n\n# default mesh \u542F\u7528 mtls\necho \"apiVersion: kuma.io/v1alpha1\nkind: Mesh\nmetadata:\n  name: default\nspec:\n  mtls:\n    enabledBackend: ca-1\n    backends:\n    - name: ca-1\n      type: builtin\" | kubectl apply -f -\n\n# metrics\nkumactl install metrics \\\n  --kuma-prometheus-sd-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-prometheus-sd \\\n  --kuma-prometheus-sd-version 0.7.1 | kubectl apply -f -\n\necho \"apiVersion: kuma.io/v1alpha1\nkind: Mesh\nmetadata:\n  name: default\nspec:\n  mtls:\n    enabledBackend: ca-1\n    backends:\n    - name: ca-1\n      type: builtin\n  metrics:\n    enabledBackend: prometheus-1\n    backends:\n    - name: prometheus-1\n      type: prometheus\" | kubectl apply -f -\n\nkubectl port-forward svc/grafana -n kuma-metrics 3000:80\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u5378\u8F7D",children:"\u5378\u8F7D"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"kumactl install metrics \\\n  --kuma-prometheus-sd-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-prometheus-sd \\\n  --kuma-prometheus-sd-version 0.7.1 | kubectl delete -f -\n\nkumactl install control-plane \\\n  --control-plane-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-cp \\\n  --dataplane-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-dp \\\n  --dataplane-init-image registry.cn-hongkong.aliyuncs.com/cmi/kuma-init \\\n  --control-plane-version 0.7.1 | kubectl delete -f -\n"})}),"\n",(0,r.jsx)(e.h2,{id:"docker",children:"docker"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5355 docker \u90E8\u7F72"}),"\n",(0,r.jsx)(e.li,{children:"\u7C7B\u4F3C\u4E8E vm \u90E8\u7F72"}),"\n",(0,r.jsx)(e.li,{children:"multi-zone \u6A21\u5F0F"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \u6784\u5EFA\u73AF\u5883\n# ==========\ndocker run -u $(id -u) --rm -it -v $PWD:/host kong-docker-kuma-docker.bintray.io/kumactl:0.7.1 cp /usr/bin/kumactl /host\ndocker run -u $(id -u) --rm -it -v $PWD:/host --entrypoint sh kong-docker-kuma-docker.bintray.io/kuma-cp:0.7.1 -c 'cp /usr/bin/kuma-cp /host'\n\ncat <<EOF > Dockerfile\nFROM kong-docker-kuma-docker.bintray.io/kuma-dp:0.7.1\n\nCOPY kumactl /usr/bin/\nCOPY kuma-cp /usr/bin/\n\nENTRYPOINT [ \"/bin/sh\" ]\nEOF\n\ndocker build -t kuma .\n\n# http://localhost:5681/gui/\ndocker run --rm -it \\\n  -p 5681:5681 \\\n  -p 8080:8080 \\\n  -w /tmp/kuma \\\n  -u 0 \\\n  --name kuma kuma\n\n# \u542F\u52A8 kuma\nkuma-cp run &\n\nkumactl get meshes\n\n# enable mtls\necho \"type: Mesh\nname: default\nmtls:\n  enabledBackend: ca-1\n  backends:\n  - name: ca-1\n    type: builtin\" | kumactl apply -f -\n\n# \u5141\u8BB8\u6240\u6709\u8BBF\u95EE\ncat <<EOF | kumactl apply -f -\ntype: TrafficPermission\nname: permission-all\nmesh: default\nsources:\n  - match:\n      kuma.io/service: '*'\ndestinations:\n  - match:\n      kuma.io/service: '*'\nEOF\n\n# create dp\necho \"type: Dataplane\nmesh: default\nname: web-dp\nnetworking:\n  address: 127.0.0.1\n  inbound:\n    - port: 80\n      servicePort: 8080\n      tags:\n        kuma.io/service: web\n        kuma.io/protocol: http\" | kumactl apply -f -\n# generate dp token\nkumactl generate dataplane-token --dataplane=web-dp > kuma-token-web-dp\n\n# start dp\nkuma-dp run --name web-dp --mesh=default --dataplane-token-file=kuma-token-web-dp\n"})}),"\n",(0,r.jsx)(e.h2,{id:"kumactl",children:"kumactl"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"#\ncat <<EOF | kumactl apply -f -\ntype: Mesh\nname: default\nmtls:\n  enabledBackend: ca-1\n  backends:\n  - name: ca-1\n    type: builtin\nmetrics:\n  enabledBackend: prometheus-1\n  backends:\n  - name: prometheus-1\n    type: prometheus\nEOF\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u8BC1\u4E66\u914D\u7F6E",children:"\u8BC1\u4E66\u914D\u7F6E"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'alias kumactl="docker run --rm -i -v $PWD:/host -u 1000 -w /host -v $HOME/.kumactl:/.kumactl --net=host kong-docker-kuma-docker.bintray.io/kumactl:0.7.1 kumactl"\n\n# KUMA_ADMIN_SERVER_PUBLIC_CLIENT_CERTS_DIR\nkumactl generate tls-certificate \\\n  --cert-file=server-cert \\\n  --key-file=server-key \\\n  --type=server --cp-hostname=localhost\n\n# https://kuma.io/docs/0.7.1/documentation/security/#universal\n# https://kuma.io/docs/0.7.1/installation/docker/\n# localhost:5681/gui\n# KUMA_GENERAL_ADVERTISED_HOSTNAME\ndocker run --rm -it \\\n  -p 5681:5681 \\\n  -p 15679:15679 \\\n  -v $PWD:/host \\\n  -e KUMA_ADMIN_SERVER_PUBLIC_ENABLED=true \\\n  -e KUMA_ADMIN_SERVER_PUBLIC_TLS_CERT_FILE=/host/server-cert \\\n  -e KUMA_ADMIN_SERVER_PUBLIC_TLS_KEY_FILE=/host/server-key \\\n  -e KUMA_ADMIN_SERVER_PUBLIC_INTERFACE=0.0.0.0 \\\n  -e KUMA_ADMIN_SERVER_PUBLIC_PORT=15679 \\\n  -e KUMA_ADMIN_SERVER_PUBLIC_CLIENT_CERTS_DIR=/host/certs \\\n  --name kuma-cp kong-docker-kuma-docker.bintray.io/kuma-cp:0.7.1 run\n\nkumactl get meshes\n# enable mtls\necho "type: Mesh\nname: default\nmtls:\n  enabledBackend: ca-1\n  backends:\n  - name: ca-1\n    type: builtin" | kumactl apply -f -\n\n# \u521B\u5EFA dp\necho "type: Dataplane\nmesh: default\nname: web-dp\nnetworking:\n  address: 192.168.1.1\n  inbound:\n    - port: 80\n      servicePort: 8080\n      tags:\n        kuma.io/service: web\n        kuma.io/protocol: http" | kumactl apply -f -\n\n\nkumactl generate tls-certificate --cert-file=client-cert --key-file=client-key --type=client\nkumactl config control-planes add \\\n  --name test --address http://172.17.0.1:5681 \\\n  --admin-client-cert server-cert \\\n  --admin-client-key server-key --overwrite\n\nkumactl generate dataplane-token --dataplane=web-dp > kuma-token-web-dp\n\nmkdir -p ~/.kumactl\ncat <<YAML > ~/.kumactl/config\ncontexts:\n- controlPlane: local\n  name: local\ncontrolPlanes:\n- coordinates:\n    apiServer:\n      url: http://172.17.0.1:5681\n  name: local\ncurrentContext: local\nYAML\n\n# \u542F\u52A8 dp\ndocker run --rm -it \\\n  -p 8080:8080 \\\n  --name kuma-dp kong-docker-kuma-docker.bintray.io/kuma-dp:0.7.1 \\\n  run --cp-address http://172.17.0.1:5681 --name web-dp --dataplane-token-file=\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u914D\u7F6E",children:"\u914D\u7F6E"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u9ED8\u8BA4 cp \u914D\u7F6E"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "adminServer": {\n    "apis": { "dataplaneToken": { "enabled": true } },\n    "local": { "port": 5679 },\n    "public": {\n      "clientCertsDir": "",\n      "enabled": false,\n      "interface": "",\n      "port": 0,\n      "tlsCertFile": "",\n      "tlsKeyFile": ""\n    }\n  },\n  "apiServer": {\n    "catalog": {\n      "bootstrap": { "url": "http://localhost:5682" },\n      "monitoringAssignment": { "url": "grpc://localhost:5676" },\n      "sds": { "url": "" }\n    },\n    "corsAllowedDomains": [".*"],\n    "port": 5681,\n    "readOnly": false\n  },\n  "bootstrapServer": {\n    "params": {\n      "adminAccessLogPath": "/dev/null",\n      "adminAddress": "127.0.0.1",\n      "adminPort": 0,\n      "xdsConnectTimeout": "1s",\n      "xdsHost": "localhost",\n      "xdsPort": 5678\n    },\n    "port": 5682\n  },\n  "dataplaneTokenServer": {\n    "enabled": true,\n    "local": { "port": 5679 },\n    "public": {\n      "clientCertsDir": "",\n      "enabled": false,\n      "interface": "",\n      "port": 0,\n      "tlsCertFile": "",\n      "tlsKeyFile": ""\n    }\n  },\n  "defaults": { "skipMeshCreation": false },\n  "dnsServer": { "CIDR": "240.0.0.0/4", "domain": "mesh", "port": 5653 },\n  "environment": "universal",\n  "general": { "advertisedHostname": "localhost" },\n  "guiServer": { "apiServerUrl": "" },\n  "metrics": { "dataplane": { "enabled": true, "subscriptionLimit": 10 } },\n  "mode": "standalone",\n  "monitoringAssignmentServer": {\n    "assignmentRefreshInterval": "1s",\n    "grpcPort": 5676\n  },\n  "multicluster": {\n    "global": {\n      "kds": {\n        "grpcPort": 5685,\n        "refreshInterval": "1s",\n        "tlsCertFile": "/tmp/676369516.crt",\n        "tlsKeyFile": "/tmp/334691547.key"\n      },\n      "pollTimeout": "500ms"\n    },\n    "remote": { "kds": { "refreshInterval": "1s", "rootCaFile": "" } }\n  },\n  "reports": { "enabled": true },\n  "runtime": {\n    "kubernetes": {\n      "admissionServer": { "address": "", "certDir": "", "port": 5443 },\n      "injector": {\n        "cniEnabled": false,\n        "initContainer": { "image": "kuma/kuma-init:latest" },\n        "sidecarContainer": {\n          "adminPort": 9901,\n          "drainTime": "30s",\n          "gid": 5678,\n          "image": "kuma/kuma-dp:latest",\n          "livenessProbe": {\n            "failureThreshold": 12,\n            "initialDelaySeconds": 60,\n            "periodSeconds": 5,\n            "timeoutSeconds": 3\n          },\n          "readinessProbe": {\n            "failureThreshold": 12,\n            "initialDelaySeconds": 1,\n            "periodSeconds": 5,\n            "successThreshold": 1,\n            "timeoutSeconds": 3\n          },\n          "redirectPortInbound": 15006,\n          "redirectPortOutbound": 15001,\n          "resources": {\n            "limits": { "cpu": "1000m", "memory": "512Mi" },\n            "requests": { "cpu": "50m", "memory": "64Mi" }\n          },\n          "uid": 5678\n        }\n      }\n    }\n  },\n  "sdsServer": {\n    "dataplaneConfigurationRefreshInterval": "1s",\n    "grpcPort": 5677,\n    "tlsCertFile": "/tmp/792743550.crt",\n    "tlsKeyFile": "/tmp/964085189.key"\n  },\n  "store": {\n    "cache": { "enabled": true, "expirationTime": "1s" },\n    "kubernetes": { "systemNamespace": "kuma-system" },\n    "postgres": {\n      "connectionTimeout": 5,\n      "dbName": "kuma",\n      "host": "127.0.0.1",\n      "maxOpenConnections": 0,\n      "password": "*****",\n      "port": 15432,\n      "tls": { "caPath": "", "certPath": "", "keyPath": "", "mode": "disable" },\n      "user": "kuma"\n    },\n    "type": "memory"\n  },\n  "xdsServer": {\n    "dataplaneConfigurationRefreshInterval": "1s",\n    "dataplaneStatusFlushInterval": "1s",\n    "diagnosticsPort": 5680,\n    "grpcPort": 5678,\n    "tlsCertFile": "",\n    "tlsKeyFile": ""\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u7F51\u7EDC",children:"\u7F51\u7EDC"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://kuma.io/docs/latest/documentation/networking",children:"https://kuma.io/docs/latest/documentation/networking"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Standalone Control Plane"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"port"}),(0,r.jsx)(e.th,{children:"protocol"}),(0,r.jsx)(e.th,{children:"desc"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5676"}),(0,r.jsx)(e.td,{children:"Monitoring Assignment server that responds to discovery requests from monitoring tools, such as Prometheus, that are looking for a list of targets to scrape metrics from, e.g. a list of all dataplanes in the mesh."}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5677"}),(0,r.jsx)(e.td,{children:"SDS server being used for propagating mTLS certificates across the data-planes."}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5678"}),(0,r.jsx)(e.td,{children:"xDS gRPC server implementation that the data-planes will use to retrieve their configuration."}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5679"}),(0,r.jsx)(e.td,{children:"Admin Server that serves Dataplane Tokens and manages Provided Certificate Authority"}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5680"}),(0,r.jsx)(e.td,{children:"HTTP server that returns the health status of the control-plane."}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5681"}),(0,r.jsx)(e.td,{children:"HTTP API server that is being used by kumactl, and that you can also use to retrieve Kuma's policies and - when running in universal - that you can use to apply new policies. It also exposes the Kuma GUI at /gui"}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5682"}),(0,r.jsx)(e.td,{children:"HTTP server that provides the Envoy bootstrap configuration when the data-plane starts up."}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5685"}),(0,r.jsx)(e.td,{children:"Kuma Discovery Service port, leveraged in Distributed control plane mode"}),(0,r.jsx)(e.td,{})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"5653/udp"}),(0,r.jsx)(e.td,{children:"Kuma DNS server"}),(0,r.jsx)(e.td,{})]})]})]})]})}function m(n={}){let{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},17776:function(n,e,t){t.d(e,{R:()=>i,x:()=>l});var a=t(7378);let r={},s=a.createContext(r);function i(n){let e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);