"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["61687"],{32882:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>d,default:()=>u,metadata:()=>s,assets:()=>l,contentTitle:()=>r});var s=JSON.parse('{"id":"voip/asterisk/asterisk-cdr","title":"Asterisk CDR","description":"- CDR - Call Detail Record - \u901A\u8BDD\u8BB0\u5F55","source":"@site/../notes/voip/asterisk/asterisk-cdr.md","sourceDirName":"voip/asterisk","slug":"/voip/asterisk/cdr","permalink":"/notes/voip/asterisk/cdr","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/voip/asterisk/asterisk-cdr.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1633860901000,"frontMatter":{"title":"Asterisk CDR"},"sidebar":"docs","previous":{"title":"Build Asterisk","permalink":"/notes/voip/asterisk/build"},"next":{"title":"Asterisk \u901A\u9053","permalink":"/notes/voip/asterisk/channel"}}'),i=t(86106),a=t(17776);let o={title:"Asterisk CDR"},r="Asterisk CDR",l={},d=[{value:"cdr.conf",id:"cdrconf",level:2},{value:"\u540E\u7AEF",id:"\u540E\u7AEF",level:3},{value:"sqlite3",id:"sqlite3",level:2}];function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"asterisk-cdr",children:"Asterisk CDR"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CDR - Call Detail Record - \u901A\u8BDD\u8BB0\u5F55"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cdrconf",children:"cdr.conf"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:"[general]\nenable=yes\n\n; \u672A\u54CD\u5E94\u7684\u547C\u53EB\u662F\u5426\u8BB0\u5F55\n; \u672A\u54CD\u5E94 - \u6CA1\u6709\u8BBE\u7F6E B \u7AEF\u901A\u9053 \u4F8B\u5982\u6CA1\u6709 Dial\n; \u9ED8\u8BA4 no\nunanswered = yes\n; \u662F\u5426\u8BB0\u5F55 \u62E5\u585E/congested \u547C\u53EB\n; \u9ED8\u8BA4 no\ncongestion = yes\n\n; \u9ED8\u8BA4\u5728\u8FD0\u884C\u5B8C extension \u540E\u8BB0\u5F55 cdr\n;endbeforehexten=no\n\n; billsec=end/hangup time - answer time\n; \u9ED8\u8BA4\u8BB0\u5F55\u4E3A\u79D2\uFF0C\u5185\u90E8\u8BB0\u5F55\u4E3A \u79D2+ms\uFF0C\u8BBE\u7F6E\u4E3A yes \u5219 Math.ceil\n;initiatedseconds=no\n\n; \u6279\u91CF\u5199\u5165 - \u53EF\u80FD\u4F1A\u4E22\u5931 cdr\n;batch=no\n; \u6279\u91CF\u7D2F\u8BA1\u5927\u5C0F\n;size=100\n; \u6279\u91CF\u7D2F\u8BA1\u65F6\u95F4 - \u5355\u4F4D \u79D2\n;time=300\n; \u6279\u91CF\u63D0\u4EA4\u65B9\u5F0F\n; \u5C0F\u6279\u91CF(size<10) \u53EF\u8BBE\u7F6E\u4E3A yes \u76F4\u63A5\u5728 scheduler \u7EBF\u7A0B\u63D0\u4EA4\n; \u5927\u6279\u91CF\u8BBE\u7F6E\u4E3A no \u5728\u65B0\u7EBF\u7A0B\u63D0\u4EA4\n;scheduleronly=no\n; \u505C\u6B62 asterisk \u65F6\u5148\u5199\u5165 cdr - cdr status \u53EF\u67E5\u770B\u8FDB\u5EA6\n;safeshutdown=yes\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u540E\u7AEF",children:"\u540E\u7AEF"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u652F\u6301\u540E\u7AEF csv, custom, manager, odbc, pgsql, radius, sqlite, tds, mysql"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:'; Some of the modules required to provide these backends will not build or install\n; unless some dependency requirements are met. Examples of this are pgsql, odbc,\n; etc. If you are not getting output as you would expect, the first thing to do\n; is to run the command "make menuselect", and check what modules are available,\n; by looking in the "2. Call Detail Recording" option in the main menu. If your\n; backend is marked with XXX, you know that the "configure" command could not find\n; the required libraries for that option.\n;\n; To get CDRs to be logged to the plain-jane /var/log/asterisk/cdr-csv/Master.csv\n; file, define the [csv] category in this file. No database necessary. The example\n; config files are set up to provide this kind of output by default.\n;\n; To get custom csv CDR records, make sure the cdr_custom.conf file\n; is present, and contains the proper [mappings] section. The advantage to\n; using this backend, is that you can define which fields to output, and in\n; what order. By default, the example configs are set up to mimic the cdr-csv\n; output. If you don\'t make any changes to the mappings, you are basically generating\n; the same thing as cdr-csv, but expending more CPU cycles to do so!\n;\n; To get manager events generated, make sure the cdr_manager.conf file exists,\n; and the [general] section is defined, with the single variable \'enabled = yes\'.\n;\n; For odbc, make sure all the proper libs are installed, that "make menuselect"\n; shows that the modules are available, and the cdr_odbc.conf file exists, and\n; has a [global] section with the proper variables defined.\n;\n; For pgsql, make sure all the proper libs are installed, that "make menuselect"\n; shows that the modules are available, and the cdr_pgsql.conf file exists, and\n; has a [global] section with the proper variables defined.\n;\n; For logging to radius databases, make sure all the proper libs are installed, that\n; "make menuselect" shows that the modules are available, and the [radius]\n; category is defined in this file, and in that section, make sure the \'radiuscfg\'\n; variable is properly pointing to an existing radiusclient.conf file.\n;\n; For logging to sqlite databases, make sure the \'cdr.db\' file exists in the log directory,\n; which is usually /var/log/asterisk. Of course, the proper libraries should be available\n; during the \'configure\' operation.\n;\n; For tds logging, make sure the proper libraries are available during the \'configure\'\n; phase, and that cdr_tds.conf exists and is properly set up with a [global] category.\n;\n; Also, remember, that if you wish to log CDR info to a database, you will have to define\n; a specific table in that databse to make things work! See the doc directory for more details\n; on how to create this table in each database.\n;\n\n[csv]\nusegmtime=yes    ; log date/time in GMT.  Default is "no"\nloguniqueid=yes  ; log uniqueid.  Default is "no"\nloguserfield=yes ; log user field.  Default is "no"\naccountlogs=yes  ; create separate log file for each account code. Default is "yes"\n;newcdrcolumns=yes ; Enable logging of post-1.8 CDR columns (peeraccount, linkedid, sequence).\n                   ; Default is "no".\n\n;[radius]\n;usegmtime=yes    ; log date/time in GMT\n;loguniqueid=yes  ; log uniqueid\n;loguserfield=yes ; log user field\n; Set this to the location of the radiusclient-ng configuration file\n; The default is /etc/radiusclient-ng/radiusclient.conf\n;radiuscfg => /usr/local/etc/radiusclient-ng/radiusclient.conf\n'})}),"\n",(0,i.jsx)(n.h2,{id:"sqlite3",children:"sqlite3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-conf",children:"; /var/log/asterisk/master.db\n[master]\ntable => cdr\ncolumns => calldate, clid, dcontext, channel, dstchannel, lastapp, lastdata, duration, billsec, disposition, amaflags, accountcode, uniqueid, userfield, test\nvalues => '${CDR(start)}','${CDR(clid)}','${CDR(dcontext)}','${CDR(channel)}','${CDR(dstchannel)}','${CDR(lastapp)}','${CDR(lastdata)}','${CDR(duration)}','${CDR(billsec)}','${CDR(disposition)}','${CDR(amaflags)}','${CDR(accountcode)}','${CDR(uniqueid)}','${CDR(userfield)}','${CDR(test)}'\nbusy_timeout => 1000\n"})})]})}function u(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},17776:function(e,n,t){t.d(n,{R:()=>o,x:()=>r});var s=t(7378);let i={},a=s.createContext(i);function o(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);