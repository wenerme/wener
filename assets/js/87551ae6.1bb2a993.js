"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["97566"],{32923:function(n,e,i){i.r(e),i.d(e,{frontMatter:()=>r,toc:()=>c,default:()=>u,metadata:()=>t,assets:()=>a,contentTitle:()=>o});var t=JSON.parse('{"id":"os/virt/libvirt/libvirtd","title":"Libvirt Daemon","description":"Tips","source":"@site/../notes/os/virt/libvirt/libvirtd.md","sourceDirName":"os/virt/libvirt","slug":"/os/virt/libvirt/libvirtd","permalink":"/notes/os/virt/libvirt/libvirtd","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/os/virt/libvirt/libvirtd.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1667482099000,"frontMatter":{"id":"libvirtd","title":"Libvirt Daemon"},"sidebar":"docs","previous":{"title":"Virsh","permalink":"/notes/os/virt/libvirt/virsh"},"next":{"title":"lima","permalink":"/notes/os/virt/lima"}}'),s=i(86106),l=i(17776);let r={id:"libvirtd",title:"Libvirt Daemon"},o="Libvirt Daemon",a={},c=[{value:"Tips",id:"tips",level:2},{value:"libvirt.conf",id:"libvirtconf",level:2},{value:"libvirtd.conf",id:"libvirtdconf",level:2}];function d(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"libvirt-daemon",children:"Libvirt Daemon"})}),"\n",(0,s.jsx)(e.h2,{id:"tips",children:"Tips"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"/var/run/libvirt/libvirt-sock"}),"\n",(0,s.jsx)(e.li,{children:"\u9ED8\u8BA4 tcp \u7AEF\u53E3 16509"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://gist.github.com/mcastelino/9a57d00ccf245b98de2129f0efe39857",children:"Simple vsock setup for QEMU"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"qemu:///session"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u907F\u514D\u4F7F\u7528\uFF0C\u5C3D\u91CF\u4F7F\u7528 system"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'virsh -c unix:///var/run/libvirt/libvirt-sock list\n\n# macOS\n# ==========\nbrew install libvirt\n\n# \u8C03\u6574\u914D\u7F6E\uFF0C\u5141\u8BB8\u7528\u6237\u76F4\u63A5\u64CD\u4F5C\n# unix_sock_group = "staff"\n# unix_sock_rw_perms = "0770"\nnano /usr/local/etc/libvirt/libvirtd.conf\n\n# \u542F\u52A8\u670D\u52A1\u7AEF\nsudo libvirtd -v\n# \u6216\u8005\u4F7F\u7528 brew \u8FDB\u884C\u670D\u52A1\u7BA1\u7406\nbrew services start libvirt\n\n# \u5BA2\u6237\u7AEF\u8FDE\u63A5\nvirsh -c qemu:///system list\n'})}),"\n",(0,s.jsx)(e.h2,{id:"libvirtconf",children:"libvirt.conf"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u5BA2\u6237\u7AEF\u914D\u7F6E"}),"\n",(0,s.jsxs)(e.li,{children:["\b\u5F53\u524D\u7528\u6237\u914D\u7F6E\u4F4D\u4E8E ",(0,s.jsx)(e.code,{children:"$XDG_CONFIG_HOME/libvirt/libvirt.conf"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u4E00\u822C ",(0,s.jsx)(e.code,{children:"XDG_CONFIG_HOME=$HOME/.config"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ini",children:'# \u94FE\u63A5\u522B\u540D\n#uri_aliases = [\n#  "hail=qemu+ssh://root@hail.cloud.example.com/system",\n#  "sleet=qemu+ssh://root@sleet.cloud.example.com/system",\n#]\n\n# \u9ED8\u8BA4\u94FE\u63A5\n#uri_default = "qemu:///system"\n'})}),"\n",(0,s.jsx)(e.h2,{id:"libvirtdconf",children:"libvirtd.conf"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://libvirt.org/format.html",children:"https://libvirt.org/format.html"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ini",children:'# Libvirtd Daemon \u7F51\u7EDC\u8FDE\u901A\u6027\u63A7\u5236\n# ====================\n# TLS \u76D1\u542C - \u5FC5\u987B\u8981\u6307\u5B9A --listen\n#listen_tls = 0\n\n# TCP \u76D1\u542C - \u672A\u52A0\u5BC6\uFF0C\u9700\u8981 --listen\n# \u9ED8\u8BA4\u9700\u8981 SASL \u8BA4\u8BC1 - DIGEST_MD5\u3001GSSAPI\n#listen_tcp = 1\n\n# TLS \u7AEF\u53E3\u6216\u670D\u52A1\u540D\n#tls_port = "16514"\n# TCP \u7AEF\u53E3\u6216\u670D\u52A1\u540D\n#tcp_port = "16509"\n\n# \u76D1\u542C\u5730\u5740 - \u9ED8\u8BA4\u76D1\u542C\u6240\u6709\n#listen_addr = "192.168.0.1"\n\n# mDNS \u5E7F\u64AD libvirt \u670D\u52A1 - \u914D\u5408 Host \u4E0A\u7684 Avahi daemon\n#mdns_adv = 1\n\n# mDNS \u670D\u52A1\u540D\u5B57 - \u9ED8\u8BA4 "Virtualization Host ${HOSTNAME}"\n#mdns_name = "Virtualization Host Joe Demo"\n\n# Libvirtd Daemon UNIX Socket \u8BBF\u95EE\u63A7\u5236\n# ====================\n# \u5206\u7EC4\u6743\u9650 - \u9ED8\u8BA4\u53EA\u5141\u8BB8 root\n# unix_sock_group = "libvirt"\n\n# \u53EA\u8BFB socket \u6743\u9650 - \u9ED8\u8BA4 0777\n# \u5982\u679C\u8BBE\u7F6E\u4E86\u5206\u7EC4\u6743\u9650\uFF0C\u4E5F\u53EF\u4EE5\u8003\u8651\u8BBE\u7F6E\u53EA\u8BFB\u6743\u9650\n#unix_sock_ro_perms = "0777"\n\n# \u8BFB\u5199 socket \u6743\u9650 - \u9ED8\u8BA4\u53EA\u6709 root\n# \u5982\u679C\u8BBE\u7F6E\u4E86\u5206\u7EC4\u6743\u9650\uFF0C\u5EFA\u8BAE\u8BBE\u7F6E\u4E3A 0700\n# \u5982\u679C\u6CA1\u6709\u4F7F\u7528 PolicyKit \u5219\u53EF\u4EE5\u8003\u8651\u653E\u677E\u6743\u9650\n# unix_sock_rw_perms = "0770"\n\n# \u7BA1\u7406 socket \u6743\u9650 - \u9ED8\u8BA4\u5141\u8BB8 owner\n#unix_sock_admin_perms = "0700"\n\n# socket \u8DEF\u5F84 - linux \u4E00\u822C\u9ED8\u8BA4\u4E3A /run/libvirt\n#unix_sock_dir = "/usr/local/var/run/libvirt"\n\n\n# \u8BA4\u8BC1\n# =====================\n# none - \u4E0D\u505A\u8BA4\u8BC1\u68C0\u67E5\uFF0C\u80FD\u8FDE\u63A5\u5C31\u80FD\u8BBF\u95EE - \u9002\u7528\u4E8E unix scoket \u573A\u666F\n# sasl - TCP GSSAPI & DIGEST-MD5 schema \u4E3A /usr/local/etc/sasl2/libvirt.conf - \u975E TCP \u4EFB\u4F55 schema \u90FD\u53EF\u4EE5\n# polkit - UNIX sockets \u65F6\n\n# \u53EA\u8BFB unix sockets \u8BA4\u8BC1\n#auth_unix_ro = "none"\n\n# \u8BFB\u5199 unix sockets \u8BA4\u8BC1\n#auth_unix_rw = "none"\n\n# tcp \u8BA4\u8BC1\u65B9\u5F0F - \u9ED8\u8BA4 sasl\n#auth_tcp = "sasl"\n\n# tls \u8BA4\u8BC1\u65B9\u5F0F - \u56E0\u4E3A tls \u901A\u8FC7\u52A0\u5BC6\u8BC1\u4E66\u5DF2\u7ECF\u8BA4\u8BC1\u4E86\uFF0C\u6240\u4EE5\u53EF\u4EE5\u5173\u95ED\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528 sasl\u3002\n#auth_tls = "none"\n\n# API \u8BBF\u95EE\u63A7\u5236 schema - \u9ED8\u8BA4\u542F\u7528\u4E86 \'nop\'\n#access_drivers = [ "polkit" ]\n\n# TLS x509 \u8BC1\u4E66\u914D\u7F6E\n# =====================\n# \u9ED8\u8BA4\u4F4D\u7F6E\n#   /usr/local/etc/pki/CA/cacert.pem                 - The CA master certificate\n#   /usr/local/etc/pki/libvirt/servercert.pem        - The server certificate signed with the cacert.pem\n#   /usr/local/etc/pki/libvirt/private/serverkey.pem - The server private key\n#\n# It is possible to override the default locations by altering the \'key_file\',\n# \'cert_file\', and \'ca_file\' values and uncommenting them below.\n#\n# NB, overriding the default of one location requires uncommenting and\n# possibly additionally overriding the other settings.\n#\n\n#key_file = "/usr/local/etc/pki/libvirt/private/serverkey.pem"\n#cert_file = "/usr/local/etc/pki/libvirt/servercert.pem"\n#ca_file = "/usr/local/etc/pki/CA/cacert.pem"\n#crl_file = "/usr/local/etc/pki/CA/crl.pem"\n\n# \u9274\u6743\u63A7\u5236\n# =====================\n# Flag to disable verification of our own server certificates\n#\n# When libvirtd starts it performs some sanity checks against\n# its own certificates.\n#\n# Default is to always run sanity checks. Uncommenting this\n# will disable sanity checks which is not a good idea\n#tls_no_sanity_certificate = 1\n\n# Flag to disable verification of client certificates\n#\n# Client certificate verification is the primary authentication mechanism.\n# Any client which does not present a certificate signed by the CA\n# will be rejected.\n#\n# Default is to always verify. Uncommenting this will disable\n# verification - make sure an IP whitelist is set\n#tls_no_verify_certificate = 1\n\n\n# A whitelist of allowed x509 Distinguished Names\n# This list may contain wildcards such as\n#\n#    "C=GB,ST=London,L=London,O=Red Hat,CN=*"\n#\n# See the POSIX fnmatch function for the format of the wildcards.\n#\n# NB If this is an empty list, no client can connect, so comment out\n# entirely rather than using empty list to disable these checks\n#\n# By default, no DN\'s are checked\n#tls_allowed_dn_list = ["DN1", "DN2"]\n\n\n# A whitelist of allowed SASL usernames. The format for username\n# depends on the SASL authentication mechanism. Kerberos usernames\n# look like username@REALM\n#\n# This list may contain wildcards such as\n#\n#    "*@EXAMPLE.COM"\n#\n# See the POSIX fnmatch function for the format of the wildcards.\n#\n# NB If this is an empty list, no client can connect, so comment out\n# entirely rather than using empty list to disable these checks\n#\n# By default, no Username\'s are checked\n#sasl_allowed_username_list = ["joe@EXAMPLE.COM", "fred@EXAMPLE.COM" ]\n\n\n# Override the compile time default TLS priority string. The\n# default is usually "NORMAL" unless overridden at build time.\n# Only set this is it is desired for libvirt to deviate from\n# the global default settings.\n#\n#tls_priority="NORMAL"\n\n\n# \u8FDB\u7A0B\u63A7\u5236\n# =====================\n# \u5BA2\u6237\u7AEF\u8FDE\u63A5\u6570\n#max_clients = 5000\n\n# \u6700\u5927\u7B49\u5F85\u7684\u5BA2\u6237\u7AEF\u6570\n#max_queued_clients = 1000\n\n# \u6700\u5927\u533F\u540D\u5BA2\u6237\u7AEF\u6570 - \u8BBE\u7F6E\u4E3A 0 \u53EF\u7981\u7528\n#max_anonymous_clients = 20\n\n# \u8FDB\u7A0B\u6570 - \u4E00\u822C\u5C06\u6700\u5927\u503C\u8BBE\u7F6E\u4E3A\u6700\u5927\u5141\u8BB8\u7684\u5BA2\u6237\u7AEF\u6570\n#min_workers = 5\n#max_workers = 20\n\n# \u4F18\u5148 worker \u6570 - \u4F8B\u5982 domainDestroy \u4F1A\u4F18\u5148\n#prio_workers = 5\n\n# \u5355\u4E2A\u5BA2\u6237\u7AEF\u5E76\u884C\u8BF7\u6C42\u6570\n#max_client_requests = 5\n\n# \u7BA1\u7406\u63A5\u53E3\u8FDB\u7A0B\u63A7\u5236\n#admin_min_workers = 1\n#admin_max_workers = 5\n#admin_max_clients = 5\n#admin_max_queued_clients = 5\n#admin_max_client_requests = 5\n\n# \u65E5\u5FD7\u63A7\u5236\n# =====================\n# \u7EA7\u522B: 4 errors, 3 warnings, 2 information, 1 debug\n# journald \u53EA\u5141\u8BB8 3\u30014\n# \u4E0D\u5EFA\u8BAE\u8BBE\u7F6E\u4E3A 1\n#log_level = 3\n\n# \u65E5\u5FD7\u8FC7\u6EE4\uFF0C\u8C03\u6574\u5339\u914D\u7684\u65E5\u5FD7\u7EA7\u522B:\n#    level:match\n#    level:+match\n# \u5206\u7C7B\u4F8B\u5982 "remote", "qemu", "util.json"\uFF0C \u4F7F\u7528 glob \u5339\u914D\uFF0C \u6709 + \u4F1A\u8F93\u51FA\u5806\u6808\n# \u7A7A\u683C\u5206\u5272\u8BBE\u7F6E\u591A\u4E2A\u89C4\u5219\uFF0C\u4F46\u5339\u914D\u7B2C\u4E00\u4E2A\n#\n# \u4F8B\u5982 debug qemu \u548C hypervisor \u9A71\u52A8\u573A\u666F\n#log_filters="1:qemu 1:libvirt 4:object 4:json 4:event 1:util"\n\n# \u65E5\u5FD7\u8F93\u51FA:\n#    level:stderr\n#    level:syslog:name - name \u4F5C\u4E3A ident\n#    level:file:file_path\n#    level:journald\n# \u7A7A\u683C\u5206\u5272\u8BBE\u7F6E\u591A\u4E2A\n#log_outputs="3:syslog:libvirtd"\n\n# \u5BA1\u8BA1\n# =====================\n# audit \u5B50\u7CFB\u7EDF\n#   audit_level == 0  -> \u7981\u7528\n#   audit_level == 1  -> \u542F\u7528,\u5BBF\u4E3B\u673A(\u9ED8\u8BA4)\n#   audit_level == 2  -> \u542F\u7528, and exit if disabled on host\n#\n#audit_level = 2\n#\n# \u8BBE\u7F6E\u4E3A 1 \u5219\u4E5F\u53EF\u4EE5\u8F93\u51FA\u5230\u65E5\u5FD7 - \u9ED8\u8BA4 0\n#audit_logging = 1\n\n# \u4E3B\u673A ID\n# =====================\n# \u9ED8\u8BA4\u4F7F\u7528 host_uuid_source.\n#\n# - \'smbios\': \'dmidecode -s system-uuid\'\n# - \'machine-id\': /usr/local/etc/machine-id\n#\n# \u5982\u679C dmidecode \u6CA1\u6709\u83B7\u53D6\u5230\u5219\u4F1A\u751F\u6210\u4E34\u65F6\u7684\n\n# \u76F4\u63A5\u8BBE\u7F6E\n#host_uuid = "00000000-0000-0000-0000-000000000000"\n#host_uuid_source = "smbios"\n\n# Keepalive \u534F\u8BAE\n# =====================\n# \u68C0\u6D4B\u4E2D\u65AD\u7684\u6216\u5DF2\u65AD\u5F00\u7684\u5BA2\u6237\u7AEF\n#\n# \u53D1\u9001 keepalive \u6D88\u606F\u95F4\u9694 - \u8BBE\u7F6E\u4E3A -1 \u5219\u4E0D\u53D1\u9001\n#keepalive_interval = 5\n# \u6700\u5927\u5931\u8D25\u6570\u91CF - \u6700\u957F\u68C0\u6D4B\u65F6\u95F4\u4E3A keepalive_interval * (keepalive_count + 1)\n# \u8BBE\u7F6E\u4E3A 0 \u5219\u8FBE\u5230\u95F4\u9694\u540E\u76F4\u63A5\u65AD\u5F00\n#keepalive_count = 5\n\n# \u4E0D\u518D\u4F7F\u7528\n#keepalive_required = 1\n#admin_keepalive_required = 1\n\n# \u7BA1\u7406\u63A5\u53E3\n#admin_keepalive_interval = 5\n#admin_keepalive_count = 5\n\n# Open vSwitch:\n# =====================\n# ovs \u4EA4\u4E92\u8D85\u65F6\u65F6\u95F4 - ovs-vsctl\n#ovs_timeout = 5\n'})})]})}function u(n={}){let{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},17776:function(n,e,i){i.d(e,{R:()=>r,x:()=>o});var t=i(7378);let s={},l=t.createContext(s);function r(n){let e=t.useContext(l);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);