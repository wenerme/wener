"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["138"],{35062:function(n,e,t){t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var s=t(68437),r=t(86106),i=t(17776);let l={title:"Redis \u6D41\u7B80\u4ECB",slug:"redis-stream-intro",tags:["Java","\u963F\u91CC","Redis"]},c,a={authorsImageUrls:[]},d=[{value:"\u6982\u8FF0",id:"\u6982\u8FF0",level:2},{value:"\u73AF\u5883\u51C6\u5907",id:"\u73AF\u5883\u51C6\u5907",level:2},{value:"\u547D\u4EE4\u5217\u8868",id:"\u547D\u4EE4\u5217\u8868",level:2},{value:"\u547D\u4EE4\u4EA4\u4E92",id:"\u547D\u4EE4\u4EA4\u4E92",level:2},{value:"Java \u4EA4\u4E92",id:"java-\u4EA4\u4E92",level:2},{value:"\u603B\u7ED3",id:"\u603B\u7ED3",level:2}];function o(n){let e={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"\u6982\u8FF0",children:"\u6982\u8FF0"}),"\n",(0,r.jsx)(e.p,{children:"\u5BF9 Redis \u7684\u5370\u8C61\u53EF\u80FD\u5F88\u591A\u4EBA\u90FD\u8FD8\u53EA\u505C\u7559\u5728 2.8 \u7684\u9636\u6BB5\uFF0C\u4E00\u4E2A\u7ED3\u6784\u5316\u7684\u5185\u5B58\u5B58\u50A8\uFF08\u55EF\uFF0C\u597D\u50CF\u4E5F\u6CA1\u4EC0\u4E48\u95EE\u9898\uFF09\u3002\u867D\u7136\u8DDD\u79BB 4.0 \u53D1\u5E03(2017.7.14)\u5DF2\u7ECF\u4E00\u5E74\u8FC7\u53BB\u4E86\uFF0C\u4F46\u76F8\u4FE1\u5F88\u591A\u4EBA\u5DF2\u7ECF\u4E0D\u518D\u53BB\u5173\u5FC3 Redis \u7684\u65B0\u7279\u6027\u4E86\uFF0C\u56E0\u4E3A\u4ECE 2.8 \u540E\u7684 Redis \u5DF2\u7ECF\u8DB3\u591F\u597D\u7528\u4E86\u3002\u{1F604}"}),"\n",(0,r.jsx)(e.p,{children:"Redis 3.0 \u6DFB\u52A0\u4E86\u96C6\u7FA4\u7684\u80FD\u529B\uFF0C4.0 \u6DFB\u52A0\u4E86\u6A21\u5757\u5316\u80FD\u529B\uFF0C5.0 \u6DFB\u52A0\u4E86\u6D41\u7C7B\u578B\u3002\u5982\u679C\u8BF4 3.0 \u548C 4.0 \u6DFB\u52A0\u7684\u65B0\u7279\u6027\u5BF9\u4E8E\u4E00\u822C\u7528\u6237\u6765\u8BF4\u65E0\u8DB3\u8F7B\u91CD\uFF0C\u90A3 5.0 \u65B0\u7684\u6D41\u7C7B\u578B\u5C31\u4E0D\u53EF\u5FFD\u89C6\u5566\uFF01"}),"\n",(0,r.jsx)(e.p,{children:"\u5728\u6CA1\u6709 Stream \u7C7B\u578B\u4E4B\u524D\uFF0C\u5176\u5B9E Redis \u4E5F\u652F\u6301\u5404\u79CD\u7C7B\u4F3C\u4E8E\u6D41\u7684\u5904\u7406\u6A21\u5F0F\uFF0C\u4F8B\u5982 Fire and forget \u6A21\u5F0F\u7684 Pub/Sub\uFF0C\u963B\u585E\u961F\u5217 BLPOP\uFF0C\u65F6\u95F4\u5E8F\u5217 zsort \u5B58\u50A8\uFF0C\u7B49\u5404\u79CD\u65B9\u5F0F\u90FD\u80FD\u6A21\u62DF\u7C7B\u4F3C\u7684\u573A\u666F\uFF0C\u4F46\u5374\u90FD\u89C9\u5F97\u6709\u70B9\u6B20\u7F3A\uFF0C\u7EC8\u4E8E\uFF0C\u6D41\u7C7B\u578B\u6210\u529F\u7684\u89E3\u51B3\u4E86\u4EE5\u4E0A\u6240\u6709\u95EE\u9898\uFF0C\u5E76\u80FD\u652F\u6301\u5176\u4ED6\u7684\u5E38\u89C1\u4F7F\u7528\u573A\u666F\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u8BF4\u5230\u6D41\u6D88\u606F\u5C31\u4E0D\u5F97\u4E0D\u8BF4\u5230 Kafka \u5566\uFF0C\u6211\u76F8\u4FE1\u5927\u5BB6\u5E94\u8BE5\u90FD\u542C\u8BF4\u8FC7\u6D88\u606F\u4E2D\u95F4\u4EF6 Kafka\uFF0C\u81F3\u4E8E RocketMQ \u6216\u8005 MetaQ \u5C31\u4E0D\u518D\u8D58\u8FF0\u4ED6\u4EEC\u4E0E Kafka \u7684\u5173\u7CFB\u5566\uFF0CRedis \u4F5C\u8005\u5728\u5B9E\u73B0\u6D41\u7C7B\u578B\u65F6\u5927\u91CF\u53C2\u8003\u4E86 Kafka \u4E2D\u7684\u6982\u5FF5\uFF0C\u4F8B\u5982\u6D88\u8D39\u6A21\u578B\uFF0C\u6D41\u6D88\u606F\u7684\u6982\u5FF5\u3002\u5F53\u7136\u6240\u6709\u7684\u53C2\u8003\u53EA\u5C40\u9650\u4E8E Kafka \u7684\u6587\u6863\uFF0C\u4E0E Kafka \u7684\u4EE3\u7801\u5B9E\u73B0\u6CA1\u6709\u4EFB\u4F55\u5173\u7CFB\u54E6\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u5FC3\u52A8\u4E0D\u5982\u5FC3\u52A8\uFF0C\u90A3\u5148\u4E00\u7779\u4E3A\u5FEB\u5427\u3002"}),"\n",(0,r.jsx)(e.h2,{id:"\u73AF\u5883\u51C6\u5907",children:"\u73AF\u5883\u51C6\u5907"}),"\n",(0,r.jsxs)(e.p,{children:["\u5982\u679C\u4F60\u662F macOs \u7528\u6237\uFF0C\u5E76\u4E14\u5B89\u88C5\u4E86 brew\uFF08\u5982\u679C\u6CA1\u6709\u5B89\u88C5\uFF0C\u90A3\u5EFA\u8BAE\u5148\u5B89\u88C5 ",(0,r.jsx)(e.code,{children:'/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'}),"\uFF09\uFF0C\u90A3\u4E48\u53EA\u9700\u8981"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"brew install redis\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u5373\u53EF\uFF0C\u5982\u679C\u4F60\u662F\u975E macOs \u7528\u6237\uFF0C\u90A3\u8981\u561B\u8003\u8651\u6362 mac\uFF0C\u8981\u561B\u4F7F\u7528 docker \u542F\u52A8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"docker run --rm -it -p 6379:6379 -v $PWD:/data --name redis redis:alpine\n# \u9898\u5916\u8BDD: \u4F7F\u7528 alpine \u66F4\u5C0F\u66F4\u7701\u5FC3\uFF0C\u5F3A\u70C8\u63A8\u8350\uFF0C\u6709\u4EFB\u4F55\u4F7F\u7528\u95EE\u9898\u90FD\u53EF\u4EE5\u4EA4\u6D41\u54E6\uFF0C\u81F3\u4E8E\u6709\u591A\u597D\uFF0C\u5728\u8FD9\u91CC\u6015\u662F\u8BF4\u4E0D\u5B8C\u3002\n\n# \u9A8C\u8BC1\u5B89\u88C5\u7684\u7248\u672C\ndocker exec redis redis-cli info server\n# \u5BA2\u6237\u7AEF\u94FE\u63A5\ndocker exec -it redis redis-cli\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u4E00\u5207\u51C6\u5907\u5C31\u7EEA\uFF0C\u5C31\u5F00\u59CB\u5B9E\u8DF5\u5427\u3002\u65E2\u7136\u6D41\u662F\u65B0\u7684\u6570\u636E\u7C7B\u578B\uFF0C\u90A3\u6211\u4EEC\u5C31\u5148\u4ECE\u652F\u6301\u7684\u64CD\u4F5C\u5F00\u59CB\u5427\u3002"}),"\n",(0,r.jsx)(e.h2,{id:"\u547D\u4EE4\u5217\u8868",children:"\u547D\u4EE4\u5217\u8868"}),"\n",(0,r.jsxs)(e.p,{children:["Stream \u7C7B\u578B\u4E00\u5171\u652F\u6301 13 \u4E2A",(0,r.jsx)(e.a,{href:"https://redis.io/commands#stream",children:"\u547D\u4EE4"}),"\uFF0C\u8FD9\u91CC\u7B80\u5355\u5217\u4E3E\u4E00\u4E0B\u652F\u6301\u7684\u547D\u4EE4\u3002"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"\u547D\u4EE4"}),(0,r.jsx)(e.th,{children:"\u529F\u80FD\u6982\u8FF0"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xinfo"}),(0,r.jsx)(e.td,{children:"\u83B7\u53D6\u6D88\u8D39\u8005\uFF0C\u5206\u7EC4\u548C\u6D41\u4FE1\u606F"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xadd"}),(0,r.jsx)(e.td,{children:"\u6DFB\u52A0\u6D88\u606F\u5230\u6D41"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xtrim"}),(0,r.jsx)(e.td,{children:"\u5C06\u6D41\u91CD\u7F6E\u4E3A\u6307\u5B9A\u5927\u5C0F"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xdel"}),(0,r.jsx)(e.td,{children:"\u901A\u8FC7 ID \u5220\u9664"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xrange"}),(0,r.jsx)(e.td,{children:"\u8FD4\u56DE\u8303\u56F4\u5185\u7684\u6D88\u606F\uFF0C\u7279\u6B8A\u8D77\u59CB + -"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xrevrange"}),(0,r.jsx)(e.td,{children:"\u4E0E xrange \u76F8\u540C\uFF0C\u4F46\u8FD4\u56DE\u987A\u5E8F\u76F8\u53CD"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xlen"}),(0,r.jsx)(e.td,{children:"\u83B7\u53D6\u6D41\u957F\u5EA6"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xread"}),(0,r.jsx)(e.td,{children:"\u4ECE\u6D41\u4E2D\u6307\u5B9A id \u5F00\u59CB\u8BFB\u53D6\u6307\u5B9A\u91CF\u6D88\u606F\uFF0C\u53EF\u9009\u62E9\u963B\u585E\u8FD4\u56DE"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xgroup"}),(0,r.jsx)(e.td,{children:"\u7BA1\u7406\u6D88\u8D39\u7EC4"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xreadgroup"}),(0,r.jsx)(e.td,{children:"\u4EE5\u8BA2\u9605\u7EC4\u6210\u5458\u7684\u8EAB\u4EFD\u8BFB\u53D6\u6D41\u6D88\u606F - \u5373\u8BA2\u9605/\u6D88\u8D39\u6D88\u606F"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xack"}),(0,r.jsx)(e.td,{children:"\u54CD\u5E94\u6D88\u606F\u88AB\u6B63\u786E\u5904\u7406"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xpending"}),(0,r.jsx)(e.td,{children:"\u67E5\u8BE2\u6B63\u5728\u5904\u7406\u4E2D\u7684\u6D88\u606F - \u5C1A\u672A ACK \u7684\u6D88\u606F"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"xclaim"}),(0,r.jsx)(e.td,{children:"\u83B7\u53D6\u6B63\u5728\u5904\u7406\u4E2D\u7684\u6D88\u606F"})]})]})]}),"\n",(0,r.jsx)(e.p,{children:"\u5728\u5F00\u59CB\u4E4B\u524D\uFF0C\u7B80\u5355\u6982\u8FF0\u4E00\u4E0B\u4F7F\u7528\u8FC7\u7A0B\u4E2D\u9700\u8981\u6CE8\u610F\u7684\u70B9"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u6D41\u6D88\u606F\u5185\u5BB9\u662F\u5B57\u5178 - \u5373 KV \u7ED3\u6784"}),"\n",(0,r.jsx)(e.li,{children:"\u6BCF\u4E2A\u6D88\u606F\u6709\u4E00\u4E2A ID - 128bit - \u7531\u65F6\u95F4\u6233\u548C\u5E8F\u5217\u53F7\u7EC4\u6210"}),"\n",(0,r.jsxs)(e.li,{children:["\u63D2\u5165\u6D88\u606F\u65F6\u4F7F\u7528 ",(0,r.jsx)(e.code,{children:"*"})," \u4F5C\u4E3A ID \u5219\u662F\u7531\u670D\u52A1\u7AEF\u751F\u6210 ID"]}),"\n",(0,r.jsx)(e.li,{children:"ID \u5FC5\u987B\u9012\u589E"}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"-"}),"/",(0,r.jsx)(e.code,{children:"+"})," \u5206\u522B\u8868\u793A\u6700\u5C0F\u548C\u6700\u5927\u6D88\u606F ID"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"$"})," \u8868\u793A\u6700\u65B0\u7684\u6D88\u606F\u4F4D\u7F6E\uFF0C\u5728\u521B\u5EFA\u6D88\u8D39\u7EC4\u65F6\u4F7F\u7528"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:">"})," \u8868\u793A\u6700\u65B0\u6D88\u8D39\u7684\u6D88\u606F\u4F4D\u7F6E\uFF0C\u5728\u6D88\u8D39\u6D88\u606F\u65F6\u4F7F\u7528"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\u547D\u4EE4\u4EA4\u4E92",children:"\u547D\u4EE4\u4EA4\u4E92"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \u5F80\u6D41\u4E2D\u6DFB\u52A0\u6D88\u606F - \u4F1A\u8FD4\u56DE\u6D88\u606F ID\n# \u624B\u52A8\u6307\u5B9A ID\nxadd s 1-0 name wener age 18\nxadd s 1-1 name wen age 17\n# \u7531\u670D\u52A1\u7AEF\u751F\u6210\u6D88\u606F ID\nxadd s * name xx age 16\n# \u8FD4\u56DE\u6240\u6709\u6D88\u606F\nxrange s - +\n# \u8FD4\u56DE\u7B2C\u4E00\u6761\nxrange s - + count 1\n# \u8FD4\u56DE\u6700\u540E\u4E00\u6761\nxrevrange s + - count 1\n# \u8FD4\u56DE\u6D88\u606F\u957F\u5EA6\nxlen s\n\n# \u8BFB\u7B2C\u4E00\u6761\u6D88\u606F\nxread count 1 streams s1 0-0\n# \u8BFB\u53D6\u7B2C\u4E8C\u6761 - \u6307\u5B9A\u7684\u6D88\u606F ID \u662F 1-0 \uFF0C\u4F1A\u8FD4\u56DE\u8FD9\u4E2A ID \u4E4B\u540E\u7684\u6D88\u606F\nxread count 1 streams s1 1-0\n\n# \u6A21\u62DF\u6D88\u606F\u7684 Roling \u5904\u7406\n# ------\ndel s\n# \u5728\u63D2\u5165\u6D88\u606F\u65F6\uFF0C\u53EF\u9650\u5236\u6D88\u606F\u7684\u6700\u5927\u957F\u5EA6\uFF0C\u7C7B\u4F3C\u4E8E rolling \u65E5\u5FD7\u6587\u4EF6\u7684\u903B\u8F91\n# \u903B\u8F91\u7B49\u540C\u4E8E\u5148 add \u518D trim\n# \u63D2\u5165\u65F6\u9650\u5236\u6700\u5927\u957F\u5EA6 2\nxadd s MAXLEN 2 * ts 1\nxadd s MAXLEN 2 * ts 2\nxadd s MAXLEN 2 * ts 3\nxadd s MAXLEN 2 * ts 4\n# \u6D41\u4E2D\u53EA\u4F1A\u6709 3 4 \u8FD9\u4E24\u6761\u6D88\u606F\nxrange s - +\n\n# \u6D88\u8D39\u7EC4\n# ======\n# \u91CD\u7F6E\u6D41\u5185\u5BB9\ndel s\n# \u521B\u5EFA\u6D88\u8D39\u7EC4 g1 \u5E76\u5C06\u6D88\u8D39\u4F4D\u7F6E\u7F6E\u4E3A\u6700\u65B0\u6D88\u606F\u4F4D\u7F6E $\n# \u56E0\u4E3A s \u4E0D\u5B58\u5728\uFF0C\u6307\u5B9A MKSTREAM \u4F1A\u81EA\u52A8\u521B\u5EFA\u4E00\u4E2A\u7A7A\u7684\u6D41 s\nxgroup create s g1 $ MKSTREAM\n# \u6DFB\u52A0\u65B0\u7684\u6D88\u606F\nxadd s 1-1 name zz age 16\n# \u4F1A\u8FD4\u56DE\u6700\u65B0\u63D2\u5165\u7684\u6D88\u606F\uFF0C\u5F53\u524D\u6D88\u8D39\u8005\u4E3A c1\nxreadgroup group g1 c1 count 1 streams s >\n# \u5F53\u6D88\u606F\u5904\u7406\u5B8C\u6210\u540E\u5BF9\u670D\u52A1\u7AEF\u8FDB\u884C\u54CD\u5E94\nxack s g1 1-1\n\n# \u6A21\u62DF\u6D88\u606F\u5904\u7406\u5931\u8D25\u573A\u666F\n# ------\n# \u6DFB\u52A0\u65B0\u7684\u6D88\u606F\nxadd s 1-2 name aa age 16\n# \u7531 c2 \u6D88\u8D39\nxreadgroup group g1 c2 count 1 streams s >\n# \u4F46\u5728\u5904\u7406\u8FC7\u7A0B\u4E2D\u5F02\u5E38\uFF0C\u672A ACK\uFF0C\u6B64\u65F6\u901A\u8FC7 pending \u67E5\u770B c2 \u5806\u79EF\u7684\u6D88\u606F\nxpending s g1 - + 1 c2\n# c1 \u6709\u80FD\u529B\u5904\u7406\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5C06 c2 \u5904\u7406\u5931\u8D25\u7684\u6D88\u606F\u62FF\u8FC7\u6765\u5904\u7406\n# retrycount \u7531\u5E94\u7528\u81EA\u5DF1\u7EF4\u62A4\uFF0C\u8BB0\u5F55\u91CD\u8BD5\u6B21\u6570\n# 500 \u4E3A\u8868\u793A\u8BE5\u6D88\u606F\u7684\u5904\u7406\u65F6\u95F4\u8D85\u8FC7 500ms \u624D\u80FD\u201C\u62FF\u201D\u8FC7\u6765\nxclaim s g1 c1 500 1-2 retrycount 2\n# c1 \u6210\u529F\u5904\u7406\u8BE5\u6D88\u606F\nxack s g1 1-2\n"})}),"\n",(0,r.jsx)(e.p,{children:"Stream \u7684\u64CD\u4F5C\u76F8\u5F53\u7B80\u4ECB\uFF0C\u80FD\u5B9E\u73B0\u4EC0\u4E48\u6837\u7684\u529F\u80FD\u4E3B\u8981\u53D6\u51B3\u4E8E\u4E1A\u52A1\u7684\u8BBE\u8BA1\u3002\u4F7F\u7528 cli \u5B8C\u6210\u4E86\u57FA\u672C\u7684\u64CD\u4F5C\u518D\u6765\u770B\u770B Java \u7684\u64CD\u4F5C\u5427\u3002"}),"\n",(0,r.jsx)(e.h2,{id:"java-\u4EA4\u4E92",children:"Java \u4EA4\u4E92"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://github.com/lettuce-io/lettuce-core",children:"lettuce"})," \u662F\u4E00\u4E2A\u57FA\u4E8E Netty \u7684\u5F02\u6B65 Redis \u5BA2\u6237\u7AEF\uFF0C\u5728\u6700\u65B0\u7248\u4E2D\u652F\u6301\u4E86 Stream \u7684\u64CD\u4F5C\u3002"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u751F\u4EA7\u548C\u6D88\u8D39"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public void stream() throws InterruptedException {\n    RedisClient client = RedisClient.create("redis://localhost");\n    StatefulRedisConnection<String, String> connection = client.connect();\n    // \u6D41\u7684\u540D\u5B57\n    String streamName = "s";\n    // \u6D88\u8D39\u7EC4\u540D\n    String groupName = "g1";\n\n    AtomicInteger counter = new AtomicInteger();\n    // \u603B\u6D88\u606F\u91CF\n    long total = 1000000;\n    // \u5E76\u53D1\u751F\u4EA7\n    int producerCount = 2;\n    // \u5E76\u53D1\u6D88\u8D39\n    int consumerCount = 4;\n    for (int i = 0; i < producerCount; i++) {\n        int id = i;\n        CompletableFuture.runAsync(() -> {\n            String name = "producer." + id;\n            StatefulRedisConnection<String, String> connect = client.connect();\n            while (true) {\n                int n = counter.incrementAndGet();\n                if (n > total) {\n                    return;\n                }\n                // \u540C\u6B65\u751F\u4EA7\n                Timer.Context context = metrics.timer(name).time();\n                connect\n                        .sync()\n                        .xadd(streamName, "ts", String.valueOf(System.currentTimeMillis()), "i", String.valueOf(n))\n                ;\n                context.close();\n            }\n        });\n    }\n\n    for (int i = 0; i < consumerCount; i++) {\n        StatefulRedisConnection<String, String> connect = client.connect();\n\n        // \u6D88\u8D39\u7684\u4E0A\u4E0B\u6587\n        ConsumerContext c = new ConsumerContext();\n        c\n                .setConnection(connect)\n                .setConsumer(Consumer.from(groupName, "c" + i))\n                .setStreamName(streamName)\n                .setGroupName(groupName)\n                .setName("consumer." + i)\n                .setXReadArgs(XReadArgs.Builder.block(Duration.ofSeconds(5)))\n                .setXreadLastOffset(XReadArgs.StreamOffset.lastConsumed(streamName))\n        ;\n        // \u5F02\u6B65\u6D88\u8D39\n        consume(c);\n    }\n\n    Thread.sleep(Duration.ofMinutes(10).toMillis());\n}\n\n\nprivate CompletionStage<?> consume(ConsumerContext c) {\n    Timer.Context context = metrics.timer(c.name).time();\n    return c.connection\n            .async()\n            .xreadgroup(c.consumer, c.xReadArgs, c.xreadLastOffset)\n            // \u6D88\u606F\u5904\u7406\n            .thenCompose(v -> {\n                context.close();\n                if (v.isEmpty()) {\n                    metrics.meter(c.name + ".empty").mark();\n                    return CompletableFuture.completedFuture(null);\n                }\n                StreamMessage<String, String> message = v.get(0);\n\n                // \u8F93\u51FA\u4E00\u5B9A\u65E5\u5FD7\u91CF\n                if (ThreadLocalRandom.current().nextDouble() < 0.01) {\n                    log.info("[{}] {}", c.name, message.getBody());\n                }\n\n                // \u6210\u529F\u5904\u7406\n                return c.connection.async().xack(c.streamName, c.groupName, message.getId());\n            })\n            // \u5F02\u5E38\u5904\u7406\n            .exceptionally(e -> {\n                metrics.meter(c.name + ".error").mark();\n                return null;\n            })\n            // \u5FAA\u73AF - \u6CA1\u6709\u63A8\u51FA\u903B\u8F91\n            .thenCompose((v) -> consume(c));\n}\n\n\n@Data\n@Accessors(chain = true)\npublic static class ConsumerContext {\n    String name;\n    String streamName;\n    String groupName;\n    Consumer<String> consumer;\n\n    StatefulRedisConnection<String, String> connection;\n\n    XReadArgs.StreamOffset<String> xreadLastOffset;\n\n    XReadArgs xReadArgs;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u5904\u7406\u672A\u6210\u529F\u7684\u6D88\u606F"})}),"\n",(0,r.jsx)(e.p,{children:"\u540C\u6B65\u64CD\u4F5C\uFF0C\u903B\u8F91\u76F8\u5BF9\u6E05\u6670"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public void testClaimPendingSingleThreadSync() {\n    RedisClient client = RedisClient.create("redis://localhost");\n    StatefulRedisConnection<String, String> connection = client.connect();\n    String streamName = "s";\n    String groupName = "g1";\n\n    RedisCommands<String, String> sync = connection.sync();\n    Consumer<String> consumer = Consumer.from(groupName, "c1");\n    Range<String> fullRange = Range.create("-", "+");\n\n    while (true) {\n        try (Timer.Context ignored = metrics.timer(consumer.getName() + ".pending").time()) {\n            PendingResult result = PendingResult.of(sync.xpending(streamName, consumer, fullRange, Limit.from(1)));\n\n            if (!result.hasPending()) {\n                break;\n            }\n\n            List<StreamMessage<String, String>> list = sync.xclaim(\n                    streamName,\n                    consumer,\n                    new XClaimArgs().minIdleTime(500).retryCount(result.getDeliverCount() + 1),\n                    result.getMessageId()\n            );\n            if (list.isEmpty()) {\n                continue;\n            }\n            StreamMessage<String, String> message = list.get(0);\n            if (ThreadLocalRandom.current().nextDouble() < 0.001) {\n                log.info("[{}] {}", consumer.getName(), message.getBody());\n            }\n            sync.xack(streamName, groupName, message.getId());\n        }\n    }\n}\n\n/**\n * Pending \u8FD4\u56DE\u7684\u7ED3\u679C\u5904\u7406\n */\ninterface PendingResult {\n    static PendingResult of(List<Object> v) {\n        return () -> v;\n    }\n\n    List<Object> getResult();\n\n    default boolean hasPending() {\n        List<Object> result = getResult();\n        if (result != null && !result.isEmpty()) {\n            List list = (List) result.get(0);\n            return !list.isEmpty() && list.get(0) != null;\n        }\n        return false;\n    }\n\n    default String getMessageId() {\n        return String.valueOf(((List) getResult().get(0)).get(0));\n    }\n\n    default String getConsumer() {\n        return String.valueOf(((List) getResult().get(0)).get(1));\n    }\n\n    default long getElapseTime() {\n        return ((Number) ((List) getResult().get(0)).get(2)).longValue();\n    }\n\n    default long getDeliverCount() {\n        return ((Number) ((List) getResult().get(0)).get(3)).longValue();\n    }\n}\n\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u67D0\u6B21\u7684\u6027\u80FD\u7EDF\u8BA1"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Java CPU 70%\nc1.pending\n             count = 769903\n         mean rate = 3360.66 calls/second\n     1-minute rate = 3267.08 calls/second\n     5-minute rate = 2855.18 calls/second\n    15-minute rate = 2538.15 calls/second\n               min = 0.22 milliseconds\n               max = 1.80 milliseconds\n              mean = 0.30 milliseconds\n            stddev = 0.13 milliseconds\n            median = 0.26 milliseconds\n              75% <= 0.32 milliseconds\n              95% <= 0.49 milliseconds\n              98% <= 0.65 milliseconds\n              99% <= 0.88 milliseconds\n            99.9% <= 1.66 milliseconds\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u5904\u7406\u672A\u6210\u529F\u7684\u6D88\u606F"})}),"\n",(0,r.jsx)(e.p,{children:"\u5F02\u6B65\u64CD\u4F5C\uFF0C\u903B\u8F91\u76F8\u5BF9\u4E0D\u90A3\u4E48\u6E05\u6670\uFF5E"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public void testClaimPendingSingleThreadAsync() throws ExecutionException, InterruptedException {\n    RedisClient client = RedisClient.create("redis://localhost");\n    StatefulRedisConnection<String, String> connection = client.connect();\n    String streamName = "s";\n    String groupName = "g1";\n\n    RedisAsyncCommands<String, String> async = connection.async();\n    Consumer<String> consumer = Consumer.from(groupName, "c2");\n    Range<String> fullRange = Range.create("-", "+");\n\n    AtomicReference<Supplier<CompletionStage<?>>> process = new AtomicReference<>();\n    AtomicReference<Timer.Context> context = new AtomicReference<>();\n    // \u4E00\u6B21\u5904\u7406\n    process.set(() -> {\n        context.set(metrics.timer(consumer.getName() + ".process").time());\n        return async\n                .xpending(streamName, consumer, fullRange, Limit.from(1))\n                .thenCompose(v -> {\n                    PendingResult result = PendingResult.of(v);\n                    if (!result.hasPending()) {\n                        throw new RuntimeException("DONE");\n                    }\n\n                    return async.xclaim(\n                            streamName,\n                            consumer,\n                            new XClaimArgs().minIdleTime(500).retryCount(result.getDeliverCount() + 1),\n                            result.getMessageId()\n                    );\n                })\n                .thenCompose(list -> {\n                    StreamMessage<String, String> message = list.get(0);\n                    if (ThreadLocalRandom.current().nextDouble() < 0.001) {\n                        log.info("[{}] {}", consumer.getName(), message.getBody());\n                    }\n                    return async.xack(streamName, groupName, message.getId());\n                })\n                .thenCompose(v -> {\n                    context.get().close();\n                    return process.get().get();\n                });\n    });\n    // \u5FAA\u73AF\n    process.get()\n            .get()\n            .whenComplete((v, e) -> {\n                if (e != null) {\n                    e.printStackTrace();\n                }\n                log.info("Complete");\n            })\n            .toCompletableFuture()\n            .get();\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u4F46\u6027\u80FD\u4F1A\u6BD4\u540C\u6B65\u64CD\u4F5C\u7684\u6027\u80FD\u8981\u597D\u5462\uFF0CJava \u7684 CPU \u4E5F\u6BD4\u540C\u6B65\u7684\u66F4\u4F4E"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Java CPU 50%\nredis-server CPU 50%\nc2.process\n            count = 879207\n        mean rate = 5145.76 calls/second\n    1-minute rate = 5128.23 calls/second\n    5-minute rate = 3779.55 calls/second\n15-minute rate = 3132.92 calls/second\n            min = 0.14 milliseconds\n            max = 0.81 milliseconds\n            mean = 0.18 milliseconds\n        stddev = 0.06 milliseconds\n        median = 0.16 milliseconds\n            75% <= 0.19 milliseconds\n            95% <= 0.29 milliseconds\n            98% <= 0.34 milliseconds\n            99% <= 0.40 milliseconds\n        99.9% <= 0.81 milliseconds\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u603B\u7ED3",children:"\u603B\u7ED3"}),"\n",(0,r.jsx)(e.p,{children:"\u5F53\u4EC0\u4E48\u65F6\u5019\u9009\u62E9 Redis \u7684\u6D41\u5462\uFF1F"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u5185\u5B58\u5B58\u50A8\u6EE1\u8DB3\u9700\u6C42"}),"\n",(0,r.jsx)(e.li,{children:"\u901F\u5EA6\u8981\u6C42\u9AD8"}),"\n",(0,r.jsx)(e.li,{children:"\u80FD\u63A5\u6536 Redis \u7684\u6301\u4E45\u5316\u4FDD\u969C - \uFF08\u4FDD\u969C\u662F\u4E0D\u4E00\u5B9A\u6301\u4E45 \u{1F604}\uFF09"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u5408\u7406\u7684\u5E94\u7528\u4E5F\u662F\u9700\u8981\u5408\u7406\u7684\u573A\u666F\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u6D41\u603B\u7684\u6765\u8BF4\u8FD8\u662F\u5F88\u4E0D\u9519\u7684\uFF0C\u8FD8\u6709\u5F88\u591A\u53EF\u80FD\u4F7F\u7528\u7684\u573A\u666F\u5728\u8FD9\u91CC\u4E0D\u505A\u4E00\u4E00\u8D58\u8FF0\uFF0C\u6D41\u7684\u5185\u90E8\u5B9E\u73B0\u4E5F\u662F\u975E\u5E38\u7684\u6709\u610F\u601D\u7684\uFF0C\u7B49\u6709\u65F6\u95F4\u518D\u505A\u53E6\u5916\u7684\u4E00\u4E2A\u5206\u4EAB\u3002\u6B64\u5916 Redis 4 \u7684 Module \u4E5F\u662F\u975E\u5E38\u6709\u9B45\u529B\uFF0C\u4F8B\u5982\u751A\u81F3\u53EF\u4EE5\u7528 ",(0,r.jsx)(e.a,{href:"https://github.com/wenerme/go-rm",children:"Golang"})," \u6765\u5B9E\u73B0\u6A21\u5757\u6DFB\u52A0\u65B0\u7684\u547D\u4EE4\u529F\u80FD\uFF0C\u55EF\u55EF\uFF0C\u673A\u4F1A\u591A\u591A\u3002"]})]})}function m(n={}){let{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}},17776:function(n,e,t){t.d(e,{R:()=>l,x:()=>c});var s=t(7378);let r={},i=s.createContext(r);function l(n){let e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(i.Provider,{value:e},n.children)}},68437:function(n){n.exports=JSON.parse('{"permalink":"/story/redis-stream-intro","editUrl":"https://github.com/wenerme/wener/edit/master/story/../story/2018/2018-10-25-redis-stream-intro.md","source":"@site/../story/2018/2018-10-25-redis-stream-intro.md","title":"Redis \u6D41\u7B80\u4ECB","description":"\u6982\u8FF0","date":"2018-10-25T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/story/tags/java"},{"inline":true,"label":"\u963F\u91CC","permalink":"/story/tags/\u963F\u91CC"},{"inline":true,"label":"Redis","permalink":"/story/tags/redis"}],"readingTime":9.23,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Redis \u6D41\u7B80\u4ECB","slug":"redis-stream-intro","tags":["Java","\u963F\u91CC","Redis"]},"unlisted":false,"prevItem":{"title":"Java 11 JavaFX \u7B2C\u4E00\u4E2A\u5E94\u7528","permalink":"/story/java11-javafx-first-app"},"nextItem":{"title":"Java with GraphQL","permalink":"/story/jraphql"}}')}}]);