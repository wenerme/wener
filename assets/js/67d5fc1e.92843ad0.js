"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["16601"],{32584:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>a,toc:()=>l,default:()=>u,metadata:()=>s,assets:()=>c,contentTitle:()=>o});var s=JSON.parse('{"id":"queue/nats/nats-service","title":"NATS Service","description":"- https://github.com/nats-io/nats.deno/blob/main/nats-base-client/service.ts","source":"@site/../notes/queue/nats/nats-service.md","sourceDirName":"queue/nats","slug":"/queue/nats/service","permalink":"/notes/queue/nats/service","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/queue/nats/nats-service.md","tags":[{"inline":true,"label":"Microservices","permalink":"/notes/tags/microservices"},{"inline":true,"label":"RPC","permalink":"/notes/tags/rpc"}],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1709694572000,"frontMatter":{"title":"NATS Service","tags":["Microservices","RPC"]},"sidebar":"docs","previous":{"title":"nats-server","permalink":"/notes/queue/nats/server"},"next":{"title":"Nats Version","permalink":"/notes/queue/nats/version"}}'),i=t(86106),r=t(17776);let a={title:"NATS Service",tags:["Microservices","RPC"]},o="NATS Service",c={},l=[{value:"Explained",id:"explained",level:2}];function d(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"nats-service",children:"NATS Service"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$SRV.<verb>\n$SRV.<verb>.<name>\n$SRV.<verb>.<name>.<id>\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats.deno/blob/main/nats-base-client/service.ts",children:"https://github.com/nats-io/nats.deno/blob/main/nats-base-client/service.ts"})}),"\n",(0,i.jsxs)(e.li,{children:["verb - \u6807\u51C6\u64CD\u4F5C\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"PING|STATS|INFO"})}),"\n",(0,i.jsx)(e.li,{children:"operation=method"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Group=\u76F8\u540C\u7684\u524D\u7F00"}),"\n",(0,i.jsxs)(e.li,{children:["headers\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Nats-Service-Error - \u5B57\u7B26\u4E32\u63CF\u8FF0"}),"\n",(0,i.jsx)(e.li,{children:"Nats-Service-Error-Code - \u6570\u5B57"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"nats --no-context -s wss://demo.nats.io:8443 sub --match-replies '$SRV.>'\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"// io.nats.micro.v1.info_response\ntype InfoResponse = {\n  type: string;\n  name: string;\n  id: string;\n  version: string;\n  metadata: Record<string, string>;\n  /**\n   * Description for the service\n   */\n  description: string;\n  /**\n   * An array of info for all service endpoints\n   */\n  endpoints: EndpointInfo[];\n};\ntype EndpointInfo = {\n  /**\n   * The name of the endpoint\n   */\n  name: string;\n  /**\n   * The subject on which the endpoint is listening.\n   */\n  subject: string;\n  /**\n   * Queue group to which this endpoint is assigned to\n   */\n  queue_group: string;\n  /**\n   * Metadata of a specific endpoint\n   */\n  metadata: Record<string, string>;\n};\n\n// io.nats.micro.v1.ping_response\ntype PingResponse = {\n  type: string;\n  name: string;\n  id: string;\n  version: string;\n  metadata: Record<string, string>;\n};\n\n// io.nats.micro.v1.stats_response\ntype StatsResponse = {\n  type: string;\n  name: string;\n  id: string;\n  version: string;\n  metadata: Record<string, string>;\n  /**\n   * Individual endpoint stats\n   */\n  endpoints: EndpointStats[];\n  /**\n   * ISO Date string when the service started in UTC timezone\n   */\n  started: string;\n};\n\ntype EndpointStats = {\n  /**\n   * The name of the endpoint\n   */\n  name: string;\n  /**\n   * The subject on which the endpoint is listening.\n   */\n  subject: string;\n  /**\n   * Queue group to which this endpoint is assigned to\n   */\n  queue_group: string;\n  /**\n   * The number of requests received by the endpoint\n   */\n  num_requests: number;\n  /**\n   * Number of errors that the endpoint has raised\n   */\n  num_errors: number;\n  /**\n   * If set, the last error triggered by the endpoint\n   */\n  last_error?: Error;\n  /**\n   * A field that can be customized with any data as returned by stats handler see {@link ServiceConfig}\n   */\n  data?: unknown;\n  /**\n   * Total processing_time for the service\n   */\n  processing_time: Nanos;\n  /**\n   * Average processing_time is the total processing_time divided by the num_requests\n   */\n  average_processing_time: Nanos;\n};\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Service API ",(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats-architecture-and-design/blob/main/adr/ADR-32.md",children:"ADR-32"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats-architecture-and-design/issues/220",children:"https://github.com/nats-io/nats-architecture-and-design/issues/220"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats-architecture-and-design/issues/206",children:"https://github.com/nats-io/nats-architecture-and-design/issues/206"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats-architecture-and-design/issues/184",children:"https://github.com/nats-io/nats-architecture-and-design/issues/184"})}),"\n",(0,i.jsxs)(e.li,{children:["multiple endpoints on services ",(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats-architecture-and-design/issues/187",children:"#187"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats.go/blob/main/micro/README.md",children:"https://github.com/nats-io/nats.go/blob/main/micro/README.md"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"import { Type, Static } from '@sinclair/typebox';\nimport { Value } from '@sinclair/typebox/value';\nimport { firstOfAsyncIterator } from '@wener/utils';\nimport { polyfillWebSocket } from '@wener/utils/server/ws';\nimport { connect } from 'nats.ws';\nimport { test } from 'vitest';\n\ntest(\n  'nats-service',\n  async () => {\n    await polyfillWebSocket();\n\n    const nc = await connect({\n      servers: ['wss://demo.nats.io:8443'],\n    });\n\n    console.log(`nats ttl ${await nc.rtt()}ms`);\n\n    const svc = await nc.services.add({\n      name: 'test_Service',\n      version: '1.0.0',\n      statsHandler: async (ep) => {\n        console.log(`[STATS] ${ep.subject} ${ep.queue} ${JSON.stringify(ep.metadata)}`);\n        return null;\n      },\n      queue: 'SVC',\n    });\n\n    type HelloRequest = Static<typeof HelloRequest>;\n    const HelloRequest = Type.Object({\n      name: Type.String(),\n    });\n\n    const queue = svc.addEndpoint('hello', {\n      subject: `test_Service.hello`,\n      metadata: {\n        schema: JSON.stringify({\n          request: HelloRequest,\n        }),\n      },\n    });\n    Promise.resolve(null).then(async () => {\n      for await (const msg of queue) {\n        const str = msg.string();\n        const req = Value.Cast(HelloRequest, JSON.parse(str));\n        console.log(`[RECV] ${msg.subject}: ${str}`);\n        msg.respond(\n          JSON.stringify({\n            message: `hello ${req.name}`,\n          }),\n        );\n      }\n    });\n\n    const sc = nc.services.client();\n    console.log(await firstOfAsyncIterator(sc.ping('test_Service')));\n    console.log(await firstOfAsyncIterator(sc.stats('test_Service')));\n    console.log(await firstOfAsyncIterator(sc.info('test_Service')));\n    console.log(\n      (await nc.request('test_Service.hello', JSON.stringify({ name: 'wener' }), { timeout: 1000 * 60 * 60 })).string(),\n    );\n  },\n  {\n    timeout: 60_000,\n  },\n);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"explained",children:"Explained"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["ServiceGroup\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"addEndpoint"}),"\n",(0,i.jsx)(e.li,{children:"addGroup"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/nats-io/nats.deno/blob/main/nats-base-client/service.ts",children:"https://github.com/nats-io/nats.deno/blob/main/nats-base-client/service.ts"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"type NamedEndpoint = {\n  name: string;\n\n  /**\n   * Subject where the endpoint listens\n   */\n  subject: string;\n  /**\n   * An optional handler - if not set the service is an iterator\n   * @param err\n   * @param msg\n   */\n  handler?: ServiceHandler;\n  /**\n   * Optional metadata about the endpoint\n   */\n  metadata?: Record<string, string>;\n  /**\n   * Optional queue group to run this particular endpoint in. The service's configuration\n   * queue configuration will be used. See {@link ServiceConfig}.\n   */\n  queue?: string;\n};\n"})})]})}function u(n={}){let{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},17776:function(n,e,t){t.d(e,{R:()=>a,x:()=>o});var s=t(7378);let i={},r=s.createContext(i);function a(n){let e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);