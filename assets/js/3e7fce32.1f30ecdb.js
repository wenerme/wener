"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["27396"],{60079:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>s,toc:()=>d,default:()=>f,metadata:()=>i,assets:()=>o,contentTitle:()=>l});var i=JSON.parse('{"id":"java/lib/flyway","title":"Flyway","description":"- \u4F7F\u7528 SQL","source":"@site/../notes/java/lib/flyway.md","sourceDirName":"java/lib","slug":"/java/lib/flyway","permalink":"/notes/java/lib/flyway","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/java/lib/flyway.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1678678348000,"frontMatter":{"title":"Flyway"},"sidebar":"docs","previous":{"title":"feign","permalink":"/notes/java/lib/feign"},"next":{"title":"Guava","permalink":"/notes/java/lib/guava"}}'),t=a(86106),r=a(17776);let s={title:"Flyway"},l="Flyway",o={},d=[{value:"flyway --help",id:"flyway---help",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"flyway",children:"Flyway"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u4F7F\u7528 SQL"}),"\n",(0,t.jsx)(n.li,{children:"\u7B26\u5408\u4E00\u5B9A\u7684\u76EE\u5F55\u7ED3\u6784\u6807\u51C6\u5373\u53EF"}),"\n",(0,t.jsx)(n.li,{children:"\u57FA\u4E8E Java, \u6613\u4E8E\u6DFB\u52A0\u81EA\u5B9A\u4E49\u914D\u7F6E"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html",children:"SpringBoot - Database Initialization"})}),"\n",(0,t.jsx)(n.li,{children:"undo \u53EA\u6709\u4E13\u4E1A\u7248\u624D\u6709"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# macOS \u5B89\u88C5\nbrew install flyway\n\n# \u8FC1\u79FB\nflyway -configFiles=path/to/myAlternativeConfig.conf migrate\n# \u53EF\u901A\u8FC7\u73AF\u5883\u53D8\u91CF\u6307\u5B9A\u914D\u7F6E\u6587\u4EF6\nexport FLYWAY_CONFIG_FILES=path/to/myAlternativeConfig.conf,other.conf\n# \u663E\u793A\u8FC1\u79FB\u4FE1\u606F\nflyway info\n# baselineVersion=1	\u57FA\u7840\u7248\u672C\u53F7\n# baselineDescription=<< Flyway Baseline >>	\u63CF\u8FF0\u4FE1\u606F\n# \u57FA\u4E8E\u73B0\u5728\u6570\u636E\u5E93\u505A Baseline\nflyway baseline\n\n# target \u76EE\u6807\u7248\u672C, \u9ED8\u8BA4\u4E3A\u6700\u65B0\nflyway migrate\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"# \u793A\u4F8B\u914D\u7F6E\nflyway.driver=org.postgresql.Driver\nflyway.url=jdbc:postgresql://localhost:5432/flywaydemo\nflyway.user=flywaydemo\nflyway.password=flywaydemo\nflyway.locations=filesystem:src/main/resources/flyway/migrations\nflyway.sqlMigrationPrefix=V\nflyway.sqlMigrationSeparator=__\nflyway.sqlMigrationSuffix=.sql\nflyway.validateOnMigrate=true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"flyway---help",children:"flyway --help"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Flyway Community Edition 5.0.2 by Boxfuse\n\nUsage\n=====\n\nflyway [options] command\n\nBy default, the configuration will be read from conf/flyway.conf.\nOptions passed from the command-line override the configuration.\n\nCommands\n--------\nmigrate  : Migrates the database\nclean    : Drops all objects in the configured schemas\ninfo     : Prints the information about applied, current and pending migrations\nvalidate : Validates the applied migrations against the ones on the classpath\nundo     : Undoes the most recently applied versioned migration\nbaseline : Baselines an existing database at the baselineVersion\nrepair   : Repairs the schema history table\n\nOptions (Format: -key=value)\n-------\ndriver                       : Fully qualified classname of the JDBC driver\nurl                          : Jdbc url to use to connect to the database\nuser                         : User to use to connect to the database\npassword                     : Password to use to connect to the database\nschemas                      : Comma-separated list of the schemas managed by Flyway\ntable                        : Name of Flyway\'s schema history table\nlocations                    : Classpath locations to scan recursively for migrations\nresolvers                    : Comma-separated list of custom MigrationResolvers\nskipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)\nsqlMigrationPrefix           : File name prefix for versioned SQL migrations\nundoSqlMigrationPrefix       : File name prefix for undo SQL migrations\nrepeatableSqlMigrationPrefix : File name prefix for repeatable SQL migrations\nsqlMigrationSeparator        : File name separator for sql migrations\nsqlMigrationSuffixes         : Comma-separated list of file name suffixes for sql migrations\nmixed                        : Allow mixing transactional and non-transactional statements\nencoding                     : Encoding of sql migrations\nplaceholderReplacement       : Whether placeholders should be replaced\nplaceholders                 : Placeholders to replace in sql migrations\nplaceholderPrefix            : Prefix of every placeholder\nplaceholderSuffix            : Suffix of every placeholder\ninstalledBy                  : Username that will be recorded in the schema history table\ntarget                       : Target version up to which Flyway should use migrations\noutOfOrder                   : Allows migrations to be run "out of order"\ncallbacks                    : Comma-separated list of FlywayCallback classes\nskipDefaultCallbacks         : Skips default callbacks (sql)\nvalidateOnMigrate            : Validate when running migrate\nignoreMissingMigrations      : Allow missing migrations when validating\nignoreFutureMigrations       : Allow future migrations when validating\ncleanOnValidationError       : Automatically clean on a validation error\ncleanDisabled                : Whether to disable clean\nbaselineVersion              : Version to tag schema with when executing baseline\nbaselineDescription          : Description to tag schema with when executing baseline\nbaselineOnMigrate            : Baseline on migrate against uninitialized non-empty schema\nconfigFiles                  : Comma-separated list of config files to use\nconfigFileEncoding           : Encoding to use when loading the config files\njarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations\ndryRunOutput                 : File where to output the SQL statements of a migration dry run\nerrorHandlers                : Comma-separated list of handlers for errors and warnings\n\nFlags\n-----\n-X : Print debug output\n-q : Suppress all output, except for errors and warnings\n-n : Suppress prompting for a user and password\n-v : Print the Flyway version and exit\n-? : Print this usage info and exit\n\nExample\n-------\nflyway -user=myuser -password=s3cr3t -url=jdbc:h2:mem -placeholders.abc=def migrate\n\nMore info at https://flywaydb.org/documentation/commandline\n'})})]})}function f(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},17776:function(e,n,a){a.d(n,{R:()=>s,x:()=>l});var i=a(7378);let t={},r=i.createContext(t);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);