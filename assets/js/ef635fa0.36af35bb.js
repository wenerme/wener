"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["88194"],{14211:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>s,toc:()=>d,default:()=>p,metadata:()=>a,assets:()=>t,contentTitle:()=>c});var a=JSON.parse('{"id":"os/alpine/alpine-pkgs","title":"Alpine \u5305\u7EF4\u62A4","description":"- Creating an Alpine package","source":"@site/../notes/os/alpine/alpine-pkgs.md","sourceDirName":"os/alpine","slug":"/os/alpine/pkgs","permalink":"/notes/os/alpine/pkgs","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/os/alpine/alpine-pkgs.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1731847972000,"frontMatter":{"title":"Alpine \u5305\u7EF4\u62A4"},"sidebar":"docs","previous":{"title":"Alpine \u8FD0\u7EF4\u7B14\u8BB0","permalink":"/notes/os/alpine/ops"},"next":{"title":"pxe","permalink":"/notes/os/alpine/pxe"}}'),l=i(86106),r=i(17776);let s={title:"Alpine \u5305\u7EF4\u62A4"},c="Alpine Package",t={},d=[{value:"abuild",id:"abuild",level:2},{value:"abuild.conf",id:"abuildconf",level:2},{value:"\u751F\u6210\u548C\u4F7F\u7528 Patch",id:"\u751F\u6210\u548C\u4F7F\u7528-patch",level:2},{value:"\u65B0\u589E",id:"\u65B0\u589E",level:2},{value:"APKBUILD",id:"apkbuild",level:2},{value:"init tips",id:"init-tips",level:2},{value:"\u5F00\u53D1",id:"\u5F00\u53D1",level:3},{value:"virtual",id:"virtual",level:2},{value:"Invalid configuration <code>x86_64-alpine-linux-musl</code>: machine <code>x86_64-alpine-linux</code> not recognized",id:"invalid-configuration-x86_64-alpine-linux-musl-machine-x86_64-alpine-linux-not-recognized",level:2},{value:"\u5347\u7EA7\u5305\u4E5F\u9700\u8981\u5347\u7EA7\u4F9D\u8D56",id:"\u5347\u7EA7\u5305\u4E5F\u9700\u8981\u5347\u7EA7\u4F9D\u8D56",level:2},{value:"maintain",id:"maintain",level:2}];function o(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"alpine-package",children:"Alpine Package"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package",children:"Creating an Alpine package"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://wiki.alpinelinux.org/wiki/APKBUILD_Reference",children:"https://wiki.alpinelinux.org/wiki/APKBUILD_Reference"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://wiki.alpinelinux.org/wiki/Apkindex_format",children:"Apkindex format"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers",children:"Abuild and Helpers"})}),"\n",(0,l.jsxs)(n.li,{children:["\u955C\u50CF\u72B6\u6001 ",(0,l.jsx)(n.a,{href:"https://mirrors.alpinelinux.org/status.json",children:"https://mirrors.alpinelinux.org/status.json"})]}),"\n",(0,l.jsxs)(n.li,{children:["\u955C\u50CF\u5217\u8868 ",(0,l.jsx)(n.a,{href:"http://nl.alpinelinux.org/alpine/MIRRORS.txt",children:"http://nl.alpinelinux.org/alpine/MIRRORS.txt"})]}),"\n",(0,l.jsxs)(n.li,{children:["Golang\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://git.alpinelinux.org/cgit/aports/tree/community/godep/APKBUILD",children:"https://git.alpinelinux.org/cgit/aports/tree/community/godep/APKBUILD"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["aports ",(0,l.jsx)(n.a,{href:"https://github.com/alpinelinux/aports/blob/master/.github/CONTRIBUTING.md",children:"How to contribute"})]}),"\n",(0,l.jsxs)(n.li,{children:["\u63D0\u4EA4\u65B0\u7684\u5305\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"fork aports"}),"\n",(0,l.jsx)(n.li,{children:"\u6DFB\u52A0\u65B0\u7684\u5305"}),"\n",(0,l.jsx)(n.li,{children:"\u63D0\u4EA4 PR"}),"\n",(0,l.jsxs)(n.li,{children:["\u65B0\u7684\u5305\u53EA\u80FD\u6DFB\u52A0\u5230 ",(0,l.jsx)(n.code,{children:"testing/"}),", \u5728\u7ED3\u679C\u4E00\u6BB5\u65F6\u95F4\u6D4B\u8BD5\u540E\u624D\u4F1A\u79FB\u52A8\u5230 ",(0,l.jsx)(n.code,{children:"main/"})," \u6216 ",(0,l.jsx)(n.code,{children:"community/"})]}),"\n",(0,l.jsxs)(n.li,{children:["\u63D0\u4EA4\u7684\u4FE1\u606F\u683C\u5F0F\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"${repo}/${pkgname}: new aport"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"${repo}/${pkgname}: move from testing"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"${repo}/${pkgname}: upgrade to 3.1.0"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"\u786E\u4FDD ABUILD \u4F7F\u7528 Tab \u800C\u4E0D\u662F \u7A7A\u683C"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\u53C2\u8003\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://github.com/alpinelinux/abuild",children:"alpinelinux/abuild"})," - abuild \u6E90\u7801"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://build.alpinelinux.org/",children:"build.alpinelinux.org"}),"\n\u6784\u5EFA\u72B6\u6001"]}),"\n",(0,l.jsx)(n.li,{children:"apk-audit"}),"\n",(0,l.jsxs)(n.li,{children:["\u79FB\u9664\u4E86 non-free ",(0,l.jsx)(n.a,{href:"https://gitlab.alpinelinux.org/alpine/aports/-/commit/f7fff70bb1f1a2b9756ec19318dfc4c9cc3c5f1c",children:"https://gitlab.alpinelinux.org/alpine/aports/-/commit/f7fff70bb1f1a2b9756ec19318dfc4c9cc3c5f1c"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"3dm2"}),"\n",(0,l.jsx)(n.li,{children:"b43-firmware"}),"\n",(0,l.jsx)(n.li,{children:"bcwc_pcie-src"}),"\n",(0,l.jsx)(n.li,{children:"chromium-widevine"}),"\n",(0,l.jsx)(n.li,{children:"cockroach"}),"\n",(0,l.jsx)(n.li,{children:"compcert"}),"\n",(0,l.jsx)(n.li,{children:"facetimehd-firmware"}),"\n",(0,l.jsx)(n.li,{children:"mongodb"}),"\n",(0,l.jsx)(n.li,{children:"mspdebugstack"}),"\n",(0,l.jsx)(n.li,{children:"netperf"}),"\n",(0,l.jsx)(n.li,{children:"postgresql-timescaledb-tsl"}),"\n",(0,l.jsx)(n.li,{children:"py-flask-mongoengine"}),"\n",(0,l.jsx)(n.li,{children:"py-flask-pymongo"}),"\n",(0,l.jsx)(n.li,{children:"py-flask-views"}),"\n",(0,l.jsx)(n.li,{children:"unifi"}),"\n",(0,l.jsx)(n.li,{children:"unrar"}),"\n",(0,l.jsx)(n.li,{children:"urbanterror-data"}),"\n",(0,l.jsx)(n.li,{children:"urbanterror"}),"\n",(0,l.jsx)(n.li,{children:"vlmcsd"}),"\n",(0,l.jsx)(n.li,{children:"yed"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# \u51C6\u5907\nmkdir build && cd build\ngit clone --depth 50 https://gitlab.alpinelinux.org/alpine/aports\n\n# \u542F\u52A8\u73AF\u5883\n# \u914D\u7F6E\u7F13\u5B58\n# HOME=/build\ndocker run --rm -it \\\n  -v $PWD:/build \\\n  -v $PWD/distfiles:/var/cache/distfiles \\\n  -v $PWD/cache:/etc/apk/cache \\\n  --name builder wener/base:builder\n\nsudo apk upgrade -a # \u66F4\u65B0\ncd aports           # \u8FDB\u5165 aports\ngit pull            # \u66F4\u65B0 aports\n\n# git \u7528\u6237\u914D\u7F6E\ngit config --global user.name "Your Full Name"\ngit config --global user.email "your@email.address"\n# \u4E2A\u4EBA\u4FE1\u606F\n[ -e ~/.abuild/abuild.conf ] || {\n  mkdir -p ~/.abuild\n  echo "PACKAGER=\\"$(git config --global user.name) <$(git config --global user.email)>\\"" > ~/.abuild/abuild.conf\n}\n# \u751F\u6210\u5BC6\u94A5\ngrep PACKAGER_PRIVKEY ~/.abuild/abuild.conf || abuild-keygen -ani\n\n# \u6253\u5305\n# community/grpc\ncd aports/community/grpc\n# \u7F16\u8BD1\u6784\u5EFA\u5230 ~/packages\n# -K \u4FDD\u7559 src \u548C pkg - \u7528\u4E8E\u5F00\u53D1\u8C03\u8BD5\n# -r \u5B89\u88C5\u4F9D\u8D56\nabuild -Kr\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# /var/cache/distfiles\nabuild checksum\nabuild -r\n# \u4F4D\u4E8E $HOME/packages/main/x86_64\n\nabuild -Kf\n\n# \u9488\u5BF9\u5355\u4E2A\u5305\u64CD\u4F5C\nabuild package dev\n\n# \u79FB\u9664\u6240\u6709\u6784\u5EFA\u65F6\u5B89\u88C5\u7684\u4F9D\u8D56\n# \u76F4\u63A5\u7F16\u8F91 /etc/apk/world \u7136\u540E apk fix \u4E5F\u53EF\u4EE5\napk del '.makedepends-*'\n\nrsync -avz --no-perms --no-owner --no-group --exclude='src,pkg' mnt/wener abuild/\n"})}),"\n",(0,l.jsx)(n.h2,{id:"abuild",children:"abuild"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# \u9ED8\u8BA4\u73AF\u5883\nstartdir="${APKBUILD%/*}"\nsrcdir=${srcdir:-"$startdir/src"}\npkgbasedir=${pkgbasedir:-"$startdir/pkg"}\n\nrepo=${startdir%/*}\nrepo=${repo##*/}\n\nbuilddir=${builddir:-"$srcdir/$pkgname-$pkgver"}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"abuildconf",children:"abuild.conf"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/alpinelinux/abuild/blob/master/abuild.conf",children:"abuild.conf"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'export CFLAGS="-Os -fomit-frame-pointer"\nexport CXXFLAGS="$CFLAGS"\nexport CPPFLAGS="$CFLAGS"\nexport LDFLAGS="-Wl,--as-needed"\nexport GOFLAGS="-buildmode=pie"\n# Do note that these should work with at least GDC and LDC\nexport DFLAGS="-Os"\n\nexport JOBS=2\nexport MAKEFLAGS=-j$JOBS\n\n# remove line below to disable colors\nUSE_COLORS=1\n\n# uncomment line below to enable ccache support.\n#USE_CCACHE=1\n\nSRCDEST=/var/cache/distfiles\n\n# uncomment line below to store built packages in other location\n# The package will be stored as $REPODEST/$repo/$pkgname-$pkgver-r$pkgrel.apk\n# where $repo is the name of the parent directory of $startdir.\nREPODEST=$HOME/packages/\n\n# PACKAGER and MAINTAINER are used by newapkbuild when creating new aports for\n# the APKBUILD\'s "Contributor:" and "Maintainer:" comments, respectively.\n#PACKAGER="Your Name <your@email.address>"\n#MAINTAINER="$PACKAGER"\n\n# what to clean up after a successful build\nCLEANUP="srcdir bldroot pkgdir deps"\n\n# what to cleanup after a failed build\nERROR_CLEANUP="bldroot deps"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"\u751F\u6210\u548C\u4F7F\u7528-patch",children:"\u751F\u6210\u548C\u4F7F\u7528 Patch"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cd src/dahdi-linux-3.1.0/\ncp include/kernel.h include/kernel.h.new\nnano include/kernel.h.new\ndiff -u include/kernel.h include/kernel.h.new > ../../kernel-compact-5.4.patch\n\n# \u6DFB\u52A0 patch\nnano APKBUILD\nabuild checksum\n# \u9A8C\u8BC1 patch \u6B63\u786E\u6027\nrm -rf src\nabuild unpack prepare\n# \u6784\u5EFA\nabuild -r\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\u65B0\u589E",children:"\u65B0\u589E"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# -c \u6DFB\u52A0 init.d \u548C conf.d\nnewapkbuild -n frp \\\n  -d 'A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.' \\\n  -l 'Apache-2.0' \\\n  -u https://github.com/fatedier/frp \\\n  -c \\\n  https://github.com/fatedier/frp/archive/v0.35.1.tar.gz\n"})}),"\n",(0,l.jsx)(n.h2,{id:"apkbuild",children:"APKBUILD"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'install="$pkgname.pre-install $pkgname.post-install"\n\n# cmake check\ncheck() {\n  CTEST_OUTPUT_ON_FAILURE=1 make -C build check\n}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# \u6D4B\u8BD5\u6253\u5305\u811A\u672C\nrm -rf pkg && abuild rootpkg\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"pre.install"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"#!/bin/sh\n\naddgroup -S nebula 2> /dev/null\nadduser -S -D -H -s /bin/false -G nebula -g nebula nebula 2> /dev/null\n\nexit 0\n"})}),"\n",(0,l.jsx)(n.h2,{id:"init-tips",children:"init tips"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# \u652F\u6301\u591A init\n[ "${RC_SVCNAME}" != "${RC_SVCNAME##*.}" ] && INSTANCE=${RC_SVCNAME##*.}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# \u68C0\u67E5\u5305\u5185\u5185\u5BB9\ntar -tvf ~/packages/testing/x86_64/frp-openrc-*.apk\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'#!/sbin/openrc-run\nname="Nebula Networking"\ndescription="Scalable overlay networking tool"\n\ninstance=${RC_SVCNAME##*.}\ncfgfile="/etc/nebula/${instance:-config}.yml"\ncommand="/usr/sbin/nebula"\ncommand_args="-config $cfgfile"\ncommand_user="nebula"\nsupervisor="supervise-daemon"\noutput_log="/var/log/${RC_SVCNAME}.log"\nerror_log="/var/log/${RC_SVCNAME}.log"\n\ndepend() {\n  need net\n  use logger dns\n  after firewall\n}\n\nstart_pre() {\n  $command -config $cfgfile -test\n  checkpath -f -m 0644 -o "$command_user" "$output_log" "$error_log"\n  checkpath -f -m 0640 -o "$command_user" "$cfgfile"\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\u5F00\u53D1",children:"\u5F00\u53D1"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package",children:"https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Usage: newapkbuild [-n PKGNAME] [-d PKGDESC] [-l LICENSE] [-u URL]\n       [-a | -C | -m | -p | -y | -r] [-s] [-c] [-f] [-h]\n       PKGNAME[-PKGVER] | SRCURL\nOptions:\n  -n  Set package name to PKGNAME (only use with SRCURL)\n  -d  Set package description to PKGDESC\n  -l  Set package license to LICENSE, use identifiers from:\n      <https://spdx.org/licenses/>\n  -u  Set package URL\n  -a  Create autotools package (use ./configure ...)\n  -C  Create CMake package (Assume cmake/ is there)\n  -m  Create meson package (Assume meson.build is there)\n  -p  Create perl package (Assume Makefile.PL is there)\n  -y  Create python package (Assume setup.py is there)\n  -r  Crate rust package (Assume Cargo.toml is there)\n  -s  Use sourceforge source URL\n  -c  Copy a sample init.d, conf.d, and install script\n  -f  Force even if directory already exists\n  -h  Show this help\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"usage: abuild [options] [-P REPODEST] [-s SRCDEST] [-D DESCRIPTION] [cmd] ...\n       abuild [-c] -n PKGNAME[-PKGVER]\nOptions:\n -A  Print CARCH and exit\n -c  Enable colored output\n -d  Disable dependency checking\n -D  Set APKINDEX description (default: $repo $(git describe))\n -f  Force specified cmd (skip checks: apk up to date, arch)\n -F  Force run as root\n -h  Show this help\n -k  Keep built packages, even if APKBUILD or sources are newer\n -K  Keep buildtime temp dirs and files (srcdir/pkgdir/deps)\n -m  Disable colors (monochrome)\n -P  Set REPODEST as the repository location for created packages\n -q  Quiet\n -r  Install missing dependencies from system repository (using $SUDO_APK)\n -s  Set source package destination directory\n -v  Verbose: show every command as it is run (very noisy)\n\nCommands:\n  build       Compile and install package into $pkgdir\n  check       Run any defined tests concerning the package\n  checksum    Generate checksum to be included in APKBUILD\n  clean       Remove temp build and install dirs\n  cleancache  Remove downloaded files from $SRCDEST\n  cleanoldpkg Remove binary packages except current version\n  cleanpkg    Remove already built binary and source package\n  deps        Install packages listed in makedepends and depends\n  fetch       Fetch sources to $SRCDEST (consider: 'abuild fetch verify')\n  index       Regenerate indexes in $REPODEST\n  listpkg     List target packages\n  package     Install project into $pkgdir\n  prepare     Apply patches\n  rootbld     Build package in clean chroot\n  rootpkg     Run 'package', the split functions and create apks as fakeroot\n  sanitycheck Basic sanity check of APKBUILD\n  snapshot    Create a $giturl snapshot and upload to $disturl\n  sourcecheck Check if remote source package exists upstream\n  srcpkg      Make a source package\n  undeps      Uninstall packages listed in makedepends and depends\n  unpack      Unpack sources to $srcdir\n  up2date     Compare target and sources dates\n  verify      Verify checksums\n\nTo activate cross compilation specify in environment:\n  CHOST       Arch or hostspec of machine to generate packages for\n  CTARGET     Arch or hostspec of machine to generate compiler for\n"})}),"\n",(0,l.jsx)(n.h2,{id:"virtual",children:"virtual"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u76F8\u5F53\u4E8E\u4E00\u4E2A\u4E34\u65F6\u7684 /etc/apk/world"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"apk add --virtual .my-temp-proj foo bar\n"})}),"\n",(0,l.jsx)(n.h1,{id:"faq",children:"FAQ"}),"\n",(0,l.jsxs)(n.h2,{id:"invalid-configuration-x86_64-alpine-linux-musl-machine-x86_64-alpine-linux-not-recognized",children:["Invalid configuration ",(0,l.jsx)(n.code,{children:"x86_64-alpine-linux-musl"}),": machine ",(0,l.jsx)(n.code,{children:"x86_64-alpine-linux"})," not recognized"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\u53EF\u4EE5\u5C06 ",(0,l.jsx)(n.code,{children:"--build"})," \u548C ",(0,l.jsx)(n.code,{children:"--host"})," \u8BBE\u7F6E\u4E3A ",(0,l.jsx)(n.code,{children:"x86_64-alpine-linux"})]}),"\n",(0,l.jsxs)(n.li,{children:["\u56E0\u4E3A\u90E8\u5206\u9879\u76EE\u6784\u5EFA\u662F\u65E0\u6CD5\u5C06 ",(0,l.jsx)(n.code,{children:"musl"})," \u8BC6\u522B\u4E3A ",(0,l.jsx)(n.code,{children:"gnu"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"\u5347\u7EA7\u5305\u4E5F\u9700\u8981\u5347\u7EA7\u4F9D\u8D56",children:"\u5347\u7EA7\u5305\u4E5F\u9700\u8981\u5347\u7EA7\u4F9D\u8D56"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"apk add lua-aports\n# \u5728 aports \u4ED3\u5E93\u4E0B\u8FD0\u884C - \u6BCF\u4E2A\u4ED3\u5E93\u90FD\u8981\n# ap revdep grpc-dev\n\n# check affected\necho -n main,community,testing | tr ',' '\\n' | xargs -I {} sh -c 'cd {}; ap revdep grpc-dev | xargs -rI % echo {}/%'\n# bump pkgrel\necho -n main,community,testing | tr ',' '\\n' | xargs -I {} sh -c 'cd {}; ap revdep grpc-dev | xargs -rI % echo {}/%' \\\n  | xargs -I {} sed -ri 's/(pkgrel=)([0-9]+)/echo \"\\1$((\\2+1))\"/e' {}/APKBUILD\n# verify\ngit diff --color=always | tee\ngit add -u\ngit commit -m '*: rebuild for libgrpc'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"maintain",children:"maintain"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# subshell - \u907F\u514D\u6C61\u67D3\u73AF\u5883\npkgver=$(. APKBUILD && echo $pkgver)\n\ngit add -u\ngit commit -m "$(pwd | egrep -o \'([^/]*/[^/]*)$\'): upgrade to $(. APKBUILD && echo $pkgver)"\n\n# rebuild against PKG VER\n# rebuild for PKG\n\ngh=$(egrep -o \'github.com(/[^/"]+){2}\' APKBUILD | head -1 | egrep -o \'[^/]+/[^/]+$\')\nlatest=$(curl -sf https://data.jsdelivr.com/v1/package/resolve/gh/$gh@latest | jq .version -r)\nsed -ri "s/(pkgver=)(.+)/\\1$latest/" APKBUILD\ngit add APKBUILD\n# \u4E0D add \u5219 --cached\ngit diff --quiet --exit-code APKBUILD && echo Changed\n\n# if changed\nsed -ri "s/(pkgrel)=(.+)/\\1=0/" APKBUILD\nabuild checksum\ngit add -u\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"builder"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"export PATH=$HOME/n/bin:$PATH\nexport N_PREFIX=$HOME/n\n# export https_proxy=\n\ncd /build/aports\npnpm tsx src/aports/upgrade.ts --cwd $PWD community/frp\n\ngit push gl\ngit switch master\n\ngrep 'github.com' community/*/APKBUILD -l | sort -u | cut -f 2 -d '/'\n\n# rclone frp grpc seaweedfs postgresql-timescaledb grpc-java\npnpm tsx src/aports/upgrade.ts --cwd $PWD seaweedfs\n"})})]})}function p(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},17776:function(e,n,i){i.d(n,{R:()=>s,x:()=>c});var a=i(7378);let l={},r=a.createContext(l);function s(e){let n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);