"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["15421"],{91253:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>d,toc:()=>o,default:()=>p,metadata:()=>i,assets:()=>l,contentTitle:()=>c});var i=JSON.parse('{"id":"devops/storage/encryption/luks","title":"LUKS","description":"- LUKS - Linux Unified Key Setup","source":"@site/../notes/devops/storage/encryption/luks.md","sourceDirName":"devops/storage/encryption","slug":"/devops/storage/encryption/luks","permalink":"/notes/devops/storage/encryption/luks","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/devops/storage/encryption/luks.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1693463269000,"frontMatter":{"title":"LUKS"},"sidebar":"docs","previous":{"title":"Encryption","permalink":"/notes/devops/storage/encryption/"},"next":{"title":"Filesystem","permalink":"/notes/devops/storage/fs/"}}'),t=s(86106),r=s(17776);let d={title:"LUKS"},c="LUKS",l={},o=[{value:"\u5BC6\u94A5\u7BA1\u7406",id:"\u5BC6\u94A5\u7BA1\u7406",level:2},{value:"Root \u5206\u533A\u52A0\u5BC6\u5B89\u88C5",id:"root-\u5206\u533A\u52A0\u5BC6\u5B89\u88C5",level:2},{value:"WARNING: Locking directory /run/cryptsetup is missing!",id:"warning-locking-directory-runcryptsetup-is-missing",level:2},{value:"LUKS vs LUKS2",id:"luks-vs-luks2",level:2},{value:"\u8C03\u6574\u5206\u533A\u5927\u5C0F",id:"\u8C03\u6574\u5206\u533A\u5927\u5C0F",level:2},{value:"help",id:"help",level:2}];function a(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"luks",children:"LUKS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["LUKS - ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup",children:"Linux Unified Key Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Dm-crypt",children:"dm-crypt"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-crypt.html",children:"admin-guide/device-mapper/dm-crypt"})}),"\n",(0,t.jsxs)(n.li,{children:["\u6CE8\u610F\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u6BCF\u4E2A\u5757\u8BBE\u5907\u5BC6\u7801\u72EC\u7ACB\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u53EF\u4EE5\u8003\u8651\u4F7F\u7528 keyfile \u7136\u540E\u4F7F\u7528 crypttab \u6302\u8F7D"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u52A0\u5BC6\u65B9\u6848\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ROOT \u52A0\u5BC6"}),"\n",(0,t.jsx)(n.li,{children:"\u975E ROOT \u52A0\u5BC6"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["kernel\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["AlpineLinux \u914D\u7F6E\u65B9\u5F0F ",(0,t.jsx)(n.code,{children:"cryptroot=UUID=<UUID> cryptdm=cryptroot"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"cryptdm - mapper \u540D\u5B57"}),"\n",(0,t.jsxs)(n.li,{children:["\u5B9E\u9645\u5904\u7406\u811A\u672C ",(0,t.jsx)(n.a,{href:"https://github.com/alpinelinux/mkinitfs/blob/961726b6aeb8e12176009675f22ed0ffc2b26e14/initramfs-init.in#L443-L482",children:"initramfs-init.in#L443-L482"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cryptdevice=UUID=<UUID>:cryptroot"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"root=UUID={unencrypted} rw cryptdevice=/dev/disk/by-uuid/{encrypted}:root quiet"}),"\nnomodeset quiet rootfstype=ext4 cryptroot=UUID=3cb7aacf-4975-466b-bb6d-92a13ad60496 cryptdm=rootCrypt cryptdiscards cryptkey"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u53C2\u8003\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["ArchLinux ",(0,t.jsx)(n.a,{href:"https://wiki.archlinux.org/index.php/Dm-crypt",children:"dm-crypt"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://blog.csdn.net/isclouder/article/details/80731388",children:"qemu luks"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apk add cryptsetup util-linux\n# userspace DM \u7BA1\u7406\n# dmsetup dmstats\napk add device-mapper\n\nblkid -t TYPE=crypto_LUKS\n\n# \u4FEE\u6539\u5BC6\u7801\ncryptsetup luksChangeKey /dev/sdb2\n\nuuidgen | tr -d '\\n' > new-key.txt\ncryptsetup luksAddKey /dev/sdb2 new-key.txt -d key.txt\n\n# \u67E5\u770B\u4E0A\u7EA7\u8BBE\u5907\ndmsetup deps -o devname /dev/mapper/decrypted\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u5BC6\u94A5\u7BA1\u7406",children:"\u5BC6\u94A5\u7BA1\u7406"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# \u6240\u6709 slot\ncryptsetup luksDump /dev/sdb2\n\n# \u5224\u65AD slot\n# \u4E00\u4E2A\u4E2A\u5C1D\u8BD5\ncryptsetup open --test-passphrase --key-slot 0 /dev/sda2\n\n# \u6D4B\u8BD5\u5BC6\u7801\n# --verbose \u4F1A\u663E\u793A key slot \u4FE1\u606F\ncryptsetup open --verbose --test-passphrase /dev/sda2\ncryptsetup open --verbose --test-passphrase /dev/sda2 -d key\n\n# \u79FB\u9664\u672A\u77E5\u7684 key slot\ncryptsetup -v luksKillSlot /dev/sdb2 1\n\n# \u67E5\u770B\u5F53\u524D\u7684 DM\ndmsetup table --showkeys\n\n# \u5BFC\u51FA master key\ncryptsetup luksDump --dump-master-key /dev/loop0p2 -d key.txt\n\nxxd -r -p masker-key.txt masker-key.bin\n\n# \u4F7F\u7528 master key \u5219\u4E0D\u9700\u8981\u5BC6\u7801\ncryptsetup luksAddKey /dev/sdb1 --master-key-file <(cat masker-key.bin)\ncryptsetup luksAddKey /dev/sdb2 -d key.txt < new-key.txt\n"})}),"\n",(0,t.jsx)(n.h2,{id:"root-\u5206\u533A\u52A0\u5BC6\u5B89\u88C5",children:"Root \u5206\u533A\u52A0\u5BC6\u5B89\u88C5"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'apk add cryptsetup util-linux\n\n# \u5206\u533A\ndev=/dev/sdb\nboot_dev=${dev}1\nroot_dev=${dev}2\n\n\n# +128M - boot\n# rest  - root\ncat <<CONF | sfdisk --wipe always ${dev}\nlabel: dos\nunit: sectors\nsector-size: 512\n\n/dev/sdb1 : size=+128M, type=83, bootable\n/dev/sdb2 : type=83\nCONF\n\n\n# \u521D\u59CB\u5316\n# ======\n# \u683C\u5F0F\u5316 - \u8BBE\u7F6E\u5BC6\u7801\n# \u8BBE\u7F6E\u5BC6\u7801\u6587\u4EF6 - \u6216\u8005\u4F7F\u7528 cryptsetup \u751F\u6210\nuuidgen > key.txt\nyes | cryptsetup -y -v luksFormat $root_dev -d key.txt\n# \u6253\u5F00 - \u6302\u8F7D\u4E3A mapper\ncryptsetup open $root_dev cryptroot -d key.txt\n# \u683C\u5F0F\u5316 fs\nmkfs.ext4 /dev/mapper/cryptroot\n# \u6302\u8F7D\u5230\u76EE\u5F55\nmount /dev/mapper/cryptroot /mnt\n\n# \u5378\u8F7D\u518D\u6B21\u6302\u8F7D\u786E\u4FDD\u751F\u6548\numount /mnt\ncryptsetup close cryptroot\n\n# format bootfs\nmkfs.ext4 $boot_dev\n\n# root\ncryptsetup open $root_dev cryptroot -d key.txt\nmount /dev/mapper/cryptroot /mnt\n\n# boot\nmkdir -p /mnt/boot\nmount $boot_dev /mnt/boot\n\n# install system\nsetup-disk -m sys -o sysfs.apkvol.tar.gz -s 0 -v -k virt $/mnt\napk --root /mnt add syslinux\n\n# setup luks support\napk --root /mnt add cryptsetup util-linux\necho \'features="ata base ide scsi usb virtio ext4 cryptsetup cryptkey"\' > /mnt/etc/mkinitfs/mkinitfs.conf\nmkinitfs -c /mnt/etc/mkinitfs/mkinitfs.conf -b /mnt/ $(ls /mnt/lib/modules/)\n\n# add cryptroot\n# cryptroot=UUID=<UUID> cryptdm=cryptroot\n# other options - https://github.com/alpinelinux/mkinitfs/blob/961726b6aeb8e12176009675f22ed0ffc2b26e14/initramfs-init.in#L443-L482\nsed -i -r "s/^(default_kernel_opts)=\\"([^\\"]*)\\"/\\1=\\"\\2 cryptroot=UUID=$(blkid ${ROOT_DEV} -o value | head -n 1) cryptdm=cryptroot\\"/" /mnt/etc/update-extlinux.conf\nchroot /mnt update-extlinux\n\n# done - close\numount -R /mnt\ncryptsetup close cryptroot\n'})}),"\n",(0,t.jsx)(n.h1,{id:"faq",children:"FAQ"}),"\n",(0,t.jsx)(n.h2,{id:"warning-locking-directory-runcryptsetup-is-missing",children:"WARNING: Locking directory /run/cryptsetup is missing!"}),"\n",(0,t.jsx)(n.h2,{id:"luks-vs-luks2",children:"LUKS vs LUKS2"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"LUKS2"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Full disk authenticated (FDA) \u63D0\u4F9B\u6570\u636E confidentiality \u548C data integrity protection\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Integrity cannot prevent a replay attack"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cryptsetup luksFormat --type luks2 <device>"})}),"\n",(0,t.jsx)(n.li,{children:"\u65B0\u7684\u683C\u5F0F\uFF0C\u4E0E LUKS1 \u4E0D\u517C\u5BB9"}),"\n",(0,t.jsxs)(n.li,{children:["sector \u7EA7\u522B\u5B8C\u6574\u6027\u6821\u9A8C - Linux 4.12 - dm-integrity\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"integritysetup"})," - \u547D\u4EE4"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"veritysetup \u652F\u6301\u8BBE\u5907 FEC\uFF08Forward Error Correction\uFF09 - \u5B89\u88C5 Linux 4.5 \u5DF2\u6709\u5728\u4F7F\u7528"}),"\n",(0,t.jsxs)(n.li,{children:["sector \u6700\u5927\u652F\u6301 4096\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u786E\u4FDD\u786C\u4EF6\u4F7F\u7528\u76F8\u540C\u5927\u5C0F\uFF0C\u5982\u679C\u786C\u4EF6 sector \u66F4\u5C0F\u53EF\u80FD\u5BFC\u81F4\u6570\u636E\u635F\u574F - \u90E8\u5206 sector \u5199\u5165"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u4F7F\u7528 Argon2i \u548C Argon2id \u4F5C\u4E3A PBKDF\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"memory-hard - \u589E\u52A0\u5185\u5B58\u4F7F\u7528 - \u662F\u7684 GPU \u653B\u51FB\u66F4\u96BE - \u56E0\u4E3A GPU \u5185\u5B58\u6210\u672C\u9AD8"}),"\n",(0,t.jsx)(n.li,{children:"\u8D62\u5F97 Password Hashing Competition \u7684\u7B97\u6CD5"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u9ED8\u8BA4 Argon2i (data independent variant) - \u5185\u5B58 cost 128MB\uFF0C\u65F6\u95F4 cost 800ms\uFF0C\u5E76\u884C\u53D6\u51B3\u4E8E CPU <= 4\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u5355\u72EC\u914D\u7F6E --pbkdf, --pbkdf-memory, --pbkdf-parallel, --iter-time"}),"\n",(0,t.jsx)(n.li,{children:"\u8FED\u4EE3\u5468\u671F --pbkdf-force-iterations"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"\u4F7F\u7528 Token \u72EC\u7ACB\u62BD\u8C61 cryptsetup \u786C\u4EF6\u90E8\u5206"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--persistent"})," - \u6301\u4E45\u6253\u5F00\uFF0C\u4E4B\u540E\u6253\u5F00\u4E0D\u9700\u8981\u5BC6\u94A5"]}),"\n",(0,t.jsxs)(n.li,{children:["Linux kernel keyring\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u907F\u514D\u6BCF\u6B21 ioctl \u53D1\u9001\u5BC6\u94A5"}),"\n",(0,t.jsx)(n.li,{children:"\u81EA\u52A8\u89E3\u9501 - \u4F8B\u5982\u4F7F\u7528 TMP \u5B58\u50A8\u7528\u6237\u5BC6\u94A5"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.man7.org/linux/man-pages/man7/keyrings.7.html",children:"keyrings.7"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"apk add keyutils"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.kernel.org/doc/Documentation/security/keys.txt",children:"KERNEL KEY RETENTION SERVICE"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Keyslot priorities\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"normal,prefer,ignore"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cryptsetup config <device> --key-slot 1 --priority prefer"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["LUKS2 label and subsystem\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'cryptsetup config <device> --label my_device --subsystem ""'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u652F\u6301\u8F6C\u6362\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cryptsetup convert <device> --type luks2"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"cryptsetup convert <device> --type luks1"})}),"\n",(0,t.jsxs)(n.li,{children:["\u9A8C\u8BC1 ",(0,t.jsx)(n.code,{children:"cryptsetup luksDump <device>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"LUKS1"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Full disk encryption (FDE)"}),"\n",(0,t.jsxs)(n.li,{children:["\u4FDD\u7559\u957F\u5EA6\u52A0\u5BC6 - length-preserving - encryption - \u660E\u6587\u5BC6\u6587\u957F\u5EA6\u76F8\u540C\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u63D0\u4F9B\u6570\u636E\u53EF\u4FE1 \uFF08confidentiality\uFF09\uFF0C\u4F46\u4E0D\u4FDD\u8BC1\u6570\u636E\u5B8C\u6574\u6027"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"\u4F7F\u7528 PBKDF (Password-Based Key Derivation Function) \u589E\u52A0\u653B\u51FB\u8005\u8017\u65F6"}),"\n",(0,t.jsxs)(n.li,{children:["PBKDF2 \u589E\u52A0\u8FED\u4EE3\u6B21\u6570\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u76EE\u524D GPU \u5DF2\u7ECF\u53EF\u4EE5\u5E76\u884C\u6267\u884C"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u53C2\u8003"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://gitlab.com/cryptsetup/cryptsetup/blob/master/docs/v2.0.0-ReleaseNotes",children:"Cryptsetup 2.0.0 Release Notes"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# aes-xts-plain64 + hmac-sha256 / hmac-sha512 \u4F5C\u4E3A authentication tag - IEEE 1619.1\n# (Common FDE mode + independent authentication tag. Authentication key for HMAC is independently generated. This mode is very slow.)\ncryptsetup luksFormat --type luks2 <device> --cipher aes-xts-plain64 --integrity hmac-sha256\n\n# aes-gcm-random (native AEAD mode) - IEEE 1619.1\n# \u4E0D\u8981\u7528\u4E8E\u751F\u4EA7 - GCM \u4F7F\u7528 96-bit nonce - GCM \u786C\u4EF6\u652F\u6301\u597D - AES-NI - \u53EF\u4EE5\u7528\u4E8E\u6027\u80FD\u6D4B\u8BD5\ncryptsetup luksFormat --type luks2 <device> --cipher aes-gcm-random --integrity aead\n\n# ChaCha20 with Poly1305 authenticator (according to RFC7539)\ncryptsetup luksFormat --type luks2 <device> --cipher chacha20-random --integrity poly1305\n\n# LUKS2 Token\n# \u6DFB\u52A0 Token\ncryptsetup token add --key-description "my_token" <device>\n# \u6DFB\u52A0\u5BC6\u7801\u5230 keyring user sessing\necho -n <passphrase> | keyctl padd user my_token @u\n# \u5982\u679C\u627E\u5230\u4E86\u5BC6\u7801\u5219\u81EA\u52A8\u4F1A\u6253\u5F00\ncryptsetup open <device> <name>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u8C03\u6574\u5206\u533A\u5927\u5C0F",children:"\u8C03\u6574\u5206\u533A\u5927\u5C0F"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"apk add util-linux\n# \u786E\u4FDD luks \u5206\u533A\u5DF2\u7ECF\u586B\u6EE1\necho -e 'd\\n\\nn\\n\\n\\n\\n\\n\\np\\nw\\n' | fdisk /dev/sdb\n\n# \u8C03\u6574\u5927\u5C0F\ncryptsetup open /dev/sdb2 root\ncryptsetup resize root\n\n# \u6269\u5C55\u6587\u4EF6\u7CFB\u7EDF\napk add e2fsprogs-extra\nresize2fs /dev/mapper/root\n"})}),"\n",(0,t.jsx)(n.h2,{id:"help",children:"help"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"action"}),(0,t.jsx)(n.th,{children:"desc"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["open ",(0,t.jsx)(n.code,{children:"<device> [--type <type>][<name>]"})]}),(0,t.jsxs)(n.td,{children:["\u6253\u5F00\u8BBE\u5907\uFF0C\u6620\u5C04\u4E3A ",(0,t.jsx)(n.code,{children:"<name>"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["close ",(0,t.jsx)(n.code,{children:"<name>"})]}),(0,t.jsx)(n.td,{children:"\u5173\u95ED\u8BBE\u5907\uFF0C\u79FB\u9664\u6620\u5C04"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["resize ",(0,t.jsx)(n.code,{children:"<name>"})]}),(0,t.jsx)(n.td,{children:"resize active device"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["status ",(0,t.jsx)(n.code,{children:"<name>"})]}),(0,t.jsx)(n.td,{children:"show device status"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["benchmark ",(0,t.jsx)(n.code,{children:"[--cipher <cipher>]"})]}),(0,t.jsx)(n.td,{children:"\u538B\u6D4B\u7F16\u7801\u89E3\u7801\u6027\u80FD"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["repair ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u4FEE\u590D\u5143\u6570\u636E"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["reencrypt ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"LUKS2 \u4ECE\u65B0\u52A0\u5BC6"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["erase ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u64E6\u9664\u6240\u6709 key\uFF0C\u79FB\u9664\u52A0\u5BC6\u5BC6\u94A5"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["convert ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"LUKS\u3001LUKS2 \u683C\u5F0F\u8F6C\u6362"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["config ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"LUKS2 \u914D\u7F6E"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksFormat ",(0,t.jsx)(n.code,{children:"<device> [<new key file>]"})]}),(0,t.jsx)(n.td,{children:"LUKS \u683C\u5F0F\u5316"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksAddKey ",(0,t.jsx)(n.code,{children:"<device> [<new key file>]"})]}),(0,t.jsx)(n.td,{children:"\u6DFB\u52A0\u5BC6\u94A5"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksRemoveKey ",(0,t.jsx)(n.code,{children:"<device> [<key file>]"})]}),(0,t.jsx)(n.td,{children:"\u79FB\u9664\u5BC6\u94A5"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksChangeKey ",(0,t.jsx)(n.code,{children:"<device> [<key file>]"})]}),(0,t.jsx)(n.td,{children:"\u4FEE\u6539\u5BC6\u94A5"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksConvertKey ",(0,t.jsx)(n.code,{children:"<device> [<key file>]"})]}),(0,t.jsx)(n.td,{children:"\u4FEE\u6539\u5BC6\u94A5\u4E3A\u65B0\u7684 pbkdf \u53C2\u6570"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksKillSlot ",(0,t.jsx)(n.code,{children:"<device> <key slot>"})]}),(0,t.jsx)(n.td,{children:"\u79FB\u9664 key"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksUUID ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"UUID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["isLuks ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u68C0\u6D4B luks \u5206\u533A\u5934"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksDump ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u5206\u533A\u4FE1\u606F"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["tcryptDump ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"TCRYPT \u4FE1\u606F"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["bitlkDump ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"BITLK \u4FE1\u606F"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksSuspend ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u505C\u6B62 LUKS \u8BBE\u5907\uFF0C\u79FB\u9664 key\uFF0C\u7EC8\u6B62\u6240\u6709 IO"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksResume ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u6062\u590D"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksHeaderBackup ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u5907\u4EFD\u5934"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["luksHeaderRestore ",(0,t.jsx)(n.code,{children:"<device>"})]}),(0,t.jsx)(n.td,{children:"\u6062\u590D\u5934"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"token `<add"}),(0,t.jsx)(n.td,{children:"remove"})]})]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ cryptsetup --help\ncryptsetup 2.3.2\nUsage: cryptsetup [OPTION...] <action> <action-specific>\n  -v, --verbose                         Shows more detailed error messages\n      --debug                           Show debug messages\n      --debug-json                      Show debug messages including JSON metadata\n  -c, --cipher=STRING                   The cipher used to encrypt the disk (see /proc/crypto)\n  -h, --hash=STRING                     The hash used to create the encryption key from the passphrase\n  -y, --verify-passphrase               Verifies the passphrase by asking for it twice\n  -d, --key-file=STRING                 Read the key from a file\n      --master-key-file=STRING          Read the volume (master) key from file.\n      --dump-master-key                 Dump volume (master) key instead of keyslots info\n  -s, --key-size=BITS                   The size of the encryption key\n  -l, --keyfile-size=bytes              Limits the read from keyfile\n      --keyfile-offset=bytes            Number of bytes to skip in keyfile\n      --new-keyfile-size=bytes          Limits the read from newly added keyfile\n      --new-keyfile-offset=bytes        Number of bytes to skip in newly added keyfile\n  -S, --key-slot=INT                    Slot number for new key (default is first free)\n  -b, --size=SECTORS                    The size of the device\n      --device-size=bytes               Use only specified device size (ignore rest of device). DANGEROUS!\n  -o, --offset=SECTORS                  The start offset in the backend device\n  -p, --skip=SECTORS                    How many sectors of the encrypted data to skip at the beginning\n  -r, --readonly                        Create a readonly mapping\n  -q, --batch-mode                      Do not ask for confirmation\n  -t, --timeout=secs                    Timeout for interactive passphrase prompt (in seconds)\n      --progress-frequency=secs         Progress line update (in seconds)\n  -T, --tries=INT                       How often the input of the passphrase can be retried\n      --align-payload=SECTORS           Align payload at <n> sector boundaries - for luksFormat\n      --header-backup-file=STRING       File with LUKS header and keyslots backup\n      --use-random                      Use /dev/random for generating volume key\n      --use-urandom                     Use /dev/urandom for generating volume key\n      --shared                          Share device with another non-overlapping crypt segment\n      --uuid=STRING                     UUID for device to use\n      --allow-discards                  Allow discards (aka TRIM) requests for device\n      --header=STRING                   Device or file with separated LUKS header\n      --test-passphrase                 Do not activate device, just check passphrase\n      --tcrypt-hidden                   Use hidden header (hidden TCRYPT device)\n      --tcrypt-system                   Device is system TCRYPT drive (with bootloader)\n      --tcrypt-backup                   Use backup (secondary) TCRYPT header\n      --veracrypt                       Scan also for VeraCrypt compatible device\n      --veracrypt-pim=INT               Personal Iteration Multiplier for VeraCrypt compatible device\n      --veracrypt-query-pim             Query Personal Iteration Multiplier for VeraCrypt compatible device\n  -M, --type=STRING                     Type of device metadata: luks, luks1, luks2, plain, loopaes, tcrypt,\n                                        bitlk\n      --force-password                  Disable password quality check (if enabled)\n      --perf-same_cpu_crypt             Use dm-crypt same_cpu_crypt performance compatibility option\n      --perf-submit_from_crypt_cpus     Use dm-crypt submit_from_crypt_cpus performance compatibility option\n      --deferred                        Device removal is deferred until the last user closes it\n      --serialize-memory-hard-pbkdf     Use global lock to serialize memory hard PBKDF (OOM workaround)\n  -i, --iter-time=msecs                 PBKDF iteration time for LUKS (in ms)\n      --pbkdf=STRING                    PBKDF algorithm (for LUKS2): argon2i, argon2id, pbkdf2\n      --pbkdf-memory=kilobytes          PBKDF memory cost limit\n      --pbkdf-parallel=threads          PBKDF parallel cost\n      --pbkdf-force-iterations=LONG     PBKDF iterations cost (forced, disables benchmark)\n      --priority=STRING                 Keyslot priority: ignore, normal, prefer\n      --disable-locks                   Disable locking of on-disk metadata\n      --disable-keyring                 Disable loading volume keys via kernel keyring\n  -I, --integrity=STRING                Data integrity algorithm (LUKS2 only)\n      --integrity-no-journal            Disable journal for integrity device\n      --integrity-no-wipe               Do not wipe device after format\n      --integrity-legacy-padding        Use inefficient legacy padding (old kernels)\n      --token-only                      Do not ask for passphrase if activation by token fails\n      --token-id=INT                    Token number (default: any)\n      --key-description=STRING          Key description\n      --sector-size=INT                 Encryption sector size (default: 512 bytes)\n      --persistent                      Set activation flags persistent for device\n      --label=STRING                    Set label for the LUKS2 device\n      --subsystem=STRING                Set subsystem label for the LUKS2 device\n      --unbound                         Create or dump unbound (no assigned data segment) LUKS2 keyslot\n      --json-file=STRING                Read or write the json from or to a file\n      --luks2-metadata-size=bytes       LUKS2 header metadata area size\n      --luks2-keyslots-size=bytes       LUKS2 header keyslots area size\n      --refresh                         Refresh (reactivate) device with new parameters\n      --keyslot-key-size=BITS           LUKS2 keyslot: The size of the encryption key\n      --keyslot-cipher=STRING           LUKS2 keyslot: The cipher used for keyslot encryption\n      --encrypt                         Encrypt LUKS2 device (in-place encryption).\n      --decrypt                         Decrypt LUKS2 device (remove encryption).\n      --init-only                       Initialize LUKS2 reencryption in metadata only.\n      --resume-only                     Resume initialized LUKS2 reencryption only.\n      --reduce-device-size=bytes        Reduce data device size (move data offset). DANGEROUS!\n      --hotzone-size=bytes              Maximal reencryption hotzone size.\n      --resilience=STRING               Reencryption hotzone resilience type (checksum,journal,none)\n      --resilience-hash=STRING          Reencryption hotzone checksums hash\n      --active-name=STRING              Override device autodetection of dm device to be reencrypted\n\nHelp options:\n  -?, --help                            Show this help message\n      --usage                           Display brief usage\n  -V, --version                         Print package version\n\n<action> is one of:\n	open <device> [--type <type>] [<name>] - open device as <name>\n	close <name> - close device (remove mapping)\n	resize <name> - resize active device\n	status <name> - show device status\n	benchmark [--cipher <cipher>] - benchmark cipher\n	repair <device> - try to repair on-disk metadata\n	reencrypt <device> - reencrypt LUKS2 device\n	erase <device> - erase all keyslots (remove encryption key)\n	convert <device> - convert LUKS from/to LUKS2 format\n	config <device> - set permanent configuration options for LUKS2\n	luksFormat <device> [<new key file>] - formats a LUKS device\n	luksAddKey <device> [<new key file>] - add key to LUKS device\n	luksRemoveKey <device> [<key file>] - removes supplied key or key file from LUKS device\n	luksChangeKey <device> [<key file>] - changes supplied key or key file of LUKS device\n	luksConvertKey <device> [<key file>] - converts a key to new pbkdf parameters\n	luksKillSlot <device> <key slot> - wipes key with number <key slot> from LUKS device\n	luksUUID <device> - print UUID of LUKS device\n	isLuks <device> - tests <device> for LUKS partition header\n	luksDump <device> - dump LUKS partition information\n	tcryptDump <device> - dump TCRYPT device information\n	bitlkDump <device> - dump BITLK device information\n	luksSuspend <device> - Suspend LUKS device and wipe key (all IOs are frozen)\n	luksResume <device> - Resume suspended LUKS device\n	luksHeaderBackup <device> - Backup LUKS device header and keyslots\n	luksHeaderRestore <device> - Restore LUKS device header and keyslots\n	token <add|remove|import|export> <device> - Manipulate LUKS2 tokens\n\nYou can also use old <action> syntax aliases:\n	open: create (plainOpen), luksOpen, loopaesOpen, tcryptOpen, bitlkOpen\n	close: remove (plainClose), luksClose, loopaesClose, tcryptClose, bitlkClose\n\n<name> is the device to create under /dev/mapper\n<device> is the encrypted device\n<key slot> is the LUKS key slot number to modify\n<key file> optional key file for the new key for luksAddKey action\n\nDefault compiled-in metadata format is LUKS2 (for luksFormat action).\n\nDefault compiled-in key and passphrase parameters:\n	Maximum keyfile size: 8192kB, Maximum interactive passphrase length 512 (characters)\nDefault PBKDF for LUKS1: pbkdf2, iteration time: 2000 (ms)\nDefault PBKDF for LUKS2: argon2i\n	Iteration time: 2000, Memory required: 1048576kB, Parallel threads: 4\n\nDefault compiled-in device cipher parameters:\n	loop-AES: aes, Key 256 bits\n	plain: aes-cbc-essiv:sha256, Key: 256 bits, Password hashing: ripemd160\n	LUKS: aes-xts-plain64, Key: 256 bits, LUKS header hashing: sha256, RNG: /dev/urandom\n	LUKS: Default keysize with XTS mode (two internal keys) will be doubled.\n"})})]})}function p(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},17776:function(e,n,s){s.d(n,{R:()=>d,x:()=>c});var i=s(7378);let t={},r=i.createContext(t);function d(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);