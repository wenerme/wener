"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["23404"],{11239:function(t,e,r){function a(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}r.d(e,{S:()=>a}),(0,r(23141).K2)(a,"populateCommonDb")},39477:function(t,e,r){r.d(e,{m:()=>i});var a=r(23141),i=class{constructor(t){this.init=t,this.records=this.init()}static{(0,a.K2)(this,"ImperativeState")}reset(){this.records=this.init()}}},70055:function(t,e,r){r.d(e,{diagram:()=>tx});var a=r(11239),i=r(39477),o=r(72482),c=r(68970),s=r(23141),n=r(7711),d=r(4086),h={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},l=c.UI.gitGraph,m=(0,s.K2)(()=>(0,o.$t)({...l,...(0,c.zj)().gitGraph}),"getConfig"),$=new i.m(()=>{let t=m(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function g(){return(0,o.yT)({length:7})}function y(t,e){let r=Object.create(null);return t.reduce((t,a)=>{let i=e(a);return r[i]||(r[i]=!0,t.push(a)),t},[])}(0,s.K2)(g,"getID"),(0,s.K2)(y,"uniqBy");var p=(0,s.K2)(function(t){$.records.direction=t},"setDirection"),x=(0,s.K2)(function(t){s.Rm.debug("options str",t),t=(t=t?.trim())||"{}";try{$.records.options=JSON.parse(t)}catch(t){s.Rm.error("error while parsing gitGraph options",t.message)}},"setOptions"),f=(0,s.K2)(function(){return $.records.options},"getOptions"),u=(0,s.K2)(function(t){let e=t.msg,r=t.id,a=t.type,i=t.tags;s.Rm.info("commit",e,r,a,i),s.Rm.debug("Entering commit:",e,r,a,i);let o=m();r=c.Y2.sanitizeText(r,o),e=c.Y2.sanitizeText(e,o),i=i?.map(t=>c.Y2.sanitizeText(t,o));let n={id:r||$.records.seq+"-"+g(),message:e,seq:$.records.seq++,type:a??h.NORMAL,tags:i??[],parents:null==$.records.head?[]:[$.records.head.id],branch:$.records.currBranch};$.records.head=n,s.Rm.info("main branch",o.mainBranchName),$.records.commits.has(n.id)&&s.Rm.warn(`Commit ID ${n.id} already exists`),$.records.commits.set(n.id,n),$.records.branches.set($.records.currBranch,n.id),s.Rm.debug("in pushCommit "+n.id)},"commit"),b=(0,s.K2)(function(t){let e=t.name,r=t.order;if(e=c.Y2.sanitizeText(e,m()),$.records.branches.has(e))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);$.records.branches.set(e,null!=$.records.head?$.records.head.id:null),$.records.branchConfig.set(e,{name:e,order:r}),E(e),s.Rm.debug("in createBranch")},"branch"),w=(0,s.K2)(t=>{let e=t.branch,r=t.id,a=t.type,i=t.tags,o=m();e=c.Y2.sanitizeText(e,o),r&&(r=c.Y2.sanitizeText(r,o));let n=$.records.branches.get($.records.currBranch),d=$.records.branches.get(e),l=n?$.records.commits.get(n):void 0,y=d?$.records.commits.get(d):void 0;if(l&&y&&l.branch===e)throw Error(`Cannot merge branch '${e}' into itself.`);if($.records.currBranch===e){let t=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===l||!l){let t=Error(`Incorrect usage of "merge". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!$.records.branches.has(e)){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===y||!y){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(l===y){let t=Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&$.records.commits.has(r)){let t=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom id");throw t.hash={text:`merge ${e} ${r} ${a} ${i?.join(" ")}`,token:`merge ${e} ${r} ${a} ${i?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${i?.join(" ")}`]},t}let p={id:r||`${$.records.seq}-${g()}`,message:`merged branch ${e} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,d||""],branch:$.records.currBranch,type:h.MERGE,customType:a,customId:!!r,tags:i??[]};$.records.head=p,$.records.commits.set(p.id,p),$.records.branches.set($.records.currBranch,p.id),s.Rm.debug($.records.branches),s.Rm.debug("in mergeBranch")},"merge"),B=(0,s.K2)(function(t){let e=t.id,r=t.targetId,a=t.tags,i=t.parent;s.Rm.debug("Entering cherryPick:",e,r,a);let o=m();if(e=c.Y2.sanitizeText(e,o),r=c.Y2.sanitizeText(r,o),a=a?.map(t=>c.Y2.sanitizeText(t,o)),i=c.Y2.sanitizeText(i,o),!e||!$.records.commits.has(e)){let t=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let n=$.records.commits.get(e);if(void 0===n||!n)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(i&&!(Array.isArray(n.parents)&&n.parents.includes(i)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let d=n.branch;if(n.type===h.MERGE&&!i)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!$.records.commits.has(r)){if(d===$.records.currBranch){let t=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=$.records.branches.get($.records.currBranch);if(void 0===t||!t){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let o=$.records.commits.get(t);if(void 0===o||!o){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let c={id:$.records.seq+"-"+g(),message:`cherry-picked ${n?.message} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,n.id],branch:$.records.currBranch,type:h.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${n.id}${n.type===h.MERGE?`|parent:${i}`:""}`]};$.records.head=c,$.records.commits.set(c.id,c),$.records.branches.set($.records.currBranch,c.id),s.Rm.debug($.records.branches),s.Rm.debug("in cherryPick")}},"cherryPick"),E=(0,s.K2)(function(t){if(t=c.Y2.sanitizeText(t,m()),$.records.branches.has(t)){$.records.currBranch=t;let e=$.records.branches.get($.records.currBranch);void 0!==e&&e?$.records.head=$.records.commits.get(e)??null:$.records.head=null}else{let e=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}},"checkout");function k(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function C(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){t===e?r+="	*":r+="	|"});let a=[r,e.id,e.seq];for(let t in $.records.branches)$.records.branches.get(t)===e.id&&a.push(t);if(s.Rm.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=$.records.commits.get(e.parents[0]);k(t,e,r),e.parents[1]&&t.push($.records.commits.get(e.parents[1]))}else if(0==e.parents.length)return;else if(e.parents[0]){let r=$.records.commits.get(e.parents[0]);k(t,e,r)}C(t=y(t,t=>t.id))}(0,s.K2)(k,"upsert"),(0,s.K2)(C,"prettyPrintCommitHistory");var L=(0,s.K2)(function(){s.Rm.debug($.records.commits),C([v()[0]])},"prettyPrint"),T=(0,s.K2)(function(){$.reset(),(0,c.IU)()},"clear"),K=(0,s.K2)(function(){return[...$.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),M=(0,s.K2)(function(){return $.records.branches},"getBranches"),R=(0,s.K2)(function(){return $.records.commits},"getCommits"),v=(0,s.K2)(function(){let t=[...$.records.commits.values()];return t.forEach(function(t){s.Rm.debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),P={commitType:h,getConfig:m,setDirection:p,setOptions:x,getOptions:f,commit:u,branch:b,merge:w,cherryPick:B,checkout:E,prettyPrint:L,clear:T,getBranchesAsObjArray:K,getBranches:M,getCommits:R,getCommitsArray:v,getCurrentBranch:(0,s.K2)(function(){return $.records.currBranch},"getCurrentBranch"),getDirection:(0,s.K2)(function(){return $.records.direction},"getDirection"),getHead:(0,s.K2)(function(){return $.records.head},"getHead"),setAccTitle:c.SV,getAccTitle:c.iN,getAccDescription:c.m7,setAccDescription:c.EI,setDiagramTitle:c.ke,getDiagramTitle:c.ab},I=(0,s.K2)((t,e)=>{for(let r of((0,a.S)(t,e),t.dir&&e.setDirection(t.dir),t.statements))A(r,e)},"populate"),A=(0,s.K2)((t,e)=>{let r={Commit:(0,s.K2)(t=>e.commit(G(t)),"Commit"),Branch:(0,s.K2)(t=>e.branch(q(t)),"Branch"),Merge:(0,s.K2)(t=>e.merge(O(t)),"Merge"),Checkout:(0,s.K2)(t=>e.checkout(z(t)),"Checkout"),CherryPicking:(0,s.K2)(t=>e.cherryPick(H(t)),"CherryPicking")}[t.$type];r?r(t):s.Rm.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),G=(0,s.K2)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?h[t.type]:h.NORMAL,tags:t.tags??void 0}),"parseCommit"),q=(0,s.K2)(t=>({name:t.name,order:t.order??0}),"parseBranch"),O=(0,s.K2)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?h[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),z=(0,s.K2)(t=>t.branch,"parseCheckout"),H=(0,s.K2)(t=>({id:t.id,targetId:"",tags:t.tags?.length===0?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),S={parse:(0,s.K2)(async t=>{let e=await (0,n.qg)("gitGraph",t);s.Rm.debug(e),I(e,P)},"parse")},D=(0,c.D7)(),Y=D?.gitGraph,N=new Map,j=new Map,W=new Map,_=[],F=0,U="LR",V=(0,s.K2)(()=>{N.clear(),j.clear(),W.clear(),F=0,_=[],U="LR"},"clear"),J=(0,s.K2)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),Q=(0,s.K2)(t=>{let e,r,a;return"BT"===U?(r=(0,s.K2)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=(0,s.K2)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{let i="TB"===U||"BT"==U?j.get(t)?.y:j.get(t)?.x;void 0!==i&&r(i,a)&&(e=t,a=i)}),e},"findClosestParent"),X=(0,s.K2)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=j.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),Z=(0,s.K2)((t,e,r)=>{let a=r,i=r,o=[];t.forEach(t=>{let r=e.get(t);if(!r)throw Error(`Commit not found for key ${t}`);r.parents.length?i=Math.max(a=te(r),i):o.push(r),tr(r,a)}),a=i,o.forEach(t=>{ta(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(r?.parents.length){let t=X(r.parents);(a=j.get(t).y-40)<=i&&(i=a);let e=N.get(r.branch).pos,o=a-10;j.set(r.id,{x:e,y:o})}})},"setParallelBTPos"),tt=(0,s.K2)(t=>{let e=Q(t.parents.filter(t=>null!==t));if(!e)throw Error(`Closest parent not found for commit ${t.id}`);let r=j.get(e)?.y;if(void 0===r)throw Error(`Closest parent position not found for commit ${t.id}`);return r},"findClosestParentPos"),te=(0,s.K2)(t=>tt(t)+40,"calculateCommitPosition"),tr=(0,s.K2)((t,e)=>{let r=N.get(t.branch);if(!r)throw Error(`Branch not found for commit ${t.id}`);let a=r.pos,i=e+10;return j.set(t.id,{x:a,y:i}),{x:a,y:i}},"setCommitPosition"),ta=(0,s.K2)((t,e,r)=>{let a=N.get(t.branch);if(!a)throw Error(`Branch not found for commit ${t.id}`);let i=a.pos;j.set(t.id,{x:i,y:e+r})},"setRootPosition"),ti=(0,s.K2)((t,e,r,a,i,o)=>{if(o===h.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${i%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${i%8} ${a}-inner`);else if(o===h.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let c=t.append("circle");if(c.attr("cx",r.x),c.attr("cy",r.y),c.attr("r",e.type===h.MERGE?9:10),c.attr("class",`commit ${e.id} commit${i%8}`),o===h.MERGE){let o=t.append("circle");o.attr("cx",r.x),o.attr("cy",r.y),o.attr("r",6),o.attr("class",`commit ${a} ${e.id} commit${i%8}`)}o===h.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${i%8}`)}},"drawCommitBullet"),to=(0,s.K2)((t,e,r,a)=>{if(e.type!==h.CHERRY_PICK&&(e.customId&&e.type===h.MERGE||e.type!==h.MERGE)&&Y?.showCommitLabel){let i=t.append("g"),o=i.insert("rect").attr("class","commit-label-bkg"),c=i.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),s=c.node()?.getBBox();if(s&&(o.attr("x",r.posWithOffset-s.width/2-2).attr("y",r.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===U||"BT"===U?(o.attr("x",r.x-(s.width+16+5)).attr("y",r.y-12),c.attr("x",r.x-(s.width+16)).attr("y",r.y+s.height-12)):c.attr("x",r.posWithOffset-s.width/2),Y.rotateCommitLabel))if("TB"===U||"BT"===U)c.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),o.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(s.width+10)/25*9.5,e=10+s.width/25*8.5;i.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}},"drawCommitLabel"),tc=(0,s.K2)((t,e,r,a)=>{if(e.tags.length>0){let i=0,o=0,c=0,s=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),n=t.append("circle"),d=t.append("text").attr("y",r.y-16-i).attr("class","tag-label").text(a),h=d.node()?.getBBox();if(!h)throw Error("Tag bbox not found");o=Math.max(o,h.width),c=Math.max(c,h.height),d.attr("x",r.posWithOffset-h.width/2),s.push({tag:d,hole:n,rect:e,yOffset:i}),i+=20}for(let{tag:t,hole:e,rect:i,yOffset:n}of s){let s=c/2,d=r.y-19.2-n;if(i.attr("class","tag-label-bkg").attr("points",`
      ${a-o/2-2},${d+2}  
      ${a-o/2-2},${d-2}
      ${r.posWithOffset-o/2-4},${d-s-2}
      ${r.posWithOffset+o/2+4},${d-s-2}
      ${r.posWithOffset+o/2+4},${d+s+2}
      ${r.posWithOffset-o/2-4},${d+s+2}`),e.attr("cy",d).attr("cx",a-o/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===U||"BT"===U){let c=a+n;i.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${c+2}
        ${r.x},${c-2}
        ${r.x+10},${c-s-2}
        ${r.x+10+o+4},${c-s-2}
        ${r.x+10+o+4},${c+s+2}
        ${r.x+10},${c+s+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),ts=(0,s.K2)(t=>{switch(t.customType??t.type){case h.NORMAL:return"commit-normal";case h.REVERSE:return"commit-reverse";case h.HIGHLIGHT:return"commit-highlight";case h.MERGE:return"commit-merge";case h.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),tn=(0,s.K2)((t,e,r,a)=>{let i={x:0,y:0};if(t.parents.length>0){let r=Q(t.parents);if(r){let o=a.get(r)??i;return"TB"===e?o.y+40:"BT"===e?(a.get(t.id)??i).y-40:o.x+40}}else if("TB"===e)return 30;else if("BT"===e)return(a.get(t.id)??i).y-40;return 0},"calculatePosition"),td=(0,s.K2)((t,e,r)=>{let a="BT"===U&&r?e:e+10,i="TB"===U||"BT"===U?a:N.get(t.branch)?.pos,o="TB"===U||"BT"===U?N.get(t.branch)?.pos:a;if(void 0===o||void 0===i)throw Error(`Position were undefined for commit ${t.id}`);return{x:o,y:i,posWithOffset:a}},"getCommitPosition"),th=(0,s.K2)((t,e,r)=>{if(!Y)throw Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),i=t.append("g").attr("class","commit-labels"),o=30*("TB"===U||"BT"===U),c=[...e.keys()],n=Y?.parallelCommits??!1,d=c.sort((0,s.K2)((t,r)=>{let a=e.get(t)?.seq,i=e.get(r)?.seq;return void 0!==a&&void 0!==i?a-i:0},"sortKeys"));"BT"===U&&(n&&Z(d,e,o),d=d.reverse()),d.forEach(t=>{let c=e.get(t);if(!c)throw Error(`Commit not found for key ${t}`);n&&(o=tn(c,U,o,j));let s=td(c,o,n);if(r){let t=ts(c),e=c.customType??c.type,r=N.get(c.branch)?.index??0;ti(a,c,s,t,r,e),to(i,c,s,o),tc(i,c,s,o)}"TB"===U||"BT"===U?j.set(c.id,{x:s.x,y:s.posWithOffset}):j.set(c.id,{x:s.posWithOffset,y:s.y}),(o="BT"===U&&n?o+40:o+40+10)>F&&(F=o)})},"drawCommits"),tl=(0,s.K2)((t,e,r,a,i)=>{let o=("TB"===U||"BT"===U?r.x<a.x:r.y<a.y)?e.branch:t.branch,c=(0,s.K2)(t=>t.branch===o,"isOnBranchToGetCurve"),n=(0,s.K2)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...i.values()].some(t=>n(t)&&c(t))},"shouldRerouteArrow"),tm=(0,s.K2)((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(_.every(t=>Math.abs(t-a)>=10))return _.push(a),a;let i=Math.abs(t-e);return tm(t,e-i/5,r+1)},"findLane"),t$=(0,s.K2)((t,e,r,a)=>{let i,o=j.get(e.id),c=j.get(r.id);if(void 0===o||void 0===c)throw Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let s=tl(e,r,o,c,a),n="",d="",l=0,m=0,$=N.get(r.branch)?.index;if(r.type===h.MERGE&&e.id!==r.parents[0]&&($=N.get(e.branch)?.index),s){n="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",l=10,m=10;let t=o.y<c.y?tm(o.y,c.y):tm(c.y,o.y),r=o.x<c.x?tm(o.x,c.x):tm(c.x,o.x);"TB"===U?o.x<c.x?i=`M ${o.x} ${o.y} L ${r-l} ${o.y} ${d} ${r} ${o.y+m} L ${r} ${c.y-l} ${n} ${r+m} ${c.y} L ${c.x} ${c.y}`:($=N.get(e.branch)?.index,i=`M ${o.x} ${o.y} L ${r+l} ${o.y} ${n} ${r} ${o.y+m} L ${r} ${c.y-l} ${d} ${r-m} ${c.y} L ${c.x} ${c.y}`):"BT"===U?o.x<c.x?i=`M ${o.x} ${o.y} L ${r-l} ${o.y} ${n} ${r} ${o.y-m} L ${r} ${c.y+l} ${d} ${r+m} ${c.y} L ${c.x} ${c.y}`:($=N.get(e.branch)?.index,i=`M ${o.x} ${o.y} L ${r+l} ${o.y} ${d} ${r} ${o.y-m} L ${r} ${c.y+l} ${n} ${r-m} ${c.y} L ${c.x} ${c.y}`):o.y<c.y?i=`M ${o.x} ${o.y} L ${o.x} ${t-l} ${n} ${o.x+m} ${t} L ${c.x-l} ${t} ${d} ${c.x} ${t+m} L ${c.x} ${c.y}`:($=N.get(e.branch)?.index,i=`M ${o.x} ${o.y} L ${o.x} ${t+l} ${d} ${o.x+m} ${t} L ${c.x-l} ${t} ${n} ${c.x} ${t-m} L ${c.x} ${c.y}`)}else n="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,m=20,"TB"===U?(o.x<c.x&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-l} ${n} ${o.x+m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-l} ${o.y} ${d} ${c.x} ${o.y+m} L ${c.x} ${c.y}`),o.x>c.x&&(n="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,m=20,i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-l} ${d} ${o.x-m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x+l} ${o.y} ${n} ${c.x} ${o.y+m} L ${c.x} ${c.y}`),o.x===c.x&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):"BT"===U?(o.x<c.x&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+l} ${d} ${o.x+m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-l} ${o.y} ${n} ${c.x} ${o.y-m} L ${c.x} ${c.y}`),o.x>c.x&&(n="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,m=20,i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+l} ${n} ${o.x-m} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-l} ${o.y} ${n} ${c.x} ${o.y-m} L ${c.x} ${c.y}`),o.x===c.x&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):(o.y<c.y&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${c.x-l} ${o.y} ${d} ${c.x} ${o.y+m} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y-l} ${n} ${o.x+m} ${c.y} L ${c.x} ${c.y}`),o.y>c.y&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${o.x} ${o.y} L ${c.x-l} ${o.y} ${n} ${c.x} ${o.y-m} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y+l} ${d} ${o.x+m} ${c.y} L ${c.x} ${c.y}`),o.y===c.y&&(i=`M ${o.x} ${o.y} L ${c.x} ${c.y}`));if(void 0===i)throw Error("Line definition not found");t.append("path").attr("d",i).attr("class","arrow arrow"+$%8)},"drawArrow"),tg=(0,s.K2)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{t$(r,e.get(t),a,e)})})},"drawArrows"),ty=(0,s.K2)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{let a=e%8,i=N.get(t.name)?.pos;if(void 0===i)throw Error(`Position not found for branch ${t.name}`);let o=r.append("line");o.attr("x1",0),o.attr("y1",i),o.attr("x2",F),o.attr("y2",i),o.attr("class","branch branch"+a),"TB"===U?(o.attr("y1",30),o.attr("x1",i),o.attr("y2",F),o.attr("x2",i)):"BT"===U&&(o.attr("y1",F),o.attr("x1",i),o.attr("y2",30),o.attr("x2",i)),_.push(i);let c=J(t.name),s=r.insert("rect"),n=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);n.node().appendChild(c);let d=c.getBBox();s.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-30*(Y?.rotateCommitLabel===!0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),n.attr("transform","translate("+(-d.width-14-30*(Y?.rotateCommitLabel===!0))+", "+(i-d.height/2-1)+")"),"TB"===U?(s.attr("x",i-d.width/2-10).attr("y",0),n.attr("transform","translate("+(i-d.width/2-5)+", 0)")):"BT"===U?(s.attr("x",i-d.width/2-10).attr("y",F),n.attr("transform","translate("+(i-d.width/2-5)+", "+F+")")):s.attr("transform","translate(-19, "+(i-d.height/2)+")")})},"drawBranches"),tp=(0,s.K2)(function(t,e,r,a,i){return N.set(t,{pos:e,index:r}),e+=50+40*!!i+("TB"===U||"BT"===U?a.width/2:0)},"setBranchPosition"),tx={parser:S,db:P,renderer:{draw:(0,s.K2)(function(t,e,r,a){if(V(),s.Rm.debug("in gitgraph renderer",t+"\n","id:",e,r),!Y)throw Error("GitGraph config not found");let i=Y.rotateCommitLabel??!1,n=a.db;W=n.getCommits();let h=n.getBranchesAsObjArray();U=n.getDirection();let l=(0,d.Ltv)(`[id="${e}"]`),m=0;h.forEach((t,e)=>{let r=J(t.name),a=l.append("g"),o=a.insert("g").attr("class","branchLabel"),c=o.insert("g").attr("class","label branch-label");c.node()?.appendChild(r);let s=r.getBBox();m=tp(t.name,m,e,s,i),c.remove(),o.remove(),a.remove()}),th(l,W,!1),Y.showBranches&&ty(l,h),tg(l,W),th(l,W,!0),o._K.insertTitle(l,"gitTitleText",Y.titleTopMargin??0,n.getDiagramTitle()),(0,c.mj)(void 0,l,Y.diagramPadding,Y.useMaxWidth)},"draw")},styles:(0,s.K2)(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }
        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }
        .label${e}  { fill: ${t["git"+e]}; }
        .arrow${e} { stroke: ${t["git"+e]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles")}}}]);