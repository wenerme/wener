"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([["14828"],{61405:function(n,e,i){i.r(e),i.d(e,{frontMatter:()=>s,toc:()=>a,default:()=>m,metadata:()=>t,assets:()=>d,contentTitle:()=>l});var t=JSON.parse('{"id":"os/linux/boot/uboot","title":"U-Boot","description":"Ttips","source":"@site/../notes/os/linux/boot/uboot.md","sourceDirName":"os/linux/boot","slug":"/os/linux/boot/uboot","permalink":"/notes/os/linux/boot/uboot","draft":false,"unlisted":false,"editUrl":"https://github.com/wenerme/wener/edit/master/notes/../notes/os/linux/boot/uboot.md","tags":[],"version":"current","lastUpdatedBy":"wener","lastUpdatedAt":1603205276000,"frontMatter":{"id":"uboot","title":"U-Boot"},"sidebar":"docs","previous":{"title":"Syslinux","permalink":"/notes/os/linux/boot/syslinux"},"next":{"title":"UEFI","permalink":"/notes/os/linux/boot/uefi"}}'),o=i(86106),r=i(17776);let s={id:"uboot",title:"U-Boot"},l="U-Boot",d={},a=[{value:"Ttips",id:"ttips",level:2},{value:"image",id:"image",level:2},{value:"boot",id:"boot",level:2},{value:"\u542F\u52A8\u65E5\u5FD7",id:"\u542F\u52A8\u65E5\u5FD7",level:2},{value:"command",id:"command",level:2},{value:"Error loading uncompressed kernel without PVH ELF Note",id:"error-loading-uncompressed-kernel-without-pvh-elf-note",level:2}];function c(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"u-boot",children:"U-Boot"})}),"\n",(0,o.jsx)(e.h2,{id:"ttips",children:"Ttips"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"https://u-boot.readthedocs.io/en/stable/index.html",children:"Das U-Boot -- the Universal Boot Loader"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://www.denx.de/wiki/DULG/Manual",children:"Manual"})}),"\n",(0,o.jsxs)(e.li,{children:["wikipedia ",(0,o.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Das_U-Boot",children:"Das U-Boot"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.li,{children:"\u4E3B\u8981\u7528\u4E8E\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u5F00\u673A\u52A0\u8F7D\u7A0B\u5E8F,\u53EF\u4EE5\u652F\u6301\u591A\u79CD\u4E0D\u540C\u7684\u8BA1\u7B97\u673A\u7CFB\u7EDF\u7ED3\u6784."}),"\n",(0,o.jsxs)(e.li,{children:["\u652F\u6301\u67B6\u6784\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"68k, ARM, Blackfin, MicroBlaze, MIPS, Nios, SuperH, PPC, RISC-V, x86"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\u53C2\u8003\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["u-boot ",(0,o.jsx)(e.a,{href:"https://u-boot.readthedocs.io/en/stable/board/emulation/qemu-x86.html",children:"qemu-x86"})]}),"\n",(0,o.jsxs)(e.li,{children:["\u5305\u5185\u5BB9 ",(0,o.jsx)(e.a,{href:"https://pkgs.alpinelinux.org/contents?branch=edge&name=uboot-tools&arch=x86_64&repo=main",children:"uboot-tools"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"https://pkgs.alpinelinux.org/packages?name=u-boot-all&branch=edge",children:"u-boot-all"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u6240\u6709\u5F00\u53D1\u677F\u7684 uboot"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://elinux.org/RPi_U-Boot",children:"RPi U-Boot"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://www.cnblogs.com/pengdonglin137/p/12194548.html",children:"uboot qemu"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://pandysong.github.io/blog/post/run_u-boot_in_qemu/",children:"Run u-boot in qemu"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://sourceforge.net/projects/powerast/files/Firmware/",children:"https://sourceforge.net/projects/powerast/files/Firmware/"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://variwiki.com/index.php?title=U-Boot_features",children:"https://variwiki.com/index.php?title=U-Boot_features"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://linux-sunxi.org/U-Boot",children:"https://linux-sunxi.org/U-Boot"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://wiki.alpinelinux.org/wiki/DIY_Fully_working_Alpine_Linux_for_Allwinner_and_Other_ARM_SOCs",children:"https://wiki.alpinelinux.org/wiki/DIY_Fully_working_Alpine_Linux_for_Allwinner_and_Other_ARM_SOCs"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://git.alpinelinux.org/aports/tree/scripts/mkimg.arm.sh",children:"mkimg.arm.sh"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://pkgs.alpinelinux.org/contents?file=&path=&name=raspberrypi-bootloader&branch=edge",children:"raspberrypi-bootloader"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# \u7F16\u8BD1\n# \u652F\u6301\u914D\u7F6E https://github.com/u-boot/u-boot/tree/master/configs\n# \u4F9D\u8D56 https://git.alpinelinux.org/aports/tree/main/uboot-tools/APKBUILD\napk add swig python3-dev bison flex openssl-dev linux-headers\nmake qemu-x86_64_defconfig\n# make cscope\nmake all -j $(nproc)\n# test\nqemu-system-x86_64 -nographic -no-reboot -bios u-boot.rom\n\n# vexpress_ca9x4_defconfig\n# menuconfig\nmake qemu_arm64_defconfig\nmake all -j $(nproc)\n\n# export CROSS_COMPILE=arm-linux-gnueabi-\n# export CROSS_COMPILE=aarch64-linux-gnu-\n# make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- vexpress_ca9x4_defconfig\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j8\n\n# example - /usr/share/doc/uboot-tools/examples/fw_env.config\napk add uboot-tools uboot-tools-examples\n\ncat <<CONF > boot.scr\nusb start\nsetenv bootargs earlyprintk console=tty0 console=ttyAMA0\nCONF\nmkimage -A arm -O linux -T script -C none -n boot.scr -d boot.scr boot.scr.uimg\n\n#\n# mkenvimage -s 1024 /usr/share/doc/uboot-tools/examples/fw_env.config\nfw_printenv -c /usr/share/doc/uboot-tools/examples/fw_env.config\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u5F00\u53D1\u677F\u542F\u52A8\u9700\u8981\u6709\u4E32\u53E3\u6765\u8FDB\u884C\u8C03\u8BD5"}),"\n",(0,o.jsx)(e.li,{children:"\u9ED8\u8BA4\u4E32\u53E3\u914D\u7F6E 115200/8N1 (115200 bps, 8 Bit per character, no parity, 1 stop bit, no handshake)"}),"\n",(0,o.jsx)(e.li,{children:"Linux \u4E0B\u63A8\u8350\u4F7F\u7528 kermit \u6216 cu\uFF0C\u4E0D\u8981\u4F7F\u7528 minicom\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528 screen \u548C picocom\uFF0C\u5207\u8BB0\u5173\u95ED\u786C\u4EF6\u548C\u8F6F\u4EF6 flow control"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"image",children:"image"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u201Craw\u201D ELF image (vmlinux)"}),"\n",(0,o.jsx)(e.li,{children:"uImage format, which contains the compressed vmlinux plus a few extra bytes of metadata that describe the kernel load address."}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"http://www.denx.de/wiki/view/DULG/HowCanICreateAnUImageFromAELFFile",children:"How can I create an uImage from a ELF file"})}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"arch"}),(0,o.jsx)(e.th,{children:"name"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"alpha"}),(0,o.jsx)(e.td,{children:"Alpha"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"arc"}),(0,o.jsx)(e.td,{children:"ARC"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"arm"}),(0,o.jsx)(e.td,{children:"ARM"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"arm64"}),(0,o.jsx)(e.td,{children:"AArch64"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"avr32"}),(0,o.jsx)(e.td,{children:"AVR32"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"blackfin"}),(0,o.jsx)(e.td,{children:"Blackfin"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"ia64"}),(0,o.jsx)(e.td,{children:"IA64"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"invalid"}),(0,o.jsx)(e.td,{children:"Invalid ARCH"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"m68k"}),(0,o.jsx)(e.td,{children:"M68K"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"microblaze"}),(0,o.jsx)(e.td,{children:"MicroBlaze"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"mips"}),(0,o.jsx)(e.td,{children:"MIPS"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"mips64"}),(0,o.jsx)(e.td,{children:"MIPS 64 Bit"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"nds32"}),(0,o.jsx)(e.td,{children:"NDS32"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"nios2"}),(0,o.jsx)(e.td,{children:"NIOS II"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"or1k"}),(0,o.jsx)(e.td,{children:"OpenRISC 1000"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"powerpc"}),(0,o.jsx)(e.td,{children:"PowerPC"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"riscv"}),(0,o.jsx)(e.td,{children:"RISC-V"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"s390"}),(0,o.jsx)(e.td,{children:"IBM S390"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"sandbox"}),(0,o.jsx)(e.td,{children:"Sandbox"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"sh"}),(0,o.jsx)(e.td,{children:"SuperH"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"sparc"}),(0,o.jsx)(e.td,{children:"SPARC"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"sparc64"}),(0,o.jsx)(e.td,{children:"SPARC 64 Bit"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"x86"}),(0,o.jsx)(e.td,{children:"Intel x86"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"x86_64"}),(0,o.jsx)(e.td,{children:"AMD x86_64"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"xtensa"}),(0,o.jsx)(e.td,{children:"Xtensa"})]})]})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"mkimage -A arm -O linux -T kernel -C gzip -d vmlinux uImage\nmkimage -A arm64 -O linux -T ramdisk -C gzip -d init.cpio.gz initramfs.uImage\n# https://www.denx.de/wiki/view/DULG/HowCanILoadAndUncompressACompressedImage\n# bootm\n# -T standalone\n"})}),"\n",(0,o.jsx)(e.h2,{id:"boot",children:"boot"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"boot.scr.uimg"}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://mediawiki.compulab.com/w/index.php?title=U-Boot:_Quick_reference",children:"https://mediawiki.compulab.com/w/index.php?title=U-Boot:_Quick_reference"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://www.digi.com/resources/documentation/digidocs/PDFs/90000852.pdf",children:"https://www.digi.com/resources/documentation/digidocs/PDFs/90000852.pdf"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# \u7248\u672C\nversion\n# \u4E3B\u677F\u4FE1\u606F\nbdinfo\n# \u4E32\u53E3\u4FE1\u606F\nconinfo\n# cpu \u4FE1\u606F\ncpu info\ncpu detail\n# QEMU \u56FA\u4EF6\u5217\u8868\nqfw list\n\nvirtio scan\nvirtio info\n\n# \u5B50\u7CFB\u7EDF\nide\nusb\nvirtio\nnvme\nmmc\n\n#\ndm tree\n\next4ls ide 0 /\next4ls ide 0:2 /\n\next4load ide 0 ${kernel_addr_r} vmlinuz-lts\next4load ide 0 ${ramdisk_addr_r} initramfs-lts\nzboot ${kernel_addr_r}\n\n# sda\nsetenv bootargs root=/dev/sda1 ro\nload ide 0 ${kernel_addr_r} /vmlinuz-lts\nload ide 0 ${ramdisk_addr_r} /initramfs-lts\nzboot ${kernel_addr_r} - ${ramdisk_addr_r} ${filesize}\n\n# \u6301\u4E45\nsetenv bootargs root=UUID=b2aaf743-0418-4d90-94cc-3e6108d7d968 ro\nsetenv boot zboot 03000000 0 04000000 \\${filesize}\nsetenv bootcmd \"ext2load scsi 0:2 03000000 /boot/vmlinuz-3.13.0-58-generic; ext2load scsi 0:2 04000000 /boot/initrd.img-3.13.0-58-generic; run boot\"\nsaveenv\n\n# vda\nsetenv bootargs root=/dev/vda1 ro\nload virtio 0 03000000 /vmlinuz-lts\nload virtio 0 04000000 /initramfs-lts\nzboot 03000000 0 04000000 ${filesize}\n\nqemu-system-x86_64 -m 1024 -smp 2 -nographic -bios artifacts/uboot/qemu-x86_64/u-boot.rom \\\n -kernel virt/vmlinuz-virt -append 'root=/dev/ram console=ttyS0' \\\n -initrd virt/initramfs-virt\nqfw load\nzboot 01000000 - 04000000 5fe85e\n\npart list mmc 0\nls mmc 0:1\n\nload mmc 0:1 0x60008000 zImage\next4load mmc 0:1 0x60008000 zImage \n\nload mmc 0:1 0x61000000 vexpress-v2p-ca9.dtb\next4load mmc 0:1 0x61000000 vexpress-v2p-ca9.dtb\n\nsetenv bootargs 'root=/dev/mmcblk0p2 rw rootfstype=ext4 rootwait earlycon console=tty0 console=ttyAMA0 init=/linuxrc ignore_loglevel'\nbootz 0x60008000 - 0x61000000\n\n\n\nsetenv ipaddr 10.8.8.100; setenv netmask 255.255.255.0; setenv serverip 10.8.8.3;\nsetenv bootargs 'root=/dev/nfs rw nfsroot=10.8.8.3:/home/macrofun/NFS_HOME init=/linuxrc ip=10.8.8.100 console=ttyAMA0';\nsaveenv\n\ntftp 0x60003000 uImage;\nsetenv bootargs root=/dev/nfs rw nfsroot=10.8.8.3:/home/macrofun/NFS_HOME,proto=tcp,nfsvers=4,nolock init=/linuxrc ip=10.8.8.100 console=ttyAMA0 console=tty0\n# qemu-system-arm -M vexpress-a9 -m 512 -serial stdio  -net nic -net tap,ifname=tap0,script=no -kernel u-boot\n# qemu-system-aarch64 -nographic -curses -machine virt -cpu cortex-a57 -bios u-boot.bin\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"if load ${devtype} ${devnum}:${bootpart} ${kernel_addr_r} /boot/Image; then\n  echo fdt: ${fdtfile}\n  if load ${devtype} ${devnum}:${bootpart} ${fdt_addr_r} /boot/dtbs/${fdtfile}; then\n    if load ${devtype} ${devnum}:${bootpart} ${ramdisk_addr_r} /boot/initramfs-linux.img; then\n      booti ${kernel_addr_r} ${ramdisk_addr_r}:${filesize} ${fdt_addr_r};\n    else\n      booti ${kernel_addr_r} - ${fdt_addr_r};\n    fi;\n  fi;\nfi\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u542F\u52A8\u65E5\u5FD7",children:"\u542F\u52A8\u65E5\u5FD7"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'Valid Boot Flag\nSetup Size = 0x00004400\nMagic signature found\nUsing boot protocol version 2.0c\nLinux kernel version 3.13.0-58-generic (buildd@allspice) #97-Ubuntu SMP Wed Jul 8 02:56:15 UTC 2015\nBuilding boot_params at 0x00090000\nLoading bzImage at address 100000 (5805728 bytes)\nMagic signature found\nInitial RAM disk at linear address 0x04000000, size 19215259 bytes\nKernel command line: "root=/dev/disk/by-partuuid/965c59ee-1822-4326-90d2-b02446050059 ro"\n\nStarting kernel ...\n'})}),"\n",(0,o.jsx)(e.h2,{id:"command",children:"command"}),"\n",(0,o.jsx)(e.p,{children:"? - alias for 'help'\nbase - print or set address offset\nbdinfo - print Board Info structure\nblkcache - block cache diagnostics and control\nboot - boot default, i.e., run 'bootcmd'\nbootd - boot default, i.e., run 'bootcmd'\nbootefi - Boots an EFI payload from memory\nbootelf - Boot from an ELF image in memory\nbootm - boot application image from memory\nbootp - boot image via network using BOOTP/TFTP protocol\nbootstage - Boot stage command\nbootvx - Boot vxWorks from an ELF image\ncmp - memory compare\nconinfo - print console devices and information\ncp - memory copy\ncpu - display information about CPUs\ncrc32 - checksum calculation\ndate - get/set/reset date & time\ndhcp - boot image via network using DHCP/TFTP protocol\ndiskboot - boot from IDE device\ndm - Driver model low level access\necho - echo args to console\neditenv - edit environment variable\nenv - environment handling commands\nexit - exit script\next2load - load binary file from a Ext2 filesystem\next2ls - list files in a directory (default /)\next4load - load binary file from a Ext4 filesystem\next4ls - list files in a directory (default /)\next4size - determine a file's size\next4write - create a file in the root directory\nfalse - do nothing, unsuccessfully\nfatinfo - print information about filesystem\nfatload - load binary file from a dos filesystem\nfatls - list files in a directory (default /)\nfatmkdir - create a directory\nfatrm - delete a file\nfatsize - determine a file's size\nfatwrite - write file into a dos filesystem\nfdt - flattened device tree utility commands\nfstype - Look up a filesystem type\ngettime - get timer val elapsed\ngo - start application at address 'addr'\nhelp - print command description/usage\nide - IDE sub-system\niminfo - print header information for application image\nimxtract - extract a part of a multi-image\ninterrupts- enable or disable interrupts\niod - IO space display\niow - IO space modify\nirqinfo - print information about IRQs\nitest - return true/false on integer compare\nlcdputs - print string on video framebuffer\nln - Create a symbolic link\nload - load binary file from a filesystem\nloadb - load binary file over serial line (kermit mode)\nloads - load S-Record file over serial line\nloadx - load binary file over serial line (xmodem mode)\nloady - load binary file over serial line (ymodem mode)\nloop - infinite loop on address range\nls - list files in a directory (default /)\nmd - memory display\nmii - MII utility commands\nmm - memory modify (auto-incrementing address)\nmtrr - Use x86 memory type range registers (32-bit only)\nmw - memory write (fill)\nnm - memory modify (constant address)\nnvme - NVM Express sub-system\npart - disk partition related commands\npci - list and access PCI Configuration Space\nping - send ICMP ECHO_REQUEST to network host\nprintenv - print environment variables\npxe - commands to get and boot from pxe files\nqfw - QEMU firmware interface\nreset - Perform RESET of the CPU\nrun - run commands in an environment variable\nsave - save file to a filesystem\nscsi - SCSI sub-system\nscsiboot - boot from SCSI device\nsetcurs - set cursor position within screen\nsetenv - set environment variables\nsf - SPI flash sub-system\nshowvar - print local hushshell variables\nsize - determine a file's size\nsleep - delay execution for some time\nsource - run script from memory\nsspi - SPI utility command\nsysboot - command to get and boot from syslinux files\ntest - minimal test like /bin/sh\ntftpboot - boot image via network using TFTP protocol\ntime - run commands and summarize execution time\ntrue - do nothing, successfully\nusb - USB sub-system\nusbboot - boot from USB device\nversion - print monitor, compiler and linker version\nvirtio - virtio block devices sub-system\nzboot - Boot bzImage"}),"\n",(0,o.jsx)(e.h1,{id:"faq",children:"FAQ"}),"\n",(0,o.jsx)(e.h2,{id:"error-loading-uncompressed-kernel-without-pvh-elf-note",children:"Error loading uncompressed kernel without PVH ELF Note"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.code,{children:"-machine type=pc-i440fx-3.1"})})]})}function m(n={}){let{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},17776:function(n,e,i){i.d(e,{R:()=>s,x:()=>l});var t=i(7378);let o={},r=t.createContext(o);function s(n){let e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);